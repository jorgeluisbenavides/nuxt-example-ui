/*!
 * devextreme-vue
 * Version: 25.1.3
 * Build date: Wed Jun 25 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

export { ExplicitTypes } from "devextreme/ui/card_view";
import { PropType } from "vue";
import CardView, { Properties } from "devextreme/ui/card_view";
import DataSource from "devextreme/data/data_source";
import DOMComponent from "devextreme/core/dom_component";
import { CardCover, CardHeader, ColumnProperties, dxCardViewEditing, HeaderPanel, CardClickEvent, CardDblClickEvent, CardHoverChangedEvent, CardInsertedEvent, CardInsertingEvent, CardPreparedEvent, CardRemovedEvent, CardRemovingEvent, CardSavedEvent, CardSavingEvent, CardUpdatedEvent, CardUpdatingEvent, ContextMenuPreparingEvent, EditCanceledEvent, EditCancelingEvent, EditingStartEvent, FieldCaptionClickEvent, FieldCaptionDblClickEvent, FieldCaptionPreparedEvent, FieldValueClickEvent, FieldValueDblClickEvent, FieldValuePreparedEvent, FocusedCardChanged, InitNewCardEvent, SelectionChangedEvent, Paging, RemoteOperations, SelectionConfiguration, CardHeaderItem, CardHeaderPredefinedItem, EditingTexts, PredefinedToolbarItem } from "devextreme/ui/card_view";
import { ValidationRuleType, HorizontalAlignment, VerticalAlignment, ButtonStyle, ToolbarItemLocation, ToolbarItemComponent, SearchMode, SingleMultipleOrNone, SelectAllMode, DataType, SortOrder, ComparisonOperator, DragHighlight, Direction, PositionAlignment, DisplayMode, ScrollbarMode, TabsIconPosition, TabsStyle, Position } from "devextreme/common";
import { ColumnChooser, FilterPanel, HeaderFilter, Pager, SearchPanel, Sorting, HeaderFilterSearchConfig, HeaderFilterTexts, SelectionColumnDisplayMode, DataChangeType, FilterType, ColumnHeaderFilter, ColumnChooserMode, ColumnChooserSearchConfig, ColumnChooserSelectionConfig, HeaderFilterGroupInterval, ColumnHeaderFilterSearchConfig, DataChange, FilterPanelTexts, PagerPageSize } from "devextreme/common/grids";
import { DataSourceOptions } from "devextreme/common/data";
import { Store } from "devextreme/data/store";
import { dxFilterBuilderOptions, dxFilterBuilderField, FieldInfo, dxFilterBuilderCustomOperation, GroupOperation, ContentReadyEvent as FilterBuilderContentReadyEvent, DisposingEvent as FilterBuilderDisposingEvent, EditorPreparedEvent, EditorPreparingEvent, InitializedEvent as FilterBuilderInitializedEvent, OptionChangedEvent as FilterBuilderOptionChangedEvent, ValueChangedEvent } from "devextreme/ui/filter_builder";
import { dxLoadPanelOptions, ContentReadyEvent as LoadPanelContentReadyEvent, DisposingEvent as LoadPanelDisposingEvent, HiddenEvent, HidingEvent, InitializedEvent as LoadPanelInitializedEvent, OptionChangedEvent as LoadPanelOptionChangedEvent, ShowingEvent, ShownEvent } from "devextreme/ui/load_panel";
import { EventInfo } from "devextreme/common/core/events";
import { Component } from "devextreme/core/component";
import { PagerBase } from "devextreme/ui/pagination";
import { AnimationConfig, CollisionResolution, PositionConfig, AnimationState, AnimationType, CollisionResolutionCombination } from "devextreme/common/core/animation";
import { dxButtonOptions, ClickEvent, ContentReadyEvent, DisposingEvent, InitializedEvent, OptionChangedEvent } from "devextreme/ui/button";
import { FormItemType, dxFormSimpleItem, dxFormOptions, dxFormGroupItem, dxFormTabbedItem, dxFormEmptyItem, dxFormButtonItem, LabelLocation, FormLabelMode, ContentReadyEvent as FormContentReadyEvent, DisposingEvent as FormDisposingEvent, EditorEnterKeyEvent, FieldDataChangedEvent, InitializedEvent as FormInitializedEvent, OptionChangedEvent as FormOptionChangedEvent, FormItemComponent } from "devextreme/ui/form";
import { LocateInMenuMode, ShowTextMode } from "devextreme/ui/toolbar";
import { dxTabPanelOptions, ContentReadyEvent as TabPanelContentReadyEvent, DisposingEvent as TabPanelDisposingEvent, InitializedEvent as TabPanelInitializedEvent, ItemClickEvent, ItemContextMenuEvent, ItemHoldEvent, ItemRenderedEvent, OptionChangedEvent as TabPanelOptionChangedEvent, SelectionChangedEvent as TabPanelSelectionChangedEvent, SelectionChangingEvent, TitleClickEvent, TitleHoldEvent, TitleRenderedEvent } from "devextreme/ui/tab_panel";
import { event } from "devextreme/events/events.types";
import * as CommonTypes from "devextreme/common";
type AccessibleOptions = Pick<Properties, "accessKey" | "activeStateEnabled" | "allowColumnReordering" | "cardContentTemplate" | "cardCover" | "cardFooterTemplate" | "cardHeader" | "cardMaxWidth" | "cardMinWidth" | "cardsPerRow" | "cardTemplate" | "columnChooser" | "columns" | "dataSource" | "disabled" | "editing" | "elementAttr" | "errorRowEnabled" | "fieldHintEnabled" | "filterBuilder" | "filterBuilderPopup" | "filterPanel" | "filterValue" | "focusStateEnabled" | "headerFilter" | "headerPanel" | "height" | "hint" | "hoverStateEnabled" | "keyExpr" | "loadPanel" | "noDataTemplate" | "noDataText" | "onCardClick" | "onCardDblClick" | "onCardHoverChanged" | "onCardInserted" | "onCardInserting" | "onCardPrepared" | "onCardRemoved" | "onCardRemoving" | "onCardSaved" | "onCardSaving" | "onCardUpdated" | "onCardUpdating" | "onContentReady" | "onContextMenuPreparing" | "onDataErrorOccurred" | "onDisposing" | "onEditCanceled" | "onEditCanceling" | "onEditingStart" | "onFieldCaptionClick" | "onFieldCaptionDblClick" | "onFieldCaptionPrepared" | "onFieldValueClick" | "onFieldValueDblClick" | "onFieldValuePrepared" | "onFocusedCardChanged" | "onInitialized" | "onInitNewCard" | "onOptionChanged" | "onSelectionChanged" | "pager" | "paging" | "remoteOperations" | "rtlEnabled" | "scrolling" | "searchPanel" | "selectedCardKeys" | "selection" | "sorting" | "tabIndex" | "toolbar" | "visible" | "width" | "wordWrapEnabled">;
interface DxCardView extends AccessibleOptions {
    readonly instance?: CardView;
}
declare const DxCardView: import("@vue/runtime-core").DefineComponent<{
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    allowColumnReordering: BooleanConstructor;
    cardContentTemplate: {};
    cardCover: PropType<Record<string, any> | CardCover<unknown>>;
    cardFooterTemplate: {};
    cardHeader: PropType<Record<string, any> | CardHeader>;
    cardMaxWidth: NumberConstructor;
    cardMinWidth: NumberConstructor;
    cardsPerRow: PropType<number | "auto">;
    cardTemplate: {};
    columnChooser: PropType<Record<string, any> | ColumnChooser>;
    columns: PropType<(string | ColumnProperties<unknown, unknown>)[]>;
    dataSource: PropType<string | any[] | Record<string, any> | DataSource<any, any> | DataSourceOptions<any, any, any, any> | Store<any, any>>;
    disabled: BooleanConstructor;
    editing: PropType<Record<string, any> | dxCardViewEditing<unknown, unknown>>;
    elementAttr: PropType<Record<string, any>>;
    errorRowEnabled: BooleanConstructor;
    fieldHintEnabled: BooleanConstructor;
    filterBuilder: PropType<Record<string, any> | dxFilterBuilderOptions>;
    filterBuilderPopup: PropType<Record<string, any>>;
    filterPanel: PropType<FilterPanel<any, any, any>>;
    filterValue: PropType<string | any[] | (() => any)>;
    focusStateEnabled: BooleanConstructor;
    headerFilter: PropType<Record<string, any> | HeaderFilter>;
    headerPanel: PropType<Record<string, any> | HeaderPanel<unknown, unknown>>;
    height: (NumberConstructor | StringConstructor)[];
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    keyExpr: PropType<string | string[]>;
    loadPanel: PropType<Record<string, any> | dxLoadPanelOptions>;
    noDataTemplate: {};
    noDataText: StringConstructor;
    onCardClick: PropType<(e: CardClickEvent) => void>;
    onCardDblClick: PropType<(e: CardDblClickEvent) => void>;
    onCardHoverChanged: PropType<(e: CardHoverChangedEvent) => void>;
    onCardInserted: PropType<(e: CardInsertedEvent) => void>;
    onCardInserting: PropType<(e: CardInsertingEvent) => void>;
    onCardPrepared: PropType<(e: CardPreparedEvent) => void>;
    onCardRemoved: PropType<(e: CardRemovedEvent) => void>;
    onCardRemoving: PropType<(e: CardRemovingEvent) => void>;
    onCardSaved: PropType<(e: CardSavedEvent) => void>;
    onCardSaving: PropType<(e: CardSavingEvent) => void>;
    onCardUpdated: PropType<(e: CardUpdatedEvent) => void>;
    onCardUpdating: PropType<(e: CardUpdatingEvent) => void>;
    onContentReady: PropType<(e: EventInfo<any>) => void>;
    onContextMenuPreparing: PropType<(e: ContextMenuPreparingEvent) => void>;
    onDataErrorOccurred: PropType<(e: {
        component: Object;
        element: any;
        error: any;
        model: any;
    }) => void>;
    onDisposing: PropType<(e: EventInfo<any>) => void>;
    onEditCanceled: PropType<(e: EditCanceledEvent) => void>;
    onEditCanceling: PropType<(e: EditCancelingEvent) => void>;
    onEditingStart: PropType<(e: EditingStartEvent) => void>;
    onFieldCaptionClick: PropType<(e: FieldCaptionClickEvent) => void>;
    onFieldCaptionDblClick: PropType<(e: FieldCaptionDblClickEvent) => void>;
    onFieldCaptionPrepared: PropType<(e: FieldCaptionPreparedEvent) => void>;
    onFieldValueClick: PropType<(e: FieldValueClickEvent) => void>;
    onFieldValueDblClick: PropType<(e: FieldValueDblClickEvent) => void>;
    onFieldValuePrepared: PropType<(e: FieldValuePreparedEvent) => void>;
    onFocusedCardChanged: PropType<(e: FocusedCardChanged) => void>;
    onInitialized: PropType<(e: {
        component: Component<any>;
        element: any;
    }) => void>;
    onInitNewCard: PropType<(e: InitNewCardEvent) => void>;
    onOptionChanged: PropType<(e: {
        component: DOMComponent;
        element: any;
        fullName: string;
        model: any;
        name: string;
        previousValue: any;
        value: any;
    }) => void>;
    onSelectionChanged: PropType<(e: SelectionChangedEvent) => void>;
    pager: PropType<Record<string, any> | PagerBase | Pager>;
    paging: PropType<Record<string, any> | Paging>;
    remoteOperations: PropType<boolean | Record<string, any> | "auto" | RemoteOperations>;
    rtlEnabled: BooleanConstructor;
    scrolling: PropType<Record<string, any>>;
    searchPanel: PropType<Record<string, any> | SearchPanel>;
    selectedCardKeys: PropType<any[]>;
    selection: PropType<Record<string, any> | SelectionConfiguration>;
    sorting: PropType<Record<string, any> | Sorting>;
    tabIndex: NumberConstructor;
    toolbar: PropType<Record<string, any> | DxCardViewTypes.Toolbar>;
    visible: BooleanConstructor;
    width: (NumberConstructor | StringConstructor)[];
    wordWrapEnabled: BooleanConstructor;
}, unknown, unknown, {
    instance(): CardView;
}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:accessKey": null;
    "update:activeStateEnabled": null;
    "update:allowColumnReordering": null;
    "update:cardContentTemplate": null;
    "update:cardCover": null;
    "update:cardFooterTemplate": null;
    "update:cardHeader": null;
    "update:cardMaxWidth": null;
    "update:cardMinWidth": null;
    "update:cardsPerRow": null;
    "update:cardTemplate": null;
    "update:columnChooser": null;
    "update:columns": null;
    "update:dataSource": null;
    "update:disabled": null;
    "update:editing": null;
    "update:elementAttr": null;
    "update:errorRowEnabled": null;
    "update:fieldHintEnabled": null;
    "update:filterBuilder": null;
    "update:filterBuilderPopup": null;
    "update:filterPanel": null;
    "update:filterValue": null;
    "update:focusStateEnabled": null;
    "update:headerFilter": null;
    "update:headerPanel": null;
    "update:height": null;
    "update:hint": null;
    "update:hoverStateEnabled": null;
    "update:keyExpr": null;
    "update:loadPanel": null;
    "update:noDataTemplate": null;
    "update:noDataText": null;
    "update:onCardClick": null;
    "update:onCardDblClick": null;
    "update:onCardHoverChanged": null;
    "update:onCardInserted": null;
    "update:onCardInserting": null;
    "update:onCardPrepared": null;
    "update:onCardRemoved": null;
    "update:onCardRemoving": null;
    "update:onCardSaved": null;
    "update:onCardSaving": null;
    "update:onCardUpdated": null;
    "update:onCardUpdating": null;
    "update:onContentReady": null;
    "update:onContextMenuPreparing": null;
    "update:onDataErrorOccurred": null;
    "update:onDisposing": null;
    "update:onEditCanceled": null;
    "update:onEditCanceling": null;
    "update:onEditingStart": null;
    "update:onFieldCaptionClick": null;
    "update:onFieldCaptionDblClick": null;
    "update:onFieldCaptionPrepared": null;
    "update:onFieldValueClick": null;
    "update:onFieldValueDblClick": null;
    "update:onFieldValuePrepared": null;
    "update:onFocusedCardChanged": null;
    "update:onInitialized": null;
    "update:onInitNewCard": null;
    "update:onOptionChanged": null;
    "update:onSelectionChanged": null;
    "update:pager": null;
    "update:paging": null;
    "update:remoteOperations": null;
    "update:rtlEnabled": null;
    "update:scrolling": null;
    "update:searchPanel": null;
    "update:selectedCardKeys": null;
    "update:selection": null;
    "update:sorting": null;
    "update:tabIndex": null;
    "update:toolbar": null;
    "update:visible": null;
    "update:width": null;
    "update:wordWrapEnabled": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    allowColumnReordering: BooleanConstructor;
    cardContentTemplate: {};
    cardCover: PropType<Record<string, any> | CardCover<unknown>>;
    cardFooterTemplate: {};
    cardHeader: PropType<Record<string, any> | CardHeader>;
    cardMaxWidth: NumberConstructor;
    cardMinWidth: NumberConstructor;
    cardsPerRow: PropType<number | "auto">;
    cardTemplate: {};
    columnChooser: PropType<Record<string, any> | ColumnChooser>;
    columns: PropType<(string | ColumnProperties<unknown, unknown>)[]>;
    dataSource: PropType<string | any[] | Record<string, any> | DataSource<any, any> | DataSourceOptions<any, any, any, any> | Store<any, any>>;
    disabled: BooleanConstructor;
    editing: PropType<Record<string, any> | dxCardViewEditing<unknown, unknown>>;
    elementAttr: PropType<Record<string, any>>;
    errorRowEnabled: BooleanConstructor;
    fieldHintEnabled: BooleanConstructor;
    filterBuilder: PropType<Record<string, any> | dxFilterBuilderOptions>;
    filterBuilderPopup: PropType<Record<string, any>>;
    filterPanel: PropType<FilterPanel<any, any, any>>;
    filterValue: PropType<string | any[] | (() => any)>;
    focusStateEnabled: BooleanConstructor;
    headerFilter: PropType<Record<string, any> | HeaderFilter>;
    headerPanel: PropType<Record<string, any> | HeaderPanel<unknown, unknown>>;
    height: (NumberConstructor | StringConstructor)[];
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    keyExpr: PropType<string | string[]>;
    loadPanel: PropType<Record<string, any> | dxLoadPanelOptions>;
    noDataTemplate: {};
    noDataText: StringConstructor;
    onCardClick: PropType<(e: CardClickEvent) => void>;
    onCardDblClick: PropType<(e: CardDblClickEvent) => void>;
    onCardHoverChanged: PropType<(e: CardHoverChangedEvent) => void>;
    onCardInserted: PropType<(e: CardInsertedEvent) => void>;
    onCardInserting: PropType<(e: CardInsertingEvent) => void>;
    onCardPrepared: PropType<(e: CardPreparedEvent) => void>;
    onCardRemoved: PropType<(e: CardRemovedEvent) => void>;
    onCardRemoving: PropType<(e: CardRemovingEvent) => void>;
    onCardSaved: PropType<(e: CardSavedEvent) => void>;
    onCardSaving: PropType<(e: CardSavingEvent) => void>;
    onCardUpdated: PropType<(e: CardUpdatedEvent) => void>;
    onCardUpdating: PropType<(e: CardUpdatingEvent) => void>;
    onContentReady: PropType<(e: EventInfo<any>) => void>;
    onContextMenuPreparing: PropType<(e: ContextMenuPreparingEvent) => void>;
    onDataErrorOccurred: PropType<(e: {
        component: Object;
        element: any;
        error: any;
        model: any;
    }) => void>;
    onDisposing: PropType<(e: EventInfo<any>) => void>;
    onEditCanceled: PropType<(e: EditCanceledEvent) => void>;
    onEditCanceling: PropType<(e: EditCancelingEvent) => void>;
    onEditingStart: PropType<(e: EditingStartEvent) => void>;
    onFieldCaptionClick: PropType<(e: FieldCaptionClickEvent) => void>;
    onFieldCaptionDblClick: PropType<(e: FieldCaptionDblClickEvent) => void>;
    onFieldCaptionPrepared: PropType<(e: FieldCaptionPreparedEvent) => void>;
    onFieldValueClick: PropType<(e: FieldValueClickEvent) => void>;
    onFieldValueDblClick: PropType<(e: FieldValueDblClickEvent) => void>;
    onFieldValuePrepared: PropType<(e: FieldValuePreparedEvent) => void>;
    onFocusedCardChanged: PropType<(e: FocusedCardChanged) => void>;
    onInitialized: PropType<(e: {
        component: Component<any>;
        element: any;
    }) => void>;
    onInitNewCard: PropType<(e: InitNewCardEvent) => void>;
    onOptionChanged: PropType<(e: {
        component: DOMComponent;
        element: any;
        fullName: string;
        model: any;
        name: string;
        previousValue: any;
        value: any;
    }) => void>;
    onSelectionChanged: PropType<(e: SelectionChangedEvent) => void>;
    pager: PropType<Record<string, any> | PagerBase | Pager>;
    paging: PropType<Record<string, any> | Paging>;
    remoteOperations: PropType<boolean | Record<string, any> | "auto" | RemoteOperations>;
    rtlEnabled: BooleanConstructor;
    scrolling: PropType<Record<string, any>>;
    searchPanel: PropType<Record<string, any> | SearchPanel>;
    selectedCardKeys: PropType<any[]>;
    selection: PropType<Record<string, any> | SelectionConfiguration>;
    sorting: PropType<Record<string, any> | Sorting>;
    tabIndex: NumberConstructor;
    toolbar: PropType<Record<string, any> | DxCardViewTypes.Toolbar>;
    visible: BooleanConstructor;
    width: (NumberConstructor | StringConstructor)[];
    wordWrapEnabled: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:accessKey"?: ((...args: any[]) => any) | undefined;
    "onUpdate:activeStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dataSource"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:elementAttr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:focusStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hint"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoverStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:keyExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:noDataText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onContentReady"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDisposing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onInitialized"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onOptionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onSelectionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rtlEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:toolbar"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowColumnReordering"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cardContentTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cardCover"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cardFooterTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cardHeader"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cardMaxWidth"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cardMinWidth"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cardsPerRow"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cardTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:columnChooser"?: ((...args: any[]) => any) | undefined;
    "onUpdate:columns"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:errorRowEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:fieldHintEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:filterBuilder"?: ((...args: any[]) => any) | undefined;
    "onUpdate:filterBuilderPopup"?: ((...args: any[]) => any) | undefined;
    "onUpdate:filterPanel"?: ((...args: any[]) => any) | undefined;
    "onUpdate:filterValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:headerFilter"?: ((...args: any[]) => any) | undefined;
    "onUpdate:headerPanel"?: ((...args: any[]) => any) | undefined;
    "onUpdate:loadPanel"?: ((...args: any[]) => any) | undefined;
    "onUpdate:noDataTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onCardClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onCardDblClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onCardHoverChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onCardInserted"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onCardInserting"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onCardPrepared"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onCardRemoved"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onCardRemoving"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onCardSaved"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onCardSaving"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onCardUpdated"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onCardUpdating"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onContextMenuPreparing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDataErrorOccurred"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onEditCanceled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onEditCanceling"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onEditingStart"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onFieldCaptionClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onFieldCaptionDblClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onFieldCaptionPrepared"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onFieldValueClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onFieldValueDblClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onFieldValuePrepared"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onFocusedCardChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onInitNewCard"?: ((...args: any[]) => any) | undefined;
    "onUpdate:pager"?: ((...args: any[]) => any) | undefined;
    "onUpdate:paging"?: ((...args: any[]) => any) | undefined;
    "onUpdate:remoteOperations"?: ((...args: any[]) => any) | undefined;
    "onUpdate:scrolling"?: ((...args: any[]) => any) | undefined;
    "onUpdate:searchPanel"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectedCardKeys"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selection"?: ((...args: any[]) => any) | undefined;
    "onUpdate:sorting"?: ((...args: any[]) => any) | undefined;
    "onUpdate:wordWrapEnabled"?: ((...args: any[]) => any) | undefined;
}, {
    activeStateEnabled: boolean;
    disabled: boolean;
    focusStateEnabled: boolean;
    hoverStateEnabled: boolean;
    rtlEnabled: boolean;
    visible: boolean;
    allowColumnReordering: boolean;
    errorRowEnabled: boolean;
    fieldHintEnabled: boolean;
    wordWrapEnabled: boolean;
}>;
declare const DxAnimation: import("@vue/runtime-core").DefineComponent<{
    hide: PropType<string | number | Record<string, any> | AnimationConfig>;
    show: PropType<string | number | Record<string, any> | AnimationConfig>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:hide": null;
    "update:show": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    hide: PropType<string | number | Record<string, any> | AnimationConfig>;
    show: PropType<string | number | Record<string, any> | AnimationConfig>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hide"?: ((...args: any[]) => any) | undefined;
    "onUpdate:show"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxAsyncRule: import("@vue/runtime-core").DefineComponent<{
    ignoreEmptyValue: BooleanConstructor;
    message: StringConstructor;
    reevaluate: BooleanConstructor;
    type: PropType<ValidationRuleType>;
    validationCallback: PropType<(options: {
        column: Record<string, any>;
        data: Record<string, any>;
        formItem: Record<string, any>;
        rule: Record<string, any>;
        validator: Record<string, any>;
        value: string | number;
    }) => any>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:ignoreEmptyValue": null;
    "update:message": null;
    "update:reevaluate": null;
    "update:type": null;
    "update:validationCallback": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    ignoreEmptyValue: BooleanConstructor;
    message: StringConstructor;
    reevaluate: BooleanConstructor;
    type: PropType<ValidationRuleType>;
    validationCallback: PropType<(options: {
        column: Record<string, any>;
        data: Record<string, any>;
        formItem: Record<string, any>;
        rule: Record<string, any>;
        validator: Record<string, any>;
        value: string | number;
    }) => any>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:ignoreEmptyValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:message"?: ((...args: any[]) => any) | undefined;
    "onUpdate:reevaluate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationCallback"?: ((...args: any[]) => any) | undefined;
}, {
    ignoreEmptyValue: boolean;
    reevaluate: boolean;
}>;
declare const DxAt: import("@vue/runtime-core").DefineComponent<{
    x: PropType<HorizontalAlignment>;
    y: PropType<VerticalAlignment>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:x": null;
    "update:y": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    x: PropType<HorizontalAlignment>;
    y: PropType<VerticalAlignment>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:x"?: ((...args: any[]) => any) | undefined;
    "onUpdate:y"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxBoundaryOffset: import("@vue/runtime-core").DefineComponent<{
    x: NumberConstructor;
    y: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:x": null;
    "update:y": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    x: NumberConstructor;
    y: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:x"?: ((...args: any[]) => any) | undefined;
    "onUpdate:y"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxButtonItem: import("@vue/runtime-core").DefineComponent<{
    buttonOptions: PropType<Record<string, any> | dxButtonOptions>;
    colSpan: NumberConstructor;
    cssClass: StringConstructor;
    horizontalAlignment: PropType<HorizontalAlignment>;
    itemType: PropType<FormItemType>;
    name: StringConstructor;
    verticalAlignment: PropType<VerticalAlignment>;
    visible: BooleanConstructor;
    visibleIndex: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:buttonOptions": null;
    "update:colSpan": null;
    "update:cssClass": null;
    "update:horizontalAlignment": null;
    "update:itemType": null;
    "update:name": null;
    "update:verticalAlignment": null;
    "update:visible": null;
    "update:visibleIndex": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    buttonOptions: PropType<Record<string, any> | dxButtonOptions>;
    colSpan: NumberConstructor;
    cssClass: StringConstructor;
    horizontalAlignment: PropType<HorizontalAlignment>;
    itemType: PropType<FormItemType>;
    name: StringConstructor;
    verticalAlignment: PropType<VerticalAlignment>;
    visible: BooleanConstructor;
    visibleIndex: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cssClass"?: ((...args: any[]) => any) | undefined;
    "onUpdate:horizontalAlignment"?: ((...args: any[]) => any) | undefined;
    "onUpdate:verticalAlignment"?: ((...args: any[]) => any) | undefined;
    "onUpdate:buttonOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:colSpan"?: ((...args: any[]) => any) | undefined;
    "onUpdate:itemType"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visibleIndex"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
}>;
declare const DxButtonOptions: import("@vue/runtime-core").DefineComponent<{
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    bindingOptions: PropType<Record<string, any>>;
    disabled: BooleanConstructor;
    elementAttr: PropType<Record<string, any>>;
    focusStateEnabled: BooleanConstructor;
    height: (NumberConstructor | StringConstructor)[];
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    icon: StringConstructor;
    onClick: PropType<(e: ClickEvent) => void>;
    onContentReady: PropType<(e: ContentReadyEvent) => void>;
    onDisposing: PropType<(e: DisposingEvent) => void>;
    onInitialized: PropType<(e: InitializedEvent) => void>;
    onOptionChanged: PropType<(e: OptionChangedEvent) => void>;
    rtlEnabled: BooleanConstructor;
    stylingMode: PropType<ButtonStyle>;
    tabIndex: NumberConstructor;
    template: {};
    text: StringConstructor;
    type: PropType<string>;
    useSubmitBehavior: BooleanConstructor;
    validationGroup: StringConstructor;
    visible: BooleanConstructor;
    width: (NumberConstructor | StringConstructor)[];
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:accessKey": null;
    "update:activeStateEnabled": null;
    "update:bindingOptions": null;
    "update:disabled": null;
    "update:elementAttr": null;
    "update:focusStateEnabled": null;
    "update:height": null;
    "update:hint": null;
    "update:hoverStateEnabled": null;
    "update:icon": null;
    "update:onClick": null;
    "update:onContentReady": null;
    "update:onDisposing": null;
    "update:onInitialized": null;
    "update:onOptionChanged": null;
    "update:rtlEnabled": null;
    "update:stylingMode": null;
    "update:tabIndex": null;
    "update:template": null;
    "update:text": null;
    "update:type": null;
    "update:useSubmitBehavior": null;
    "update:validationGroup": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    bindingOptions: PropType<Record<string, any>>;
    disabled: BooleanConstructor;
    elementAttr: PropType<Record<string, any>>;
    focusStateEnabled: BooleanConstructor;
    height: (NumberConstructor | StringConstructor)[];
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    icon: StringConstructor;
    onClick: PropType<(e: ClickEvent) => void>;
    onContentReady: PropType<(e: ContentReadyEvent) => void>;
    onDisposing: PropType<(e: DisposingEvent) => void>;
    onInitialized: PropType<(e: InitializedEvent) => void>;
    onOptionChanged: PropType<(e: OptionChangedEvent) => void>;
    rtlEnabled: BooleanConstructor;
    stylingMode: PropType<ButtonStyle>;
    tabIndex: NumberConstructor;
    template: {};
    text: StringConstructor;
    type: PropType<string>;
    useSubmitBehavior: BooleanConstructor;
    validationGroup: StringConstructor;
    visible: BooleanConstructor;
    width: (NumberConstructor | StringConstructor)[];
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:accessKey"?: ((...args: any[]) => any) | undefined;
    "onUpdate:activeStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:elementAttr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:focusStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hint"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoverStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onContentReady"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDisposing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onInitialized"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onOptionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rtlEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:icon"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:stylingMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:bindingOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:useSubmitBehavior"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationGroup"?: ((...args: any[]) => any) | undefined;
}, {
    activeStateEnabled: boolean;
    disabled: boolean;
    focusStateEnabled: boolean;
    hoverStateEnabled: boolean;
    rtlEnabled: boolean;
    visible: boolean;
    useSubmitBehavior: boolean;
}>;
declare const DxCardCover: import("@vue/runtime-core").DefineComponent<{
    altExpr: PropType<string | ((data: any) => string)>;
    aspectRatio: StringConstructor;
    imageExpr: PropType<string | ((data: any) => string)>;
    maxHeight: NumberConstructor;
    template: {};
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:altExpr": null;
    "update:aspectRatio": null;
    "update:imageExpr": null;
    "update:maxHeight": null;
    "update:template": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    altExpr: PropType<string | ((data: any) => string)>;
    aspectRatio: StringConstructor;
    imageExpr: PropType<string | ((data: any) => string)>;
    maxHeight: NumberConstructor;
    template: {};
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:maxHeight"?: ((...args: any[]) => any) | undefined;
    "onUpdate:altExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:aspectRatio"?: ((...args: any[]) => any) | undefined;
    "onUpdate:imageExpr"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxCardHeader: import("@vue/runtime-core").DefineComponent<{
    items: PropType<(CardHeaderItem | CardHeaderPredefinedItem)[]>;
    template: {};
    visible: BooleanConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:items": null;
    "update:template": null;
    "update:visible": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    items: PropType<(CardHeaderItem | CardHeaderPredefinedItem)[]>;
    template: {};
    visible: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:items"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
}>;
declare const DxCardHeaderItem: import("@vue/runtime-core").DefineComponent<{
    cssClass: StringConstructor;
    disabled: BooleanConstructor;
    html: StringConstructor;
    locateInMenu: PropType<LocateInMenuMode>;
    location: PropType<ToolbarItemLocation>;
    menuItemTemplate: {};
    name: PropType<string>;
    options: {};
    showText: PropType<ShowTextMode>;
    template: {};
    text: StringConstructor;
    visible: BooleanConstructor;
    widget: PropType<ToolbarItemComponent>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:cssClass": null;
    "update:disabled": null;
    "update:html": null;
    "update:locateInMenu": null;
    "update:location": null;
    "update:menuItemTemplate": null;
    "update:name": null;
    "update:options": null;
    "update:showText": null;
    "update:template": null;
    "update:text": null;
    "update:visible": null;
    "update:widget": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    cssClass: StringConstructor;
    disabled: BooleanConstructor;
    html: StringConstructor;
    locateInMenu: PropType<LocateInMenuMode>;
    location: PropType<ToolbarItemLocation>;
    menuItemTemplate: {};
    name: PropType<string>;
    options: {};
    showText: PropType<ShowTextMode>;
    template: {};
    text: StringConstructor;
    visible: BooleanConstructor;
    widget: PropType<ToolbarItemComponent>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:html"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:location"?: ((...args: any[]) => any) | undefined;
    "onUpdate:options"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cssClass"?: ((...args: any[]) => any) | undefined;
    "onUpdate:locateInMenu"?: ((...args: any[]) => any) | undefined;
    "onUpdate:menuItemTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:widget"?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    visible: boolean;
}>;
declare const DxCardViewHeaderFilter: import("@vue/runtime-core").DefineComponent<{
    allowSearch: BooleanConstructor;
    allowSelectAll: BooleanConstructor;
    height: (NumberConstructor | StringConstructor)[];
    search: PropType<Record<string, any> | HeaderFilterSearchConfig>;
    searchTimeout: NumberConstructor;
    texts: PropType<Record<string, any> | HeaderFilterTexts>;
    visible: BooleanConstructor;
    width: (NumberConstructor | StringConstructor)[];
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:allowSearch": null;
    "update:allowSelectAll": null;
    "update:height": null;
    "update:search": null;
    "update:searchTimeout": null;
    "update:texts": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    allowSearch: BooleanConstructor;
    allowSelectAll: BooleanConstructor;
    height: (NumberConstructor | StringConstructor)[];
    search: PropType<Record<string, any> | HeaderFilterSearchConfig>;
    searchTimeout: NumberConstructor;
    texts: PropType<Record<string, any> | HeaderFilterTexts>;
    visible: BooleanConstructor;
    width: (NumberConstructor | StringConstructor)[];
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:searchTimeout"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowSearch"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowSelectAll"?: ((...args: any[]) => any) | undefined;
    "onUpdate:search"?: ((...args: any[]) => any) | undefined;
    "onUpdate:texts"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
    allowSearch: boolean;
    allowSelectAll: boolean;
}>;
declare const DxCardViewHeaderFilterSearch: import("@vue/runtime-core").DefineComponent<{
    editorOptions: {};
    enabled: BooleanConstructor;
    mode: PropType<SearchMode>;
    timeout: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:editorOptions": null;
    "update:enabled": null;
    "update:mode": null;
    "update:timeout": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    editorOptions: {};
    enabled: BooleanConstructor;
    mode: PropType<SearchMode>;
    timeout: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:enabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editorOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:mode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:timeout"?: ((...args: any[]) => any) | undefined;
}, {
    enabled: boolean;
}>;
declare const DxCardViewHeaderFilterTexts: import("@vue/runtime-core").DefineComponent<{
    cancel: StringConstructor;
    emptyValue: StringConstructor;
    ok: StringConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:cancel": null;
    "update:emptyValue": null;
    "update:ok": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    cancel: StringConstructor;
    emptyValue: StringConstructor;
    ok: StringConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cancel"?: ((...args: any[]) => any) | undefined;
    "onUpdate:emptyValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:ok"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxCardViewSelection: import("@vue/runtime-core").DefineComponent<{
    allowSelectAll: BooleanConstructor;
    mode: PropType<SingleMultipleOrNone>;
    selectAllMode: PropType<SelectAllMode>;
    showCheckBoxesMode: PropType<SelectionColumnDisplayMode>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:allowSelectAll": null;
    "update:mode": null;
    "update:selectAllMode": null;
    "update:showCheckBoxesMode": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    allowSelectAll: BooleanConstructor;
    mode: PropType<SingleMultipleOrNone>;
    selectAllMode: PropType<SelectAllMode>;
    showCheckBoxesMode: PropType<SelectionColumnDisplayMode>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowSelectAll"?: ((...args: any[]) => any) | undefined;
    "onUpdate:mode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectAllMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showCheckBoxesMode"?: ((...args: any[]) => any) | undefined;
}, {
    allowSelectAll: boolean;
}>;
declare const DxChange: import("@vue/runtime-core").DefineComponent<{
    data: {};
    insertAfterKey: {};
    insertBeforeKey: {};
    type: PropType<DataChangeType>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:data": null;
    "update:insertAfterKey": null;
    "update:insertBeforeKey": null;
    "update:type": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    data: {};
    insertAfterKey: {};
    insertBeforeKey: {};
    type: PropType<DataChangeType>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:data"?: ((...args: any[]) => any) | undefined;
    "onUpdate:insertAfterKey"?: ((...args: any[]) => any) | undefined;
    "onUpdate:insertBeforeKey"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxColCountByScreen: import("@vue/runtime-core").DefineComponent<{
    lg: NumberConstructor;
    md: NumberConstructor;
    sm: NumberConstructor;
    xs: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:lg": null;
    "update:md": null;
    "update:sm": null;
    "update:xs": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    lg: NumberConstructor;
    md: NumberConstructor;
    sm: NumberConstructor;
    xs: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:lg"?: ((...args: any[]) => any) | undefined;
    "onUpdate:md"?: ((...args: any[]) => any) | undefined;
    "onUpdate:sm"?: ((...args: any[]) => any) | undefined;
    "onUpdate:xs"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxCollision: import("@vue/runtime-core").DefineComponent<{
    x: PropType<CollisionResolution>;
    y: PropType<CollisionResolution>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:x": null;
    "update:y": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    x: PropType<CollisionResolution>;
    y: PropType<CollisionResolution>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:x"?: ((...args: any[]) => any) | undefined;
    "onUpdate:y"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxColumn: import("@vue/runtime-core").DefineComponent<{
    alignment: PropType<HorizontalAlignment>;
    allowEditing: BooleanConstructor;
    allowFiltering: BooleanConstructor;
    allowHeaderFiltering: BooleanConstructor;
    allowHiding: BooleanConstructor;
    allowReordering: BooleanConstructor;
    allowSearch: BooleanConstructor;
    allowSorting: BooleanConstructor;
    calculateDisplayValue: PropType<(cardData: any) => any>;
    calculateFieldValue: PropType<(cardData: any) => any>;
    calculateFilterExpression: PropType<(filterValue: any, selectedFilterOperation: string | null, target: string) => string | Array<any> | (() => void)>;
    calculateSortValue: PropType<string | ((cardData: any) => any)>;
    caption: StringConstructor;
    customizeText: PropType<(fieldInfo: {
        groupInterval: string | number;
        target: string;
        value: any;
        valueText: string;
    }) => string>;
    dataField: StringConstructor;
    dataType: PropType<DataType>;
    editorOptions: {};
    falseText: StringConstructor;
    fieldCaptionTemplate: {};
    fieldTemplate: {};
    fieldValueTemplate: {};
    filterType: PropType<FilterType>;
    filterValue: {};
    filterValues: PropType<any[]>;
    format: PropType<string | Record<string, any> | import("devextreme/artifacts/npm/devextreme/common/core/localization").FormatObject | ((value: number | Date) => string) | ((value: Date) => string) | ((value: number) => string) | Intl.DateTimeFormatOptions | Intl.NumberFormatOptions | ((value: number | Date) => string) | undefined>;
    formItem: PropType<Record<string, any> | dxFormSimpleItem>;
    headerFilter: PropType<Record<string, any> | ColumnHeaderFilter>;
    headerItemCssClass: StringConstructor;
    headerItemTemplate: {};
    name: StringConstructor;
    setFieldValue: PropType<(newData: any, value: any, currentCardData: any) => any>;
    showInColumnChooser: BooleanConstructor;
    sortIndex: NumberConstructor;
    sortingMethod: PropType<(value1: any, value2: any) => number>;
    sortOrder: PropType<SortOrder>;
    trueText: StringConstructor;
    validationRules: PropType<CommonTypes.ValidationRule[]>;
    visible: BooleanConstructor;
    visibleIndex: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:alignment": null;
    "update:allowEditing": null;
    "update:allowFiltering": null;
    "update:allowHeaderFiltering": null;
    "update:allowHiding": null;
    "update:allowReordering": null;
    "update:allowSearch": null;
    "update:allowSorting": null;
    "update:calculateDisplayValue": null;
    "update:calculateFieldValue": null;
    "update:calculateFilterExpression": null;
    "update:calculateSortValue": null;
    "update:caption": null;
    "update:customizeText": null;
    "update:dataField": null;
    "update:dataType": null;
    "update:editorOptions": null;
    "update:falseText": null;
    "update:fieldCaptionTemplate": null;
    "update:fieldTemplate": null;
    "update:fieldValueTemplate": null;
    "update:filterType": null;
    "update:filterValue": null;
    "update:filterValues": null;
    "update:format": null;
    "update:formItem": null;
    "update:headerFilter": null;
    "update:headerItemCssClass": null;
    "update:headerItemTemplate": null;
    "update:name": null;
    "update:setFieldValue": null;
    "update:showInColumnChooser": null;
    "update:sortIndex": null;
    "update:sortingMethod": null;
    "update:sortOrder": null;
    "update:trueText": null;
    "update:validationRules": null;
    "update:visible": null;
    "update:visibleIndex": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    alignment: PropType<HorizontalAlignment>;
    allowEditing: BooleanConstructor;
    allowFiltering: BooleanConstructor;
    allowHeaderFiltering: BooleanConstructor;
    allowHiding: BooleanConstructor;
    allowReordering: BooleanConstructor;
    allowSearch: BooleanConstructor;
    allowSorting: BooleanConstructor;
    calculateDisplayValue: PropType<(cardData: any) => any>;
    calculateFieldValue: PropType<(cardData: any) => any>;
    calculateFilterExpression: PropType<(filterValue: any, selectedFilterOperation: string | null, target: string) => string | Array<any> | (() => void)>;
    calculateSortValue: PropType<string | ((cardData: any) => any)>;
    caption: StringConstructor;
    customizeText: PropType<(fieldInfo: {
        groupInterval: string | number;
        target: string;
        value: any;
        valueText: string;
    }) => string>;
    dataField: StringConstructor;
    dataType: PropType<DataType>;
    editorOptions: {};
    falseText: StringConstructor;
    fieldCaptionTemplate: {};
    fieldTemplate: {};
    fieldValueTemplate: {};
    filterType: PropType<FilterType>;
    filterValue: {};
    filterValues: PropType<any[]>;
    format: PropType<string | Record<string, any> | import("devextreme/artifacts/npm/devextreme/common/core/localization").FormatObject | ((value: number | Date) => string) | ((value: Date) => string) | ((value: number) => string) | Intl.DateTimeFormatOptions | Intl.NumberFormatOptions | ((value: number | Date) => string) | undefined>;
    formItem: PropType<Record<string, any> | dxFormSimpleItem>;
    headerFilter: PropType<Record<string, any> | ColumnHeaderFilter>;
    headerItemCssClass: StringConstructor;
    headerItemTemplate: {};
    name: StringConstructor;
    setFieldValue: PropType<(newData: any, value: any, currentCardData: any) => any>;
    showInColumnChooser: BooleanConstructor;
    sortIndex: NumberConstructor;
    sortingMethod: PropType<(value1: any, value2: any) => number>;
    sortOrder: PropType<SortOrder>;
    trueText: StringConstructor;
    validationRules: PropType<CommonTypes.ValidationRule[]>;
    visible: BooleanConstructor;
    visibleIndex: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:customizeText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:format"?: ((...args: any[]) => any) | undefined;
    "onUpdate:filterValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:headerFilter"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visibleIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowSearch"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editorOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:alignment"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowEditing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowFiltering"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowHeaderFiltering"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowHiding"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowReordering"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowSorting"?: ((...args: any[]) => any) | undefined;
    "onUpdate:calculateDisplayValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:calculateFieldValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:calculateFilterExpression"?: ((...args: any[]) => any) | undefined;
    "onUpdate:calculateSortValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:caption"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dataField"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dataType"?: ((...args: any[]) => any) | undefined;
    "onUpdate:falseText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:fieldCaptionTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:fieldTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:fieldValueTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:filterType"?: ((...args: any[]) => any) | undefined;
    "onUpdate:filterValues"?: ((...args: any[]) => any) | undefined;
    "onUpdate:formItem"?: ((...args: any[]) => any) | undefined;
    "onUpdate:headerItemCssClass"?: ((...args: any[]) => any) | undefined;
    "onUpdate:headerItemTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:setFieldValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showInColumnChooser"?: ((...args: any[]) => any) | undefined;
    "onUpdate:sortIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:sortingMethod"?: ((...args: any[]) => any) | undefined;
    "onUpdate:sortOrder"?: ((...args: any[]) => any) | undefined;
    "onUpdate:trueText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationRules"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
    allowSearch: boolean;
    allowEditing: boolean;
    allowFiltering: boolean;
    allowHeaderFiltering: boolean;
    allowHiding: boolean;
    allowReordering: boolean;
    allowSorting: boolean;
    showInColumnChooser: boolean;
}>;
declare const DxColumnChooser: import("@vue/runtime-core").DefineComponent<{
    allowSearch: BooleanConstructor;
    container: {};
    emptyPanelText: StringConstructor;
    enabled: BooleanConstructor;
    height: (NumberConstructor | StringConstructor)[];
    mode: PropType<ColumnChooserMode>;
    position: PropType<Record<string, any> | PositionConfig>;
    search: PropType<Record<string, any> | ColumnChooserSearchConfig>;
    searchTimeout: NumberConstructor;
    selection: PropType<Record<string, any> | ColumnChooserSelectionConfig>;
    sortOrder: PropType<SortOrder>;
    title: StringConstructor;
    width: (NumberConstructor | StringConstructor)[];
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:allowSearch": null;
    "update:container": null;
    "update:emptyPanelText": null;
    "update:enabled": null;
    "update:height": null;
    "update:mode": null;
    "update:position": null;
    "update:search": null;
    "update:searchTimeout": null;
    "update:selection": null;
    "update:sortOrder": null;
    "update:title": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    allowSearch: BooleanConstructor;
    container: {};
    emptyPanelText: StringConstructor;
    enabled: BooleanConstructor;
    height: (NumberConstructor | StringConstructor)[];
    mode: PropType<ColumnChooserMode>;
    position: PropType<Record<string, any> | PositionConfig>;
    search: PropType<Record<string, any> | ColumnChooserSearchConfig>;
    searchTimeout: NumberConstructor;
    selection: PropType<Record<string, any> | ColumnChooserSelectionConfig>;
    sortOrder: PropType<SortOrder>;
    title: StringConstructor;
    width: (NumberConstructor | StringConstructor)[];
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:title"?: ((...args: any[]) => any) | undefined;
    "onUpdate:searchTimeout"?: ((...args: any[]) => any) | undefined;
    "onUpdate:container"?: ((...args: any[]) => any) | undefined;
    "onUpdate:position"?: ((...args: any[]) => any) | undefined;
    "onUpdate:enabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selection"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowSearch"?: ((...args: any[]) => any) | undefined;
    "onUpdate:search"?: ((...args: any[]) => any) | undefined;
    "onUpdate:mode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:sortOrder"?: ((...args: any[]) => any) | undefined;
    "onUpdate:emptyPanelText"?: ((...args: any[]) => any) | undefined;
}, {
    enabled: boolean;
    allowSearch: boolean;
}>;
declare const DxColumnChooserSearch: import("@vue/runtime-core").DefineComponent<{
    editorOptions: {};
    enabled: BooleanConstructor;
    timeout: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:editorOptions": null;
    "update:enabled": null;
    "update:timeout": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    editorOptions: {};
    enabled: BooleanConstructor;
    timeout: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:enabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editorOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:timeout"?: ((...args: any[]) => any) | undefined;
}, {
    enabled: boolean;
}>;
declare const DxColumnChooserSelection: import("@vue/runtime-core").DefineComponent<{
    allowSelectAll: BooleanConstructor;
    recursive: BooleanConstructor;
    selectByClick: BooleanConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:allowSelectAll": null;
    "update:recursive": null;
    "update:selectByClick": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    allowSelectAll: BooleanConstructor;
    recursive: BooleanConstructor;
    selectByClick: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowSelectAll"?: ((...args: any[]) => any) | undefined;
    "onUpdate:recursive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectByClick"?: ((...args: any[]) => any) | undefined;
}, {
    allowSelectAll: boolean;
    recursive: boolean;
    selectByClick: boolean;
}>;
declare const DxColumnHeaderFilter: import("@vue/runtime-core").DefineComponent<{
    allowSearch: BooleanConstructor;
    allowSelectAll: BooleanConstructor;
    dataSource: PropType<any[] | Record<string, any> | DataSourceOptions<any, any, any, any> | Store<any, any> | ((options: {
        component: Record<string, any>;
        dataSource: DataSourceOptions | null;
    }) => void) | null>;
    groupInterval: PropType<number | HeaderFilterGroupInterval>;
    height: (NumberConstructor | StringConstructor)[];
    search: PropType<Record<string, any> | HeaderFilterSearchConfig | ColumnHeaderFilterSearchConfig>;
    searchMode: PropType<SearchMode>;
    width: (NumberConstructor | StringConstructor)[];
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:allowSearch": null;
    "update:allowSelectAll": null;
    "update:dataSource": null;
    "update:groupInterval": null;
    "update:height": null;
    "update:search": null;
    "update:searchMode": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    allowSearch: BooleanConstructor;
    allowSelectAll: BooleanConstructor;
    dataSource: PropType<any[] | Record<string, any> | DataSourceOptions<any, any, any, any> | Store<any, any> | ((options: {
        component: Record<string, any>;
        dataSource: DataSourceOptions | null;
    }) => void) | null>;
    groupInterval: PropType<number | HeaderFilterGroupInterval>;
    height: (NumberConstructor | StringConstructor)[];
    search: PropType<Record<string, any> | HeaderFilterSearchConfig | ColumnHeaderFilterSearchConfig>;
    searchMode: PropType<SearchMode>;
    width: (NumberConstructor | StringConstructor)[];
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dataSource"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:searchMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowSearch"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowSelectAll"?: ((...args: any[]) => any) | undefined;
    "onUpdate:search"?: ((...args: any[]) => any) | undefined;
    "onUpdate:groupInterval"?: ((...args: any[]) => any) | undefined;
}, {
    allowSearch: boolean;
    allowSelectAll: boolean;
}>;
declare const DxColumnHeaderFilterSearch: import("@vue/runtime-core").DefineComponent<{
    editorOptions: {};
    enabled: BooleanConstructor;
    mode: PropType<SearchMode>;
    searchExpr: PropType<string | (string | (() => any))[] | (() => any)>;
    timeout: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:editorOptions": null;
    "update:enabled": null;
    "update:mode": null;
    "update:searchExpr": null;
    "update:timeout": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    editorOptions: {};
    enabled: BooleanConstructor;
    mode: PropType<SearchMode>;
    searchExpr: PropType<string | (string | (() => any))[] | (() => any)>;
    timeout: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:searchExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:enabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editorOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:mode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:timeout"?: ((...args: any[]) => any) | undefined;
}, {
    enabled: boolean;
}>;
declare const DxCompareRule: import("@vue/runtime-core").DefineComponent<{
    comparisonTarget: PropType<() => any>;
    comparisonType: PropType<ComparisonOperator>;
    ignoreEmptyValue: BooleanConstructor;
    message: StringConstructor;
    type: PropType<ValidationRuleType>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:comparisonTarget": null;
    "update:comparisonType": null;
    "update:ignoreEmptyValue": null;
    "update:message": null;
    "update:type": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    comparisonTarget: PropType<() => any>;
    comparisonType: PropType<ComparisonOperator>;
    ignoreEmptyValue: BooleanConstructor;
    message: StringConstructor;
    type: PropType<ValidationRuleType>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:ignoreEmptyValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:message"?: ((...args: any[]) => any) | undefined;
    "onUpdate:comparisonTarget"?: ((...args: any[]) => any) | undefined;
    "onUpdate:comparisonType"?: ((...args: any[]) => any) | undefined;
}, {
    ignoreEmptyValue: boolean;
}>;
declare const DxCustomOperation: import("@vue/runtime-core").DefineComponent<{
    calculateFilterExpression: PropType<(filterValue: any, field: dxFilterBuilderField) => string | (() => any) | Array<any>>;
    caption: StringConstructor;
    customizeText: PropType<(fieldInfo: FieldInfo) => string>;
    dataTypes: PropType<DataType[]>;
    editorTemplate: {};
    hasValue: BooleanConstructor;
    icon: StringConstructor;
    name: StringConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:calculateFilterExpression": null;
    "update:caption": null;
    "update:customizeText": null;
    "update:dataTypes": null;
    "update:editorTemplate": null;
    "update:hasValue": null;
    "update:icon": null;
    "update:name": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    calculateFilterExpression: PropType<(filterValue: any, field: dxFilterBuilderField) => string | (() => any) | Array<any>>;
    caption: StringConstructor;
    customizeText: PropType<(fieldInfo: FieldInfo) => string>;
    dataTypes: PropType<DataType[]>;
    editorTemplate: {};
    hasValue: BooleanConstructor;
    icon: StringConstructor;
    name: StringConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:icon"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:customizeText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:calculateFilterExpression"?: ((...args: any[]) => any) | undefined;
    "onUpdate:caption"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dataTypes"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editorTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hasValue"?: ((...args: any[]) => any) | undefined;
}, {
    hasValue: boolean;
}>;
declare const DxCustomRule: import("@vue/runtime-core").DefineComponent<{
    ignoreEmptyValue: BooleanConstructor;
    message: StringConstructor;
    reevaluate: BooleanConstructor;
    type: PropType<ValidationRuleType>;
    validationCallback: PropType<(options: {
        column: Record<string, any>;
        data: Record<string, any>;
        formItem: Record<string, any>;
        rule: Record<string, any>;
        validator: Record<string, any>;
        value: string | number;
    }) => boolean>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:ignoreEmptyValue": null;
    "update:message": null;
    "update:reevaluate": null;
    "update:type": null;
    "update:validationCallback": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    ignoreEmptyValue: BooleanConstructor;
    message: StringConstructor;
    reevaluate: BooleanConstructor;
    type: PropType<ValidationRuleType>;
    validationCallback: PropType<(options: {
        column: Record<string, any>;
        data: Record<string, any>;
        formItem: Record<string, any>;
        rule: Record<string, any>;
        validator: Record<string, any>;
        value: string | number;
    }) => boolean>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:ignoreEmptyValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:message"?: ((...args: any[]) => any) | undefined;
    "onUpdate:reevaluate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationCallback"?: ((...args: any[]) => any) | undefined;
}, {
    ignoreEmptyValue: boolean;
    reevaluate: boolean;
}>;
declare const DxDragging: import("@vue/runtime-core").DefineComponent<{
    dropFeedbackMode: PropType<DragHighlight>;
    onDragChange: PropType<(e: any) => void>;
    onDragEnd: PropType<(e: any) => void>;
    onDragMove: PropType<(e: any) => void>;
    onDragStart: PropType<(e: any) => void>;
    onRemove: PropType<(e: any) => void>;
    onReorder: PropType<(e: any) => void>;
    scrollSensitivity: NumberConstructor;
    scrollSpeed: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:dropFeedbackMode": null;
    "update:onDragChange": null;
    "update:onDragEnd": null;
    "update:onDragMove": null;
    "update:onDragStart": null;
    "update:onRemove": null;
    "update:onReorder": null;
    "update:scrollSensitivity": null;
    "update:scrollSpeed": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    dropFeedbackMode: PropType<DragHighlight>;
    onDragChange: PropType<(e: any) => void>;
    onDragEnd: PropType<(e: any) => void>;
    onDragMove: PropType<(e: any) => void>;
    onDragStart: PropType<(e: any) => void>;
    onRemove: PropType<(e: any) => void>;
    onReorder: PropType<(e: any) => void>;
    scrollSensitivity: NumberConstructor;
    scrollSpeed: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dropFeedbackMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDragChange"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDragEnd"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDragMove"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDragStart"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onRemove"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onReorder"?: ((...args: any[]) => any) | undefined;
    "onUpdate:scrollSensitivity"?: ((...args: any[]) => any) | undefined;
    "onUpdate:scrollSpeed"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxEditing: import("@vue/runtime-core").DefineComponent<{
    allowAdding: BooleanConstructor;
    allowDeleting: BooleanConstructor;
    allowUpdating: BooleanConstructor;
    changes: PropType<DataChange<any, any>[]>;
    confirmDelete: BooleanConstructor;
    editCardKey: {};
    form: PropType<Record<string, any> | dxFormOptions>;
    popup: PropType<Record<string, any>>;
    texts: PropType<Record<string, any> | EditingTexts>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:allowAdding": null;
    "update:allowDeleting": null;
    "update:allowUpdating": null;
    "update:changes": null;
    "update:confirmDelete": null;
    "update:editCardKey": null;
    "update:form": null;
    "update:popup": null;
    "update:texts": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    allowAdding: BooleanConstructor;
    allowDeleting: BooleanConstructor;
    allowUpdating: BooleanConstructor;
    changes: PropType<DataChange<any, any>[]>;
    confirmDelete: BooleanConstructor;
    editCardKey: {};
    form: PropType<Record<string, any> | dxFormOptions>;
    popup: PropType<Record<string, any>>;
    texts: PropType<Record<string, any> | EditingTexts>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:texts"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowAdding"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowDeleting"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowUpdating"?: ((...args: any[]) => any) | undefined;
    "onUpdate:changes"?: ((...args: any[]) => any) | undefined;
    "onUpdate:confirmDelete"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editCardKey"?: ((...args: any[]) => any) | undefined;
    "onUpdate:form"?: ((...args: any[]) => any) | undefined;
    "onUpdate:popup"?: ((...args: any[]) => any) | undefined;
}, {
    allowAdding: boolean;
    allowDeleting: boolean;
    allowUpdating: boolean;
    confirmDelete: boolean;
}>;
declare const DxEditingTexts: import("@vue/runtime-core").DefineComponent<{
    addCard: StringConstructor;
    confirmDeleteMessage: StringConstructor;
    confirmDeleteTitle: StringConstructor;
    deleteCard: StringConstructor;
    editCard: StringConstructor;
    saveCard: StringConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:addCard": null;
    "update:confirmDeleteMessage": null;
    "update:confirmDeleteTitle": null;
    "update:deleteCard": null;
    "update:editCard": null;
    "update:saveCard": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    addCard: StringConstructor;
    confirmDeleteMessage: StringConstructor;
    confirmDeleteTitle: StringConstructor;
    deleteCard: StringConstructor;
    editCard: StringConstructor;
    saveCard: StringConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:addCard"?: ((...args: any[]) => any) | undefined;
    "onUpdate:confirmDeleteMessage"?: ((...args: any[]) => any) | undefined;
    "onUpdate:confirmDeleteTitle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:deleteCard"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editCard"?: ((...args: any[]) => any) | undefined;
    "onUpdate:saveCard"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxEmailRule: import("@vue/runtime-core").DefineComponent<{
    ignoreEmptyValue: BooleanConstructor;
    message: StringConstructor;
    type: PropType<ValidationRuleType>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:ignoreEmptyValue": null;
    "update:message": null;
    "update:type": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    ignoreEmptyValue: BooleanConstructor;
    message: StringConstructor;
    type: PropType<ValidationRuleType>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:ignoreEmptyValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:message"?: ((...args: any[]) => any) | undefined;
}, {
    ignoreEmptyValue: boolean;
}>;
declare const DxEmptyItem: import("@vue/runtime-core").DefineComponent<{
    colSpan: NumberConstructor;
    cssClass: StringConstructor;
    itemType: PropType<FormItemType>;
    name: StringConstructor;
    visible: BooleanConstructor;
    visibleIndex: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:colSpan": null;
    "update:cssClass": null;
    "update:itemType": null;
    "update:name": null;
    "update:visible": null;
    "update:visibleIndex": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    colSpan: NumberConstructor;
    cssClass: StringConstructor;
    itemType: PropType<FormItemType>;
    name: StringConstructor;
    visible: BooleanConstructor;
    visibleIndex: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cssClass"?: ((...args: any[]) => any) | undefined;
    "onUpdate:colSpan"?: ((...args: any[]) => any) | undefined;
    "onUpdate:itemType"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visibleIndex"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
}>;
declare const DxField: import("@vue/runtime-core").DefineComponent<{
    calculateFilterExpression: PropType<(filterValue: any, selectedFilterOperation: string) => string | (() => any) | Array<any>>;
    caption: StringConstructor;
    customizeText: PropType<(fieldInfo: FieldInfo) => string>;
    dataField: StringConstructor;
    dataType: PropType<DataType>;
    editorOptions: {};
    editorTemplate: {};
    falseText: StringConstructor;
    filterOperations: PropType<string[]>;
    format: PropType<string | Record<string, any> | import("devextreme/artifacts/npm/devextreme/common/core/localization").FormatObject | ((value: number | Date) => string) | ((value: Date) => string) | ((value: number) => string) | Intl.DateTimeFormatOptions | Intl.NumberFormatOptions | ((value: number | Date) => string) | undefined>;
    lookup: PropType<Record<string, any>>;
    name: StringConstructor;
    trueText: StringConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:calculateFilterExpression": null;
    "update:caption": null;
    "update:customizeText": null;
    "update:dataField": null;
    "update:dataType": null;
    "update:editorOptions": null;
    "update:editorTemplate": null;
    "update:falseText": null;
    "update:filterOperations": null;
    "update:format": null;
    "update:lookup": null;
    "update:name": null;
    "update:trueText": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    calculateFilterExpression: PropType<(filterValue: any, selectedFilterOperation: string) => string | (() => any) | Array<any>>;
    caption: StringConstructor;
    customizeText: PropType<(fieldInfo: FieldInfo) => string>;
    dataField: StringConstructor;
    dataType: PropType<DataType>;
    editorOptions: {};
    editorTemplate: {};
    falseText: StringConstructor;
    filterOperations: PropType<string[]>;
    format: PropType<string | Record<string, any> | import("devextreme/artifacts/npm/devextreme/common/core/localization").FormatObject | ((value: number | Date) => string) | ((value: Date) => string) | ((value: number) => string) | Intl.DateTimeFormatOptions | Intl.NumberFormatOptions | ((value: number | Date) => string) | undefined>;
    lookup: PropType<Record<string, any>>;
    name: StringConstructor;
    trueText: StringConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:customizeText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:format"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editorOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:calculateFilterExpression"?: ((...args: any[]) => any) | undefined;
    "onUpdate:caption"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dataField"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dataType"?: ((...args: any[]) => any) | undefined;
    "onUpdate:falseText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:trueText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editorTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:filterOperations"?: ((...args: any[]) => any) | undefined;
    "onUpdate:lookup"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxFilterBuilder: import("@vue/runtime-core").DefineComponent<{
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    allowHierarchicalFields: BooleanConstructor;
    bindingOptions: PropType<Record<string, any>>;
    customOperations: PropType<dxFilterBuilderCustomOperation[]>;
    disabled: BooleanConstructor;
    elementAttr: PropType<Record<string, any>>;
    fields: PropType<dxFilterBuilderField[]>;
    filterOperationDescriptions: PropType<Record<string, any>>;
    focusStateEnabled: BooleanConstructor;
    groupOperationDescriptions: PropType<Record<string, any>>;
    groupOperations: PropType<GroupOperation[]>;
    height: (NumberConstructor | StringConstructor)[];
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    maxGroupLevel: NumberConstructor;
    onContentReady: PropType<(e: FilterBuilderContentReadyEvent) => void>;
    onDisposing: PropType<(e: FilterBuilderDisposingEvent) => void>;
    onEditorPrepared: PropType<(e: EditorPreparedEvent) => void>;
    onEditorPreparing: PropType<(e: EditorPreparingEvent) => void>;
    onInitialized: PropType<(e: FilterBuilderInitializedEvent) => void>;
    onOptionChanged: PropType<(e: FilterBuilderOptionChangedEvent) => void>;
    onValueChanged: PropType<(e: ValueChangedEvent) => void>;
    rtlEnabled: BooleanConstructor;
    tabIndex: NumberConstructor;
    value: PropType<string | any[] | (() => any)>;
    visible: BooleanConstructor;
    width: (NumberConstructor | StringConstructor)[];
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:accessKey": null;
    "update:activeStateEnabled": null;
    "update:allowHierarchicalFields": null;
    "update:bindingOptions": null;
    "update:customOperations": null;
    "update:disabled": null;
    "update:elementAttr": null;
    "update:fields": null;
    "update:filterOperationDescriptions": null;
    "update:focusStateEnabled": null;
    "update:groupOperationDescriptions": null;
    "update:groupOperations": null;
    "update:height": null;
    "update:hint": null;
    "update:hoverStateEnabled": null;
    "update:maxGroupLevel": null;
    "update:onContentReady": null;
    "update:onDisposing": null;
    "update:onEditorPrepared": null;
    "update:onEditorPreparing": null;
    "update:onInitialized": null;
    "update:onOptionChanged": null;
    "update:onValueChanged": null;
    "update:rtlEnabled": null;
    "update:tabIndex": null;
    "update:value": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    allowHierarchicalFields: BooleanConstructor;
    bindingOptions: PropType<Record<string, any>>;
    customOperations: PropType<dxFilterBuilderCustomOperation[]>;
    disabled: BooleanConstructor;
    elementAttr: PropType<Record<string, any>>;
    fields: PropType<dxFilterBuilderField[]>;
    filterOperationDescriptions: PropType<Record<string, any>>;
    focusStateEnabled: BooleanConstructor;
    groupOperationDescriptions: PropType<Record<string, any>>;
    groupOperations: PropType<GroupOperation[]>;
    height: (NumberConstructor | StringConstructor)[];
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    maxGroupLevel: NumberConstructor;
    onContentReady: PropType<(e: FilterBuilderContentReadyEvent) => void>;
    onDisposing: PropType<(e: FilterBuilderDisposingEvent) => void>;
    onEditorPrepared: PropType<(e: EditorPreparedEvent) => void>;
    onEditorPreparing: PropType<(e: EditorPreparingEvent) => void>;
    onInitialized: PropType<(e: FilterBuilderInitializedEvent) => void>;
    onOptionChanged: PropType<(e: FilterBuilderOptionChangedEvent) => void>;
    onValueChanged: PropType<(e: ValueChangedEvent) => void>;
    rtlEnabled: BooleanConstructor;
    tabIndex: NumberConstructor;
    value: PropType<string | any[] | (() => any)>;
    visible: BooleanConstructor;
    width: (NumberConstructor | StringConstructor)[];
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:accessKey"?: ((...args: any[]) => any) | undefined;
    "onUpdate:activeStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:elementAttr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:focusStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hint"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoverStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onContentReady"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDisposing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onInitialized"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onOptionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rtlEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:value"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onValueChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:bindingOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowHierarchicalFields"?: ((...args: any[]) => any) | undefined;
    "onUpdate:customOperations"?: ((...args: any[]) => any) | undefined;
    "onUpdate:fields"?: ((...args: any[]) => any) | undefined;
    "onUpdate:filterOperationDescriptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:groupOperationDescriptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:groupOperations"?: ((...args: any[]) => any) | undefined;
    "onUpdate:maxGroupLevel"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onEditorPrepared"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onEditorPreparing"?: ((...args: any[]) => any) | undefined;
}, {
    activeStateEnabled: boolean;
    disabled: boolean;
    focusStateEnabled: boolean;
    hoverStateEnabled: boolean;
    rtlEnabled: boolean;
    visible: boolean;
    allowHierarchicalFields: boolean;
}>;
declare const DxFilterOperationDescriptions: import("@vue/runtime-core").DefineComponent<{
    between: StringConstructor;
    contains: StringConstructor;
    endsWith: StringConstructor;
    equal: StringConstructor;
    greaterThan: StringConstructor;
    greaterThanOrEqual: StringConstructor;
    isBlank: StringConstructor;
    isNotBlank: StringConstructor;
    lessThan: StringConstructor;
    lessThanOrEqual: StringConstructor;
    notContains: StringConstructor;
    notEqual: StringConstructor;
    startsWith: StringConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:between": null;
    "update:contains": null;
    "update:endsWith": null;
    "update:equal": null;
    "update:greaterThan": null;
    "update:greaterThanOrEqual": null;
    "update:isBlank": null;
    "update:isNotBlank": null;
    "update:lessThan": null;
    "update:lessThanOrEqual": null;
    "update:notContains": null;
    "update:notEqual": null;
    "update:startsWith": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    between: StringConstructor;
    contains: StringConstructor;
    endsWith: StringConstructor;
    equal: StringConstructor;
    greaterThan: StringConstructor;
    greaterThanOrEqual: StringConstructor;
    isBlank: StringConstructor;
    isNotBlank: StringConstructor;
    lessThan: StringConstructor;
    lessThanOrEqual: StringConstructor;
    notContains: StringConstructor;
    notEqual: StringConstructor;
    startsWith: StringConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:between"?: ((...args: any[]) => any) | undefined;
    "onUpdate:contains"?: ((...args: any[]) => any) | undefined;
    "onUpdate:endsWith"?: ((...args: any[]) => any) | undefined;
    "onUpdate:equal"?: ((...args: any[]) => any) | undefined;
    "onUpdate:greaterThan"?: ((...args: any[]) => any) | undefined;
    "onUpdate:greaterThanOrEqual"?: ((...args: any[]) => any) | undefined;
    "onUpdate:isBlank"?: ((...args: any[]) => any) | undefined;
    "onUpdate:isNotBlank"?: ((...args: any[]) => any) | undefined;
    "onUpdate:lessThan"?: ((...args: any[]) => any) | undefined;
    "onUpdate:lessThanOrEqual"?: ((...args: any[]) => any) | undefined;
    "onUpdate:notContains"?: ((...args: any[]) => any) | undefined;
    "onUpdate:notEqual"?: ((...args: any[]) => any) | undefined;
    "onUpdate:startsWith"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxFilterPanel: import("@vue/runtime-core").DefineComponent<{
    customizeText: PropType<(e: {
        component: FilterPanel;
        filterValue: Record<string, any>;
        text: string;
    }) => string>;
    filterEnabled: BooleanConstructor;
    texts: PropType<Record<string, any> | FilterPanelTexts>;
    visible: BooleanConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:customizeText": null;
    "update:filterEnabled": null;
    "update:texts": null;
    "update:visible": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    customizeText: PropType<(e: {
        component: FilterPanel;
        filterValue: Record<string, any>;
        text: string;
    }) => string>;
    filterEnabled: BooleanConstructor;
    texts: PropType<Record<string, any> | FilterPanelTexts>;
    visible: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:customizeText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:texts"?: ((...args: any[]) => any) | undefined;
    "onUpdate:filterEnabled"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
    filterEnabled: boolean;
}>;
declare const DxFilterPanelTexts: import("@vue/runtime-core").DefineComponent<{
    clearFilter: StringConstructor;
    createFilter: StringConstructor;
    filterEnabledHint: StringConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:clearFilter": null;
    "update:createFilter": null;
    "update:filterEnabledHint": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    clearFilter: StringConstructor;
    createFilter: StringConstructor;
    filterEnabledHint: StringConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:clearFilter"?: ((...args: any[]) => any) | undefined;
    "onUpdate:createFilter"?: ((...args: any[]) => any) | undefined;
    "onUpdate:filterEnabledHint"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxForm: import("@vue/runtime-core").DefineComponent<{
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    alignItemLabels: BooleanConstructor;
    alignItemLabelsInAllGroups: BooleanConstructor;
    bindingOptions: PropType<Record<string, any>>;
    colCount: PropType<number | "auto">;
    colCountByScreen: PropType<Record<string, any>>;
    customizeItem: PropType<(item: dxFormSimpleItem | dxFormGroupItem | dxFormTabbedItem | dxFormEmptyItem | dxFormButtonItem) => void>;
    disabled: BooleanConstructor;
    elementAttr: PropType<Record<string, any>>;
    focusStateEnabled: BooleanConstructor;
    formData: {};
    height: (NumberConstructor | StringConstructor)[];
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    isDirty: BooleanConstructor;
    items: PropType<(dxFormSimpleItem | dxFormGroupItem | dxFormTabbedItem | dxFormEmptyItem | dxFormButtonItem)[]>;
    labelLocation: PropType<LabelLocation>;
    labelMode: PropType<FormLabelMode>;
    minColWidth: NumberConstructor;
    onContentReady: PropType<(e: FormContentReadyEvent) => void>;
    onDisposing: PropType<(e: FormDisposingEvent) => void>;
    onEditorEnterKey: PropType<(e: EditorEnterKeyEvent) => void>;
    onFieldDataChanged: PropType<(e: FieldDataChangedEvent) => void>;
    onInitialized: PropType<(e: FormInitializedEvent) => void>;
    onOptionChanged: PropType<(e: FormOptionChangedEvent) => void>;
    optionalMark: StringConstructor;
    readOnly: BooleanConstructor;
    requiredMark: StringConstructor;
    requiredMessage: StringConstructor;
    rtlEnabled: BooleanConstructor;
    screenByWidth: PropType<() => void>;
    scrollingEnabled: BooleanConstructor;
    showColonAfterLabel: BooleanConstructor;
    showOptionalMark: BooleanConstructor;
    showRequiredMark: BooleanConstructor;
    showValidationSummary: BooleanConstructor;
    tabIndex: NumberConstructor;
    validationGroup: StringConstructor;
    visible: BooleanConstructor;
    width: (NumberConstructor | StringConstructor)[];
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:accessKey": null;
    "update:activeStateEnabled": null;
    "update:alignItemLabels": null;
    "update:alignItemLabelsInAllGroups": null;
    "update:bindingOptions": null;
    "update:colCount": null;
    "update:colCountByScreen": null;
    "update:customizeItem": null;
    "update:disabled": null;
    "update:elementAttr": null;
    "update:focusStateEnabled": null;
    "update:formData": null;
    "update:height": null;
    "update:hint": null;
    "update:hoverStateEnabled": null;
    "update:isDirty": null;
    "update:items": null;
    "update:labelLocation": null;
    "update:labelMode": null;
    "update:minColWidth": null;
    "update:onContentReady": null;
    "update:onDisposing": null;
    "update:onEditorEnterKey": null;
    "update:onFieldDataChanged": null;
    "update:onInitialized": null;
    "update:onOptionChanged": null;
    "update:optionalMark": null;
    "update:readOnly": null;
    "update:requiredMark": null;
    "update:requiredMessage": null;
    "update:rtlEnabled": null;
    "update:screenByWidth": null;
    "update:scrollingEnabled": null;
    "update:showColonAfterLabel": null;
    "update:showOptionalMark": null;
    "update:showRequiredMark": null;
    "update:showValidationSummary": null;
    "update:tabIndex": null;
    "update:validationGroup": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    alignItemLabels: BooleanConstructor;
    alignItemLabelsInAllGroups: BooleanConstructor;
    bindingOptions: PropType<Record<string, any>>;
    colCount: PropType<number | "auto">;
    colCountByScreen: PropType<Record<string, any>>;
    customizeItem: PropType<(item: dxFormSimpleItem | dxFormGroupItem | dxFormTabbedItem | dxFormEmptyItem | dxFormButtonItem) => void>;
    disabled: BooleanConstructor;
    elementAttr: PropType<Record<string, any>>;
    focusStateEnabled: BooleanConstructor;
    formData: {};
    height: (NumberConstructor | StringConstructor)[];
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    isDirty: BooleanConstructor;
    items: PropType<(dxFormSimpleItem | dxFormGroupItem | dxFormTabbedItem | dxFormEmptyItem | dxFormButtonItem)[]>;
    labelLocation: PropType<LabelLocation>;
    labelMode: PropType<FormLabelMode>;
    minColWidth: NumberConstructor;
    onContentReady: PropType<(e: FormContentReadyEvent) => void>;
    onDisposing: PropType<(e: FormDisposingEvent) => void>;
    onEditorEnterKey: PropType<(e: EditorEnterKeyEvent) => void>;
    onFieldDataChanged: PropType<(e: FieldDataChangedEvent) => void>;
    onInitialized: PropType<(e: FormInitializedEvent) => void>;
    onOptionChanged: PropType<(e: FormOptionChangedEvent) => void>;
    optionalMark: StringConstructor;
    readOnly: BooleanConstructor;
    requiredMark: StringConstructor;
    requiredMessage: StringConstructor;
    rtlEnabled: BooleanConstructor;
    screenByWidth: PropType<() => void>;
    scrollingEnabled: BooleanConstructor;
    showColonAfterLabel: BooleanConstructor;
    showOptionalMark: BooleanConstructor;
    showRequiredMark: BooleanConstructor;
    showValidationSummary: BooleanConstructor;
    tabIndex: NumberConstructor;
    validationGroup: StringConstructor;
    visible: BooleanConstructor;
    width: (NumberConstructor | StringConstructor)[];
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:accessKey"?: ((...args: any[]) => any) | undefined;
    "onUpdate:activeStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:elementAttr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:focusStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hint"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoverStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:items"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onContentReady"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDisposing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onInitialized"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onOptionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rtlEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:isDirty"?: ((...args: any[]) => any) | undefined;
    "onUpdate:labelMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:readOnly"?: ((...args: any[]) => any) | undefined;
    "onUpdate:bindingOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationGroup"?: ((...args: any[]) => any) | undefined;
    "onUpdate:alignItemLabels"?: ((...args: any[]) => any) | undefined;
    "onUpdate:alignItemLabelsInAllGroups"?: ((...args: any[]) => any) | undefined;
    "onUpdate:colCount"?: ((...args: any[]) => any) | undefined;
    "onUpdate:colCountByScreen"?: ((...args: any[]) => any) | undefined;
    "onUpdate:customizeItem"?: ((...args: any[]) => any) | undefined;
    "onUpdate:formData"?: ((...args: any[]) => any) | undefined;
    "onUpdate:labelLocation"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minColWidth"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onEditorEnterKey"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onFieldDataChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:optionalMark"?: ((...args: any[]) => any) | undefined;
    "onUpdate:requiredMark"?: ((...args: any[]) => any) | undefined;
    "onUpdate:requiredMessage"?: ((...args: any[]) => any) | undefined;
    "onUpdate:screenByWidth"?: ((...args: any[]) => any) | undefined;
    "onUpdate:scrollingEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showColonAfterLabel"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showOptionalMark"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showRequiredMark"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showValidationSummary"?: ((...args: any[]) => any) | undefined;
}, {
    activeStateEnabled: boolean;
    disabled: boolean;
    focusStateEnabled: boolean;
    hoverStateEnabled: boolean;
    rtlEnabled: boolean;
    visible: boolean;
    isDirty: boolean;
    readOnly: boolean;
    alignItemLabels: boolean;
    alignItemLabelsInAllGroups: boolean;
    scrollingEnabled: boolean;
    showColonAfterLabel: boolean;
    showOptionalMark: boolean;
    showRequiredMark: boolean;
    showValidationSummary: boolean;
}>;
declare const DxFormat: import("@vue/runtime-core").DefineComponent<{
    currency: StringConstructor;
    formatter: PropType<(value: number | Date) => string>;
    parser: PropType<(value: string) => number | Date>;
    precision: NumberConstructor;
    type: PropType<string>;
    useCurrencyAccountingStyle: BooleanConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:currency": null;
    "update:formatter": null;
    "update:parser": null;
    "update:precision": null;
    "update:type": null;
    "update:useCurrencyAccountingStyle": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    currency: StringConstructor;
    formatter: PropType<(value: number | Date) => string>;
    parser: PropType<(value: string) => number | Date>;
    precision: NumberConstructor;
    type: PropType<string>;
    useCurrencyAccountingStyle: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:currency"?: ((...args: any[]) => any) | undefined;
    "onUpdate:formatter"?: ((...args: any[]) => any) | undefined;
    "onUpdate:parser"?: ((...args: any[]) => any) | undefined;
    "onUpdate:precision"?: ((...args: any[]) => any) | undefined;
    "onUpdate:useCurrencyAccountingStyle"?: ((...args: any[]) => any) | undefined;
}, {
    useCurrencyAccountingStyle: boolean;
}>;
declare const DxFormItem: import("@vue/runtime-core").DefineComponent<{
    colSpan: NumberConstructor;
    cssClass: StringConstructor;
    dataField: StringConstructor;
    editorOptions: {};
    editorType: PropType<FormItemComponent>;
    helpText: StringConstructor;
    isRequired: BooleanConstructor;
    itemType: PropType<FormItemType>;
    label: PropType<Record<string, any>>;
    name: StringConstructor;
    template: {};
    validationRules: PropType<CommonTypes.ValidationRule[]>;
    visible: BooleanConstructor;
    visibleIndex: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:colSpan": null;
    "update:cssClass": null;
    "update:dataField": null;
    "update:editorOptions": null;
    "update:editorType": null;
    "update:helpText": null;
    "update:isRequired": null;
    "update:itemType": null;
    "update:label": null;
    "update:name": null;
    "update:template": null;
    "update:validationRules": null;
    "update:visible": null;
    "update:visibleIndex": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    colSpan: NumberConstructor;
    cssClass: StringConstructor;
    dataField: StringConstructor;
    editorOptions: {};
    editorType: PropType<FormItemComponent>;
    helpText: StringConstructor;
    isRequired: BooleanConstructor;
    itemType: PropType<FormItemType>;
    label: PropType<Record<string, any>>;
    name: StringConstructor;
    template: {};
    validationRules: PropType<CommonTypes.ValidationRule[]>;
    visible: BooleanConstructor;
    visibleIndex: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:label"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cssClass"?: ((...args: any[]) => any) | undefined;
    "onUpdate:colSpan"?: ((...args: any[]) => any) | undefined;
    "onUpdate:itemType"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visibleIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editorOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dataField"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationRules"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editorType"?: ((...args: any[]) => any) | undefined;
    "onUpdate:helpText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:isRequired"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
    isRequired: boolean;
}>;
declare const DxFrom: import("@vue/runtime-core").DefineComponent<{
    left: NumberConstructor;
    opacity: NumberConstructor;
    position: PropType<Record<string, any> | PositionConfig>;
    scale: NumberConstructor;
    top: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:left": null;
    "update:opacity": null;
    "update:position": null;
    "update:scale": null;
    "update:top": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    left: NumberConstructor;
    opacity: NumberConstructor;
    position: PropType<Record<string, any> | PositionConfig>;
    scale: NumberConstructor;
    top: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:position"?: ((...args: any[]) => any) | undefined;
    "onUpdate:left"?: ((...args: any[]) => any) | undefined;
    "onUpdate:opacity"?: ((...args: any[]) => any) | undefined;
    "onUpdate:scale"?: ((...args: any[]) => any) | undefined;
    "onUpdate:top"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxGroupItem: import("@vue/runtime-core").DefineComponent<{
    alignItemLabels: BooleanConstructor;
    caption: StringConstructor;
    captionTemplate: {};
    colCount: NumberConstructor;
    colCountByScreen: PropType<Record<string, any>>;
    colSpan: NumberConstructor;
    cssClass: StringConstructor;
    items: PropType<(dxFormSimpleItem | dxFormGroupItem | dxFormTabbedItem | dxFormEmptyItem | dxFormButtonItem)[]>;
    itemType: PropType<FormItemType>;
    name: StringConstructor;
    template: {};
    visible: BooleanConstructor;
    visibleIndex: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:alignItemLabels": null;
    "update:caption": null;
    "update:captionTemplate": null;
    "update:colCount": null;
    "update:colCountByScreen": null;
    "update:colSpan": null;
    "update:cssClass": null;
    "update:items": null;
    "update:itemType": null;
    "update:name": null;
    "update:template": null;
    "update:visible": null;
    "update:visibleIndex": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    alignItemLabels: BooleanConstructor;
    caption: StringConstructor;
    captionTemplate: {};
    colCount: NumberConstructor;
    colCountByScreen: PropType<Record<string, any>>;
    colSpan: NumberConstructor;
    cssClass: StringConstructor;
    items: PropType<(dxFormSimpleItem | dxFormGroupItem | dxFormTabbedItem | dxFormEmptyItem | dxFormButtonItem)[]>;
    itemType: PropType<FormItemType>;
    name: StringConstructor;
    template: {};
    visible: BooleanConstructor;
    visibleIndex: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:items"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cssClass"?: ((...args: any[]) => any) | undefined;
    "onUpdate:colSpan"?: ((...args: any[]) => any) | undefined;
    "onUpdate:itemType"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visibleIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:caption"?: ((...args: any[]) => any) | undefined;
    "onUpdate:alignItemLabels"?: ((...args: any[]) => any) | undefined;
    "onUpdate:colCount"?: ((...args: any[]) => any) | undefined;
    "onUpdate:colCountByScreen"?: ((...args: any[]) => any) | undefined;
    "onUpdate:captionTemplate"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
    alignItemLabels: boolean;
}>;
declare const DxGroupOperationDescriptions: import("@vue/runtime-core").DefineComponent<{
    and: StringConstructor;
    notAnd: StringConstructor;
    notOr: StringConstructor;
    or: StringConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:and": null;
    "update:notAnd": null;
    "update:notOr": null;
    "update:or": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    and: StringConstructor;
    notAnd: StringConstructor;
    notOr: StringConstructor;
    or: StringConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:and"?: ((...args: any[]) => any) | undefined;
    "onUpdate:notAnd"?: ((...args: any[]) => any) | undefined;
    "onUpdate:notOr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:or"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxHeaderFilter: import("@vue/runtime-core").DefineComponent<{
    allowSearch: BooleanConstructor;
    allowSelectAll: BooleanConstructor;
    dataSource: PropType<any[] | Record<string, any> | DataSourceOptions<any, any, any, any> | Store<any, any> | ((options: {
        component: Record<string, any>;
        dataSource: DataSourceOptions | null;
    }) => void) | null>;
    groupInterval: PropType<number | HeaderFilterGroupInterval>;
    height: (NumberConstructor | StringConstructor)[];
    search: PropType<Record<string, any> | HeaderFilterSearchConfig | ColumnHeaderFilterSearchConfig>;
    searchMode: PropType<SearchMode>;
    searchTimeout: NumberConstructor;
    texts: PropType<Record<string, any> | HeaderFilterTexts>;
    visible: BooleanConstructor;
    width: (NumberConstructor | StringConstructor)[];
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:allowSearch": null;
    "update:allowSelectAll": null;
    "update:dataSource": null;
    "update:groupInterval": null;
    "update:height": null;
    "update:search": null;
    "update:searchMode": null;
    "update:searchTimeout": null;
    "update:texts": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    allowSearch: BooleanConstructor;
    allowSelectAll: BooleanConstructor;
    dataSource: PropType<any[] | Record<string, any> | DataSourceOptions<any, any, any, any> | Store<any, any> | ((options: {
        component: Record<string, any>;
        dataSource: DataSourceOptions | null;
    }) => void) | null>;
    groupInterval: PropType<number | HeaderFilterGroupInterval>;
    height: (NumberConstructor | StringConstructor)[];
    search: PropType<Record<string, any> | HeaderFilterSearchConfig | ColumnHeaderFilterSearchConfig>;
    searchMode: PropType<SearchMode>;
    searchTimeout: NumberConstructor;
    texts: PropType<Record<string, any> | HeaderFilterTexts>;
    visible: BooleanConstructor;
    width: (NumberConstructor | StringConstructor)[];
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dataSource"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:searchMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:searchTimeout"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowSearch"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowSelectAll"?: ((...args: any[]) => any) | undefined;
    "onUpdate:search"?: ((...args: any[]) => any) | undefined;
    "onUpdate:texts"?: ((...args: any[]) => any) | undefined;
    "onUpdate:groupInterval"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
    allowSearch: boolean;
    allowSelectAll: boolean;
}>;
declare const DxHeaderPanel: import("@vue/runtime-core").DefineComponent<{
    dragging: PropType<Record<string, any>>;
    itemCssClass: StringConstructor;
    itemTemplate: {};
    visible: BooleanConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:dragging": null;
    "update:itemCssClass": null;
    "update:itemTemplate": null;
    "update:visible": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    dragging: PropType<Record<string, any>>;
    itemCssClass: StringConstructor;
    itemTemplate: {};
    visible: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:itemTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dragging"?: ((...args: any[]) => any) | undefined;
    "onUpdate:itemCssClass"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
}>;
declare const DxHide: import("@vue/runtime-core").DefineComponent<{
    complete: PropType<($element: any, config: AnimationConfig) => void>;
    delay: NumberConstructor;
    direction: PropType<Direction>;
    duration: NumberConstructor;
    easing: StringConstructor;
    from: PropType<Record<string, any> | AnimationState>;
    staggerDelay: NumberConstructor;
    start: PropType<($element: any, config: AnimationConfig) => void>;
    to: PropType<Record<string, any> | AnimationState>;
    type: PropType<AnimationType>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:complete": null;
    "update:delay": null;
    "update:direction": null;
    "update:duration": null;
    "update:easing": null;
    "update:from": null;
    "update:staggerDelay": null;
    "update:start": null;
    "update:to": null;
    "update:type": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    complete: PropType<($element: any, config: AnimationConfig) => void>;
    delay: NumberConstructor;
    direction: PropType<Direction>;
    duration: NumberConstructor;
    easing: StringConstructor;
    from: PropType<Record<string, any> | AnimationState>;
    staggerDelay: NumberConstructor;
    start: PropType<($element: any, config: AnimationConfig) => void>;
    to: PropType<Record<string, any> | AnimationState>;
    type: PropType<AnimationType>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:complete"?: ((...args: any[]) => any) | undefined;
    "onUpdate:delay"?: ((...args: any[]) => any) | undefined;
    "onUpdate:direction"?: ((...args: any[]) => any) | undefined;
    "onUpdate:duration"?: ((...args: any[]) => any) | undefined;
    "onUpdate:easing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:from"?: ((...args: any[]) => any) | undefined;
    "onUpdate:staggerDelay"?: ((...args: any[]) => any) | undefined;
    "onUpdate:start"?: ((...args: any[]) => any) | undefined;
    "onUpdate:to"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxItem: import("@vue/runtime-core").DefineComponent<{
    alignItemLabels: BooleanConstructor;
    badge: StringConstructor;
    buttonOptions: PropType<Record<string, any> | dxButtonOptions>;
    caption: StringConstructor;
    captionTemplate: {};
    colCount: NumberConstructor;
    colCountByScreen: PropType<Record<string, any>>;
    colSpan: NumberConstructor;
    cssClass: StringConstructor;
    dataField: StringConstructor;
    disabled: BooleanConstructor;
    editorOptions: {};
    editorType: PropType<FormItemComponent>;
    helpText: StringConstructor;
    horizontalAlignment: PropType<HorizontalAlignment>;
    html: StringConstructor;
    icon: StringConstructor;
    isRequired: BooleanConstructor;
    items: PropType<(dxFormSimpleItem | dxFormGroupItem | dxFormTabbedItem | dxFormEmptyItem | dxFormButtonItem)[]>;
    itemType: PropType<FormItemType>;
    label: PropType<Record<string, any>>;
    locateInMenu: PropType<LocateInMenuMode>;
    location: PropType<ToolbarItemLocation>;
    menuItemTemplate: {};
    name: PropType<string>;
    options: {};
    showText: PropType<ShowTextMode>;
    tabPanelOptions: PropType<Record<string, any> | dxTabPanelOptions<any, any>>;
    tabs: PropType<Record<string, any>[]>;
    tabTemplate: {};
    template: {};
    text: StringConstructor;
    title: StringConstructor;
    validationRules: PropType<CommonTypes.ValidationRule[]>;
    verticalAlignment: PropType<VerticalAlignment>;
    visible: BooleanConstructor;
    visibleIndex: NumberConstructor;
    widget: PropType<ToolbarItemComponent>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:alignItemLabels": null;
    "update:badge": null;
    "update:buttonOptions": null;
    "update:caption": null;
    "update:captionTemplate": null;
    "update:colCount": null;
    "update:colCountByScreen": null;
    "update:colSpan": null;
    "update:cssClass": null;
    "update:dataField": null;
    "update:disabled": null;
    "update:editorOptions": null;
    "update:editorType": null;
    "update:helpText": null;
    "update:horizontalAlignment": null;
    "update:html": null;
    "update:icon": null;
    "update:isRequired": null;
    "update:items": null;
    "update:itemType": null;
    "update:label": null;
    "update:locateInMenu": null;
    "update:location": null;
    "update:menuItemTemplate": null;
    "update:name": null;
    "update:options": null;
    "update:showText": null;
    "update:tabPanelOptions": null;
    "update:tabs": null;
    "update:tabTemplate": null;
    "update:template": null;
    "update:text": null;
    "update:title": null;
    "update:validationRules": null;
    "update:verticalAlignment": null;
    "update:visible": null;
    "update:visibleIndex": null;
    "update:widget": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    alignItemLabels: BooleanConstructor;
    badge: StringConstructor;
    buttonOptions: PropType<Record<string, any> | dxButtonOptions>;
    caption: StringConstructor;
    captionTemplate: {};
    colCount: NumberConstructor;
    colCountByScreen: PropType<Record<string, any>>;
    colSpan: NumberConstructor;
    cssClass: StringConstructor;
    dataField: StringConstructor;
    disabled: BooleanConstructor;
    editorOptions: {};
    editorType: PropType<FormItemComponent>;
    helpText: StringConstructor;
    horizontalAlignment: PropType<HorizontalAlignment>;
    html: StringConstructor;
    icon: StringConstructor;
    isRequired: BooleanConstructor;
    items: PropType<(dxFormSimpleItem | dxFormGroupItem | dxFormTabbedItem | dxFormEmptyItem | dxFormButtonItem)[]>;
    itemType: PropType<FormItemType>;
    label: PropType<Record<string, any>>;
    locateInMenu: PropType<LocateInMenuMode>;
    location: PropType<ToolbarItemLocation>;
    menuItemTemplate: {};
    name: PropType<string>;
    options: {};
    showText: PropType<ShowTextMode>;
    tabPanelOptions: PropType<Record<string, any> | dxTabPanelOptions<any, any>>;
    tabs: PropType<Record<string, any>[]>;
    tabTemplate: {};
    template: {};
    text: StringConstructor;
    title: StringConstructor;
    validationRules: PropType<CommonTypes.ValidationRule[]>;
    verticalAlignment: PropType<VerticalAlignment>;
    visible: BooleanConstructor;
    visibleIndex: NumberConstructor;
    widget: PropType<ToolbarItemComponent>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:items"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:html"?: ((...args: any[]) => any) | undefined;
    "onUpdate:icon"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:title"?: ((...args: any[]) => any) | undefined;
    "onUpdate:label"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:location"?: ((...args: any[]) => any) | undefined;
    "onUpdate:options"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cssClass"?: ((...args: any[]) => any) | undefined;
    "onUpdate:locateInMenu"?: ((...args: any[]) => any) | undefined;
    "onUpdate:menuItemTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:widget"?: ((...args: any[]) => any) | undefined;
    "onUpdate:horizontalAlignment"?: ((...args: any[]) => any) | undefined;
    "onUpdate:verticalAlignment"?: ((...args: any[]) => any) | undefined;
    "onUpdate:buttonOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:colSpan"?: ((...args: any[]) => any) | undefined;
    "onUpdate:itemType"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visibleIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editorOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:caption"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dataField"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationRules"?: ((...args: any[]) => any) | undefined;
    "onUpdate:alignItemLabels"?: ((...args: any[]) => any) | undefined;
    "onUpdate:colCount"?: ((...args: any[]) => any) | undefined;
    "onUpdate:colCountByScreen"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editorType"?: ((...args: any[]) => any) | undefined;
    "onUpdate:helpText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:isRequired"?: ((...args: any[]) => any) | undefined;
    "onUpdate:captionTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:badge"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabPanelOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabs"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabTemplate"?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    visible: boolean;
    alignItemLabels: boolean;
    isRequired: boolean;
}>;
declare const DxLabel: import("@vue/runtime-core").DefineComponent<{
    alignment: PropType<HorizontalAlignment>;
    location: PropType<LabelLocation>;
    showColon: BooleanConstructor;
    template: {};
    text: StringConstructor;
    visible: BooleanConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:alignment": null;
    "update:location": null;
    "update:showColon": null;
    "update:template": null;
    "update:text": null;
    "update:visible": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    alignment: PropType<HorizontalAlignment>;
    location: PropType<LabelLocation>;
    showColon: BooleanConstructor;
    template: {};
    text: StringConstructor;
    visible: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:location"?: ((...args: any[]) => any) | undefined;
    "onUpdate:alignment"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showColon"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
    showColon: boolean;
}>;
declare const DxLoadPanel: import("@vue/runtime-core").DefineComponent<{
    animation: PropType<Record<string, any>>;
    bindingOptions: PropType<Record<string, any>>;
    container: {};
    deferRendering: BooleanConstructor;
    delay: NumberConstructor;
    focusStateEnabled: BooleanConstructor;
    height: (NumberConstructor | StringConstructor)[];
    hideOnOutsideClick: PropType<boolean | ((event: event) => boolean)>;
    hideOnParentScroll: BooleanConstructor;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    indicatorSrc: StringConstructor;
    maxHeight: (NumberConstructor | StringConstructor)[];
    maxWidth: (NumberConstructor | StringConstructor)[];
    message: StringConstructor;
    minHeight: (NumberConstructor | StringConstructor)[];
    minWidth: (NumberConstructor | StringConstructor)[];
    onContentReady: PropType<(e: LoadPanelContentReadyEvent) => void>;
    onDisposing: PropType<(e: LoadPanelDisposingEvent) => void>;
    onHidden: PropType<(e: HiddenEvent) => void>;
    onHiding: PropType<(e: HidingEvent) => void>;
    onInitialized: PropType<(e: LoadPanelInitializedEvent) => void>;
    onOptionChanged: PropType<(e: LoadPanelOptionChangedEvent) => void>;
    onShowing: PropType<(e: ShowingEvent) => void>;
    onShown: PropType<(e: ShownEvent) => void>;
    position: PropType<Record<string, any> | PositionAlignment | PositionConfig | (() => void)>;
    rtlEnabled: BooleanConstructor;
    shading: BooleanConstructor;
    shadingColor: StringConstructor;
    showIndicator: BooleanConstructor;
    showPane: BooleanConstructor;
    visible: BooleanConstructor;
    width: (NumberConstructor | StringConstructor)[];
    wrapperAttr: {};
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:animation": null;
    "update:bindingOptions": null;
    "update:container": null;
    "update:deferRendering": null;
    "update:delay": null;
    "update:focusStateEnabled": null;
    "update:height": null;
    "update:hideOnOutsideClick": null;
    "update:hideOnParentScroll": null;
    "update:hint": null;
    "update:hoverStateEnabled": null;
    "update:indicatorSrc": null;
    "update:maxHeight": null;
    "update:maxWidth": null;
    "update:message": null;
    "update:minHeight": null;
    "update:minWidth": null;
    "update:onContentReady": null;
    "update:onDisposing": null;
    "update:onHidden": null;
    "update:onHiding": null;
    "update:onInitialized": null;
    "update:onOptionChanged": null;
    "update:onShowing": null;
    "update:onShown": null;
    "update:position": null;
    "update:rtlEnabled": null;
    "update:shading": null;
    "update:shadingColor": null;
    "update:showIndicator": null;
    "update:showPane": null;
    "update:visible": null;
    "update:width": null;
    "update:wrapperAttr": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    animation: PropType<Record<string, any>>;
    bindingOptions: PropType<Record<string, any>>;
    container: {};
    deferRendering: BooleanConstructor;
    delay: NumberConstructor;
    focusStateEnabled: BooleanConstructor;
    height: (NumberConstructor | StringConstructor)[];
    hideOnOutsideClick: PropType<boolean | ((event: event) => boolean)>;
    hideOnParentScroll: BooleanConstructor;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    indicatorSrc: StringConstructor;
    maxHeight: (NumberConstructor | StringConstructor)[];
    maxWidth: (NumberConstructor | StringConstructor)[];
    message: StringConstructor;
    minHeight: (NumberConstructor | StringConstructor)[];
    minWidth: (NumberConstructor | StringConstructor)[];
    onContentReady: PropType<(e: LoadPanelContentReadyEvent) => void>;
    onDisposing: PropType<(e: LoadPanelDisposingEvent) => void>;
    onHidden: PropType<(e: HiddenEvent) => void>;
    onHiding: PropType<(e: HidingEvent) => void>;
    onInitialized: PropType<(e: LoadPanelInitializedEvent) => void>;
    onOptionChanged: PropType<(e: LoadPanelOptionChangedEvent) => void>;
    onShowing: PropType<(e: ShowingEvent) => void>;
    onShown: PropType<(e: ShownEvent) => void>;
    position: PropType<Record<string, any> | PositionAlignment | PositionConfig | (() => void)>;
    rtlEnabled: BooleanConstructor;
    shading: BooleanConstructor;
    shadingColor: StringConstructor;
    showIndicator: BooleanConstructor;
    showPane: BooleanConstructor;
    visible: BooleanConstructor;
    width: (NumberConstructor | StringConstructor)[];
    wrapperAttr: {};
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:deferRendering"?: ((...args: any[]) => any) | undefined;
    "onUpdate:focusStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hint"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoverStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onContentReady"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDisposing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onInitialized"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onOptionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rtlEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:animation"?: ((...args: any[]) => any) | undefined;
    "onUpdate:bindingOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:container"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hideOnOutsideClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hideOnParentScroll"?: ((...args: any[]) => any) | undefined;
    "onUpdate:maxHeight"?: ((...args: any[]) => any) | undefined;
    "onUpdate:maxWidth"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minHeight"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minWidth"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onHidden"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onHiding"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onShowing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onShown"?: ((...args: any[]) => any) | undefined;
    "onUpdate:position"?: ((...args: any[]) => any) | undefined;
    "onUpdate:shading"?: ((...args: any[]) => any) | undefined;
    "onUpdate:shadingColor"?: ((...args: any[]) => any) | undefined;
    "onUpdate:wrapperAttr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:delay"?: ((...args: any[]) => any) | undefined;
    "onUpdate:message"?: ((...args: any[]) => any) | undefined;
    "onUpdate:indicatorSrc"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showIndicator"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showPane"?: ((...args: any[]) => any) | undefined;
}, {
    deferRendering: boolean;
    focusStateEnabled: boolean;
    hoverStateEnabled: boolean;
    rtlEnabled: boolean;
    visible: boolean;
    hideOnParentScroll: boolean;
    shading: boolean;
    showIndicator: boolean;
    showPane: boolean;
}>;
declare const DxLookup: import("@vue/runtime-core").DefineComponent<{
    allowClearing: BooleanConstructor;
    dataSource: PropType<any[] | Record<string, any> | DataSourceOptions<any, any, any, any> | Store<any, any>>;
    displayExpr: PropType<string | ((data: any) => string)>;
    valueExpr: PropType<string | ((data: any) => string | number | boolean)>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:allowClearing": null;
    "update:dataSource": null;
    "update:displayExpr": null;
    "update:valueExpr": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    allowClearing: BooleanConstructor;
    dataSource: PropType<any[] | Record<string, any> | DataSourceOptions<any, any, any, any> | Store<any, any>>;
    displayExpr: PropType<string | ((data: any) => string)>;
    valueExpr: PropType<string | ((data: any) => string | number | boolean)>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dataSource"?: ((...args: any[]) => any) | undefined;
    "onUpdate:valueExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowClearing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:displayExpr"?: ((...args: any[]) => any) | undefined;
}, {
    allowClearing: boolean;
}>;
declare const DxMy: import("@vue/runtime-core").DefineComponent<{
    x: PropType<HorizontalAlignment>;
    y: PropType<VerticalAlignment>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:x": null;
    "update:y": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    x: PropType<HorizontalAlignment>;
    y: PropType<VerticalAlignment>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:x"?: ((...args: any[]) => any) | undefined;
    "onUpdate:y"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxNumericRule: import("@vue/runtime-core").DefineComponent<{
    ignoreEmptyValue: BooleanConstructor;
    message: StringConstructor;
    type: PropType<ValidationRuleType>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:ignoreEmptyValue": null;
    "update:message": null;
    "update:type": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    ignoreEmptyValue: BooleanConstructor;
    message: StringConstructor;
    type: PropType<ValidationRuleType>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:ignoreEmptyValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:message"?: ((...args: any[]) => any) | undefined;
}, {
    ignoreEmptyValue: boolean;
}>;
declare const DxOffset: import("@vue/runtime-core").DefineComponent<{
    x: NumberConstructor;
    y: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:x": null;
    "update:y": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    x: NumberConstructor;
    y: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:x"?: ((...args: any[]) => any) | undefined;
    "onUpdate:y"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxPager: import("@vue/runtime-core").DefineComponent<{
    allowedPageSizes: PropType<"auto" | (number | PagerPageSize)[]>;
    displayMode: PropType<DisplayMode>;
    infoText: StringConstructor;
    label: StringConstructor;
    showInfo: BooleanConstructor;
    showNavigationButtons: BooleanConstructor;
    showPageSizeSelector: BooleanConstructor;
    visible: PropType<boolean | "auto">;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:allowedPageSizes": null;
    "update:displayMode": null;
    "update:infoText": null;
    "update:label": null;
    "update:showInfo": null;
    "update:showNavigationButtons": null;
    "update:showPageSizeSelector": null;
    "update:visible": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    allowedPageSizes: PropType<"auto" | (number | PagerPageSize)[]>;
    displayMode: PropType<DisplayMode>;
    infoText: StringConstructor;
    label: StringConstructor;
    showInfo: BooleanConstructor;
    showNavigationButtons: BooleanConstructor;
    showPageSizeSelector: BooleanConstructor;
    visible: PropType<boolean | "auto">;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:label"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowedPageSizes"?: ((...args: any[]) => any) | undefined;
    "onUpdate:displayMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:infoText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showInfo"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showNavigationButtons"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showPageSizeSelector"?: ((...args: any[]) => any) | undefined;
}, {
    showInfo: boolean;
    showNavigationButtons: boolean;
    showPageSizeSelector: boolean;
}>;
declare const DxPaging: import("@vue/runtime-core").DefineComponent<{
    enabled: BooleanConstructor;
    pageIndex: NumberConstructor;
    pageSize: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:enabled": null;
    "update:pageIndex": null;
    "update:pageSize": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    enabled: BooleanConstructor;
    pageIndex: NumberConstructor;
    pageSize: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:enabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:pageIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:pageSize"?: ((...args: any[]) => any) | undefined;
}, {
    enabled: boolean;
}>;
declare const DxPatternRule: import("@vue/runtime-core").DefineComponent<{
    ignoreEmptyValue: BooleanConstructor;
    message: StringConstructor;
    pattern: (StringConstructor | RegExpConstructor)[];
    type: PropType<ValidationRuleType>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:ignoreEmptyValue": null;
    "update:message": null;
    "update:pattern": null;
    "update:type": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    ignoreEmptyValue: BooleanConstructor;
    message: StringConstructor;
    pattern: (StringConstructor | RegExpConstructor)[];
    type: PropType<ValidationRuleType>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:ignoreEmptyValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:message"?: ((...args: any[]) => any) | undefined;
    "onUpdate:pattern"?: ((...args: any[]) => any) | undefined;
}, {
    ignoreEmptyValue: boolean;
}>;
declare const DxPosition: import("@vue/runtime-core").DefineComponent<{
    at: PropType<Record<string, any> | PositionAlignment>;
    boundary: {};
    boundaryOffset: PropType<string | Record<string, any>>;
    collision: PropType<Record<string, any> | CollisionResolutionCombination>;
    my: PropType<Record<string, any> | PositionAlignment>;
    of: {};
    offset: PropType<string | Record<string, any>>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:at": null;
    "update:boundary": null;
    "update:boundaryOffset": null;
    "update:collision": null;
    "update:my": null;
    "update:of": null;
    "update:offset": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    at: PropType<Record<string, any> | PositionAlignment>;
    boundary: {};
    boundaryOffset: PropType<string | Record<string, any>>;
    collision: PropType<Record<string, any> | CollisionResolutionCombination>;
    my: PropType<Record<string, any> | PositionAlignment>;
    of: {};
    offset: PropType<string | Record<string, any>>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:at"?: ((...args: any[]) => any) | undefined;
    "onUpdate:boundary"?: ((...args: any[]) => any) | undefined;
    "onUpdate:boundaryOffset"?: ((...args: any[]) => any) | undefined;
    "onUpdate:collision"?: ((...args: any[]) => any) | undefined;
    "onUpdate:my"?: ((...args: any[]) => any) | undefined;
    "onUpdate:of"?: ((...args: any[]) => any) | undefined;
    "onUpdate:offset"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxRangeRule: import("@vue/runtime-core").DefineComponent<{
    ignoreEmptyValue: BooleanConstructor;
    max: (DateConstructor | NumberConstructor | StringConstructor)[];
    message: StringConstructor;
    min: (DateConstructor | NumberConstructor | StringConstructor)[];
    reevaluate: BooleanConstructor;
    type: PropType<ValidationRuleType>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:ignoreEmptyValue": null;
    "update:max": null;
    "update:message": null;
    "update:min": null;
    "update:reevaluate": null;
    "update:type": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    ignoreEmptyValue: BooleanConstructor;
    max: (DateConstructor | NumberConstructor | StringConstructor)[];
    message: StringConstructor;
    min: (DateConstructor | NumberConstructor | StringConstructor)[];
    reevaluate: BooleanConstructor;
    type: PropType<ValidationRuleType>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:max"?: ((...args: any[]) => any) | undefined;
    "onUpdate:min"?: ((...args: any[]) => any) | undefined;
    "onUpdate:ignoreEmptyValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:message"?: ((...args: any[]) => any) | undefined;
    "onUpdate:reevaluate"?: ((...args: any[]) => any) | undefined;
}, {
    ignoreEmptyValue: boolean;
    reevaluate: boolean;
}>;
declare const DxRemoteOperations: import("@vue/runtime-core").DefineComponent<{
    filtering: BooleanConstructor;
    grouping: BooleanConstructor;
    paging: BooleanConstructor;
    sorting: BooleanConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:filtering": null;
    "update:grouping": null;
    "update:paging": null;
    "update:sorting": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    filtering: BooleanConstructor;
    grouping: BooleanConstructor;
    paging: BooleanConstructor;
    sorting: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:paging"?: ((...args: any[]) => any) | undefined;
    "onUpdate:sorting"?: ((...args: any[]) => any) | undefined;
    "onUpdate:filtering"?: ((...args: any[]) => any) | undefined;
    "onUpdate:grouping"?: ((...args: any[]) => any) | undefined;
}, {
    paging: boolean;
    sorting: boolean;
    filtering: boolean;
    grouping: boolean;
}>;
declare const DxRequiredRule: import("@vue/runtime-core").DefineComponent<{
    message: StringConstructor;
    trim: BooleanConstructor;
    type: PropType<ValidationRuleType>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:message": null;
    "update:trim": null;
    "update:type": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    message: StringConstructor;
    trim: BooleanConstructor;
    type: PropType<ValidationRuleType>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:message"?: ((...args: any[]) => any) | undefined;
    "onUpdate:trim"?: ((...args: any[]) => any) | undefined;
}, {
    trim: boolean;
}>;
declare const DxScrolling: import("@vue/runtime-core").DefineComponent<{
    scrollByContent: BooleanConstructor;
    scrollByThumb: BooleanConstructor;
    showScrollbar: PropType<ScrollbarMode>;
    useNative: PropType<boolean | "auto">;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:scrollByContent": null;
    "update:scrollByThumb": null;
    "update:showScrollbar": null;
    "update:useNative": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    scrollByContent: BooleanConstructor;
    scrollByThumb: BooleanConstructor;
    showScrollbar: PropType<ScrollbarMode>;
    useNative: PropType<boolean | "auto">;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:scrollByContent"?: ((...args: any[]) => any) | undefined;
    "onUpdate:scrollByThumb"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showScrollbar"?: ((...args: any[]) => any) | undefined;
    "onUpdate:useNative"?: ((...args: any[]) => any) | undefined;
}, {
    scrollByContent: boolean;
    scrollByThumb: boolean;
}>;
declare const DxSearch: import("@vue/runtime-core").DefineComponent<{
    editorOptions: {};
    enabled: BooleanConstructor;
    mode: PropType<SearchMode>;
    searchExpr: PropType<string | (string | (() => any))[] | (() => any)>;
    timeout: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:editorOptions": null;
    "update:enabled": null;
    "update:mode": null;
    "update:searchExpr": null;
    "update:timeout": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    editorOptions: {};
    enabled: BooleanConstructor;
    mode: PropType<SearchMode>;
    searchExpr: PropType<string | (string | (() => any))[] | (() => any)>;
    timeout: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:searchExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:enabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editorOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:mode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:timeout"?: ((...args: any[]) => any) | undefined;
}, {
    enabled: boolean;
}>;
declare const DxSearchPanel: import("@vue/runtime-core").DefineComponent<{
    highlightCaseSensitive: BooleanConstructor;
    highlightSearchText: BooleanConstructor;
    placeholder: StringConstructor;
    searchVisibleColumnsOnly: BooleanConstructor;
    text: StringConstructor;
    visible: BooleanConstructor;
    width: (NumberConstructor | StringConstructor)[];
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:highlightCaseSensitive": null;
    "update:highlightSearchText": null;
    "update:placeholder": null;
    "update:searchVisibleColumnsOnly": null;
    "update:text": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    highlightCaseSensitive: BooleanConstructor;
    highlightSearchText: BooleanConstructor;
    placeholder: StringConstructor;
    searchVisibleColumnsOnly: BooleanConstructor;
    text: StringConstructor;
    visible: BooleanConstructor;
    width: (NumberConstructor | StringConstructor)[];
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:placeholder"?: ((...args: any[]) => any) | undefined;
    "onUpdate:highlightCaseSensitive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:highlightSearchText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:searchVisibleColumnsOnly"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
    highlightCaseSensitive: boolean;
    highlightSearchText: boolean;
    searchVisibleColumnsOnly: boolean;
}>;
declare const DxSelection: import("@vue/runtime-core").DefineComponent<{
    allowSelectAll: BooleanConstructor;
    mode: PropType<SingleMultipleOrNone>;
    recursive: BooleanConstructor;
    selectAllMode: PropType<SelectAllMode>;
    selectByClick: BooleanConstructor;
    showCheckBoxesMode: PropType<SelectionColumnDisplayMode>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:allowSelectAll": null;
    "update:mode": null;
    "update:recursive": null;
    "update:selectAllMode": null;
    "update:selectByClick": null;
    "update:showCheckBoxesMode": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    allowSelectAll: BooleanConstructor;
    mode: PropType<SingleMultipleOrNone>;
    recursive: BooleanConstructor;
    selectAllMode: PropType<SelectAllMode>;
    selectByClick: BooleanConstructor;
    showCheckBoxesMode: PropType<SelectionColumnDisplayMode>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowSelectAll"?: ((...args: any[]) => any) | undefined;
    "onUpdate:mode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectAllMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showCheckBoxesMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:recursive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectByClick"?: ((...args: any[]) => any) | undefined;
}, {
    allowSelectAll: boolean;
    recursive: boolean;
    selectByClick: boolean;
}>;
declare const DxShow: import("@vue/runtime-core").DefineComponent<{
    complete: PropType<($element: any, config: AnimationConfig) => void>;
    delay: NumberConstructor;
    direction: PropType<Direction>;
    duration: NumberConstructor;
    easing: StringConstructor;
    from: PropType<Record<string, any> | AnimationState>;
    staggerDelay: NumberConstructor;
    start: PropType<($element: any, config: AnimationConfig) => void>;
    to: PropType<Record<string, any> | AnimationState>;
    type: PropType<AnimationType>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:complete": null;
    "update:delay": null;
    "update:direction": null;
    "update:duration": null;
    "update:easing": null;
    "update:from": null;
    "update:staggerDelay": null;
    "update:start": null;
    "update:to": null;
    "update:type": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    complete: PropType<($element: any, config: AnimationConfig) => void>;
    delay: NumberConstructor;
    direction: PropType<Direction>;
    duration: NumberConstructor;
    easing: StringConstructor;
    from: PropType<Record<string, any> | AnimationState>;
    staggerDelay: NumberConstructor;
    start: PropType<($element: any, config: AnimationConfig) => void>;
    to: PropType<Record<string, any> | AnimationState>;
    type: PropType<AnimationType>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:complete"?: ((...args: any[]) => any) | undefined;
    "onUpdate:delay"?: ((...args: any[]) => any) | undefined;
    "onUpdate:direction"?: ((...args: any[]) => any) | undefined;
    "onUpdate:duration"?: ((...args: any[]) => any) | undefined;
    "onUpdate:easing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:from"?: ((...args: any[]) => any) | undefined;
    "onUpdate:staggerDelay"?: ((...args: any[]) => any) | undefined;
    "onUpdate:start"?: ((...args: any[]) => any) | undefined;
    "onUpdate:to"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxSimpleItem: import("@vue/runtime-core").DefineComponent<{
    colSpan: NumberConstructor;
    cssClass: StringConstructor;
    dataField: StringConstructor;
    editorOptions: {};
    editorType: PropType<FormItemComponent>;
    helpText: StringConstructor;
    isRequired: BooleanConstructor;
    itemType: PropType<FormItemType>;
    label: PropType<Record<string, any>>;
    name: StringConstructor;
    template: {};
    validationRules: PropType<CommonTypes.ValidationRule[]>;
    visible: BooleanConstructor;
    visibleIndex: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:colSpan": null;
    "update:cssClass": null;
    "update:dataField": null;
    "update:editorOptions": null;
    "update:editorType": null;
    "update:helpText": null;
    "update:isRequired": null;
    "update:itemType": null;
    "update:label": null;
    "update:name": null;
    "update:template": null;
    "update:validationRules": null;
    "update:visible": null;
    "update:visibleIndex": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    colSpan: NumberConstructor;
    cssClass: StringConstructor;
    dataField: StringConstructor;
    editorOptions: {};
    editorType: PropType<FormItemComponent>;
    helpText: StringConstructor;
    isRequired: BooleanConstructor;
    itemType: PropType<FormItemType>;
    label: PropType<Record<string, any>>;
    name: StringConstructor;
    template: {};
    validationRules: PropType<CommonTypes.ValidationRule[]>;
    visible: BooleanConstructor;
    visibleIndex: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:label"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cssClass"?: ((...args: any[]) => any) | undefined;
    "onUpdate:colSpan"?: ((...args: any[]) => any) | undefined;
    "onUpdate:itemType"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visibleIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editorOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dataField"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationRules"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editorType"?: ((...args: any[]) => any) | undefined;
    "onUpdate:helpText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:isRequired"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
    isRequired: boolean;
}>;
declare const DxSorting: import("@vue/runtime-core").DefineComponent<{
    ascendingText: StringConstructor;
    clearText: StringConstructor;
    descendingText: StringConstructor;
    mode: PropType<SingleMultipleOrNone>;
    showSortIndexes: BooleanConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:ascendingText": null;
    "update:clearText": null;
    "update:descendingText": null;
    "update:mode": null;
    "update:showSortIndexes": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    ascendingText: StringConstructor;
    clearText: StringConstructor;
    descendingText: StringConstructor;
    mode: PropType<SingleMultipleOrNone>;
    showSortIndexes: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:mode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:ascendingText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:clearText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:descendingText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showSortIndexes"?: ((...args: any[]) => any) | undefined;
}, {
    showSortIndexes: boolean;
}>;
declare const DxStringLengthRule: import("@vue/runtime-core").DefineComponent<{
    ignoreEmptyValue: BooleanConstructor;
    max: NumberConstructor;
    message: StringConstructor;
    min: NumberConstructor;
    trim: BooleanConstructor;
    type: PropType<ValidationRuleType>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:ignoreEmptyValue": null;
    "update:max": null;
    "update:message": null;
    "update:min": null;
    "update:trim": null;
    "update:type": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    ignoreEmptyValue: BooleanConstructor;
    max: NumberConstructor;
    message: StringConstructor;
    min: NumberConstructor;
    trim: BooleanConstructor;
    type: PropType<ValidationRuleType>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:max"?: ((...args: any[]) => any) | undefined;
    "onUpdate:min"?: ((...args: any[]) => any) | undefined;
    "onUpdate:ignoreEmptyValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:message"?: ((...args: any[]) => any) | undefined;
    "onUpdate:trim"?: ((...args: any[]) => any) | undefined;
}, {
    trim: boolean;
    ignoreEmptyValue: boolean;
}>;
declare const DxTab: import("@vue/runtime-core").DefineComponent<{
    alignItemLabels: BooleanConstructor;
    badge: StringConstructor;
    colCount: NumberConstructor;
    colCountByScreen: PropType<Record<string, any>>;
    disabled: BooleanConstructor;
    icon: StringConstructor;
    items: PropType<(dxFormSimpleItem | dxFormGroupItem | dxFormTabbedItem | dxFormEmptyItem | dxFormButtonItem)[]>;
    tabTemplate: {};
    template: {};
    title: StringConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:alignItemLabels": null;
    "update:badge": null;
    "update:colCount": null;
    "update:colCountByScreen": null;
    "update:disabled": null;
    "update:icon": null;
    "update:items": null;
    "update:tabTemplate": null;
    "update:template": null;
    "update:title": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    alignItemLabels: BooleanConstructor;
    badge: StringConstructor;
    colCount: NumberConstructor;
    colCountByScreen: PropType<Record<string, any>>;
    disabled: BooleanConstructor;
    icon: StringConstructor;
    items: PropType<(dxFormSimpleItem | dxFormGroupItem | dxFormTabbedItem | dxFormEmptyItem | dxFormButtonItem)[]>;
    tabTemplate: {};
    template: {};
    title: StringConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:items"?: ((...args: any[]) => any) | undefined;
    "onUpdate:icon"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:title"?: ((...args: any[]) => any) | undefined;
    "onUpdate:alignItemLabels"?: ((...args: any[]) => any) | undefined;
    "onUpdate:colCount"?: ((...args: any[]) => any) | undefined;
    "onUpdate:colCountByScreen"?: ((...args: any[]) => any) | undefined;
    "onUpdate:badge"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabTemplate"?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    alignItemLabels: boolean;
}>;
declare const DxTabbedItem: import("@vue/runtime-core").DefineComponent<{
    colSpan: NumberConstructor;
    cssClass: StringConstructor;
    itemType: PropType<FormItemType>;
    name: StringConstructor;
    tabPanelOptions: PropType<Record<string, any> | dxTabPanelOptions<any, any>>;
    tabs: PropType<Record<string, any>[]>;
    visible: BooleanConstructor;
    visibleIndex: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:colSpan": null;
    "update:cssClass": null;
    "update:itemType": null;
    "update:name": null;
    "update:tabPanelOptions": null;
    "update:tabs": null;
    "update:visible": null;
    "update:visibleIndex": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    colSpan: NumberConstructor;
    cssClass: StringConstructor;
    itemType: PropType<FormItemType>;
    name: StringConstructor;
    tabPanelOptions: PropType<Record<string, any> | dxTabPanelOptions<any, any>>;
    tabs: PropType<Record<string, any>[]>;
    visible: BooleanConstructor;
    visibleIndex: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cssClass"?: ((...args: any[]) => any) | undefined;
    "onUpdate:colSpan"?: ((...args: any[]) => any) | undefined;
    "onUpdate:itemType"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visibleIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabPanelOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabs"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
}>;
declare const DxTabPanelOptions: import("@vue/runtime-core").DefineComponent<{
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    animationEnabled: BooleanConstructor;
    bindingOptions: PropType<Record<string, any>>;
    dataSource: PropType<string | any[] | Record<string, any> | DataSource<any, any> | DataSourceOptions<any, any, any, any> | Store<any, any> | null>;
    deferRendering: BooleanConstructor;
    disabled: BooleanConstructor;
    elementAttr: PropType<Record<string, any>>;
    focusStateEnabled: BooleanConstructor;
    height: (NumberConstructor | StringConstructor)[];
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    iconPosition: PropType<TabsIconPosition>;
    itemHoldTimeout: NumberConstructor;
    items: PropType<any[]>;
    itemTemplate: {};
    itemTitleTemplate: {};
    loop: BooleanConstructor;
    noDataText: StringConstructor;
    onContentReady: PropType<(e: TabPanelContentReadyEvent) => void>;
    onDisposing: PropType<(e: TabPanelDisposingEvent) => void>;
    onInitialized: PropType<(e: TabPanelInitializedEvent) => void>;
    onItemClick: PropType<(e: ItemClickEvent) => void>;
    onItemContextMenu: PropType<(e: ItemContextMenuEvent) => void>;
    onItemHold: PropType<(e: ItemHoldEvent) => void>;
    onItemRendered: PropType<(e: ItemRenderedEvent) => void>;
    onOptionChanged: PropType<(e: TabPanelOptionChangedEvent) => void>;
    onSelectionChanged: PropType<(e: TabPanelSelectionChangedEvent) => void>;
    onSelectionChanging: PropType<(e: SelectionChangingEvent) => void>;
    onTitleClick: PropType<(e: TitleClickEvent) => void>;
    onTitleHold: PropType<(e: TitleHoldEvent) => void>;
    onTitleRendered: PropType<(e: TitleRenderedEvent) => void>;
    repaintChangesOnly: BooleanConstructor;
    rtlEnabled: BooleanConstructor;
    scrollByContent: BooleanConstructor;
    scrollingEnabled: BooleanConstructor;
    selectedIndex: NumberConstructor;
    selectedItem: {};
    showNavButtons: BooleanConstructor;
    stylingMode: PropType<TabsStyle>;
    swipeEnabled: BooleanConstructor;
    tabIndex: NumberConstructor;
    tabsPosition: PropType<Position>;
    visible: BooleanConstructor;
    width: (NumberConstructor | StringConstructor)[];
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:accessKey": null;
    "update:activeStateEnabled": null;
    "update:animationEnabled": null;
    "update:bindingOptions": null;
    "update:dataSource": null;
    "update:deferRendering": null;
    "update:disabled": null;
    "update:elementAttr": null;
    "update:focusStateEnabled": null;
    "update:height": null;
    "update:hint": null;
    "update:hoverStateEnabled": null;
    "update:iconPosition": null;
    "update:itemHoldTimeout": null;
    "update:items": null;
    "update:itemTemplate": null;
    "update:itemTitleTemplate": null;
    "update:loop": null;
    "update:noDataText": null;
    "update:onContentReady": null;
    "update:onDisposing": null;
    "update:onInitialized": null;
    "update:onItemClick": null;
    "update:onItemContextMenu": null;
    "update:onItemHold": null;
    "update:onItemRendered": null;
    "update:onOptionChanged": null;
    "update:onSelectionChanged": null;
    "update:onSelectionChanging": null;
    "update:onTitleClick": null;
    "update:onTitleHold": null;
    "update:onTitleRendered": null;
    "update:repaintChangesOnly": null;
    "update:rtlEnabled": null;
    "update:scrollByContent": null;
    "update:scrollingEnabled": null;
    "update:selectedIndex": null;
    "update:selectedItem": null;
    "update:showNavButtons": null;
    "update:stylingMode": null;
    "update:swipeEnabled": null;
    "update:tabIndex": null;
    "update:tabsPosition": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    animationEnabled: BooleanConstructor;
    bindingOptions: PropType<Record<string, any>>;
    dataSource: PropType<string | any[] | Record<string, any> | DataSource<any, any> | DataSourceOptions<any, any, any, any> | Store<any, any> | null>;
    deferRendering: BooleanConstructor;
    disabled: BooleanConstructor;
    elementAttr: PropType<Record<string, any>>;
    focusStateEnabled: BooleanConstructor;
    height: (NumberConstructor | StringConstructor)[];
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    iconPosition: PropType<TabsIconPosition>;
    itemHoldTimeout: NumberConstructor;
    items: PropType<any[]>;
    itemTemplate: {};
    itemTitleTemplate: {};
    loop: BooleanConstructor;
    noDataText: StringConstructor;
    onContentReady: PropType<(e: TabPanelContentReadyEvent) => void>;
    onDisposing: PropType<(e: TabPanelDisposingEvent) => void>;
    onInitialized: PropType<(e: TabPanelInitializedEvent) => void>;
    onItemClick: PropType<(e: ItemClickEvent) => void>;
    onItemContextMenu: PropType<(e: ItemContextMenuEvent) => void>;
    onItemHold: PropType<(e: ItemHoldEvent) => void>;
    onItemRendered: PropType<(e: ItemRenderedEvent) => void>;
    onOptionChanged: PropType<(e: TabPanelOptionChangedEvent) => void>;
    onSelectionChanged: PropType<(e: TabPanelSelectionChangedEvent) => void>;
    onSelectionChanging: PropType<(e: SelectionChangingEvent) => void>;
    onTitleClick: PropType<(e: TitleClickEvent) => void>;
    onTitleHold: PropType<(e: TitleHoldEvent) => void>;
    onTitleRendered: PropType<(e: TitleRenderedEvent) => void>;
    repaintChangesOnly: BooleanConstructor;
    rtlEnabled: BooleanConstructor;
    scrollByContent: BooleanConstructor;
    scrollingEnabled: BooleanConstructor;
    selectedIndex: NumberConstructor;
    selectedItem: {};
    showNavButtons: BooleanConstructor;
    stylingMode: PropType<TabsStyle>;
    swipeEnabled: BooleanConstructor;
    tabIndex: NumberConstructor;
    tabsPosition: PropType<Position>;
    visible: BooleanConstructor;
    width: (NumberConstructor | StringConstructor)[];
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:accessKey"?: ((...args: any[]) => any) | undefined;
    "onUpdate:activeStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dataSource"?: ((...args: any[]) => any) | undefined;
    "onUpdate:deferRendering"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:elementAttr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:focusStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hint"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoverStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:itemHoldTimeout"?: ((...args: any[]) => any) | undefined;
    "onUpdate:items"?: ((...args: any[]) => any) | undefined;
    "onUpdate:itemTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:itemTitleTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:noDataText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onContentReady"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDisposing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onInitialized"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onItemClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onItemContextMenu"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onItemHold"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onItemRendered"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onOptionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onSelectionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:repaintChangesOnly"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rtlEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectedIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectedItem"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:stylingMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:bindingOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onTitleRendered"?: ((...args: any[]) => any) | undefined;
    "onUpdate:scrollingEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:scrollByContent"?: ((...args: any[]) => any) | undefined;
    "onUpdate:animationEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:iconPosition"?: ((...args: any[]) => any) | undefined;
    "onUpdate:loop"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onSelectionChanging"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onTitleClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onTitleHold"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showNavButtons"?: ((...args: any[]) => any) | undefined;
    "onUpdate:swipeEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabsPosition"?: ((...args: any[]) => any) | undefined;
}, {
    activeStateEnabled: boolean;
    deferRendering: boolean;
    disabled: boolean;
    focusStateEnabled: boolean;
    hoverStateEnabled: boolean;
    repaintChangesOnly: boolean;
    rtlEnabled: boolean;
    visible: boolean;
    scrollingEnabled: boolean;
    scrollByContent: boolean;
    animationEnabled: boolean;
    loop: boolean;
    showNavButtons: boolean;
    swipeEnabled: boolean;
}>;
declare const DxTabPanelOptionsItem: import("@vue/runtime-core").DefineComponent<{
    badge: StringConstructor;
    disabled: BooleanConstructor;
    html: StringConstructor;
    icon: StringConstructor;
    tabTemplate: {};
    template: {};
    text: StringConstructor;
    title: StringConstructor;
    visible: BooleanConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:badge": null;
    "update:disabled": null;
    "update:html": null;
    "update:icon": null;
    "update:tabTemplate": null;
    "update:template": null;
    "update:text": null;
    "update:title": null;
    "update:visible": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    badge: StringConstructor;
    disabled: BooleanConstructor;
    html: StringConstructor;
    icon: StringConstructor;
    tabTemplate: {};
    template: {};
    text: StringConstructor;
    title: StringConstructor;
    visible: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:html"?: ((...args: any[]) => any) | undefined;
    "onUpdate:icon"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:title"?: ((...args: any[]) => any) | undefined;
    "onUpdate:badge"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabTemplate"?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    visible: boolean;
}>;
declare const DxTexts: import("@vue/runtime-core").DefineComponent<{
    addCard: StringConstructor;
    cancel: StringConstructor;
    clearFilter: StringConstructor;
    confirmDeleteMessage: StringConstructor;
    confirmDeleteTitle: StringConstructor;
    createFilter: StringConstructor;
    deleteCard: StringConstructor;
    editCard: StringConstructor;
    emptyValue: StringConstructor;
    filterEnabledHint: StringConstructor;
    ok: StringConstructor;
    saveCard: StringConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:addCard": null;
    "update:cancel": null;
    "update:clearFilter": null;
    "update:confirmDeleteMessage": null;
    "update:confirmDeleteTitle": null;
    "update:createFilter": null;
    "update:deleteCard": null;
    "update:editCard": null;
    "update:emptyValue": null;
    "update:filterEnabledHint": null;
    "update:ok": null;
    "update:saveCard": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    addCard: StringConstructor;
    cancel: StringConstructor;
    clearFilter: StringConstructor;
    confirmDeleteMessage: StringConstructor;
    confirmDeleteTitle: StringConstructor;
    createFilter: StringConstructor;
    deleteCard: StringConstructor;
    editCard: StringConstructor;
    emptyValue: StringConstructor;
    filterEnabledHint: StringConstructor;
    ok: StringConstructor;
    saveCard: StringConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cancel"?: ((...args: any[]) => any) | undefined;
    "onUpdate:emptyValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:ok"?: ((...args: any[]) => any) | undefined;
    "onUpdate:addCard"?: ((...args: any[]) => any) | undefined;
    "onUpdate:confirmDeleteMessage"?: ((...args: any[]) => any) | undefined;
    "onUpdate:confirmDeleteTitle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:deleteCard"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editCard"?: ((...args: any[]) => any) | undefined;
    "onUpdate:saveCard"?: ((...args: any[]) => any) | undefined;
    "onUpdate:clearFilter"?: ((...args: any[]) => any) | undefined;
    "onUpdate:createFilter"?: ((...args: any[]) => any) | undefined;
    "onUpdate:filterEnabledHint"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxTo: import("@vue/runtime-core").DefineComponent<{
    left: NumberConstructor;
    opacity: NumberConstructor;
    position: PropType<Record<string, any> | PositionConfig>;
    scale: NumberConstructor;
    top: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:left": null;
    "update:opacity": null;
    "update:position": null;
    "update:scale": null;
    "update:top": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    left: NumberConstructor;
    opacity: NumberConstructor;
    position: PropType<Record<string, any> | PositionConfig>;
    scale: NumberConstructor;
    top: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:position"?: ((...args: any[]) => any) | undefined;
    "onUpdate:left"?: ((...args: any[]) => any) | undefined;
    "onUpdate:opacity"?: ((...args: any[]) => any) | undefined;
    "onUpdate:scale"?: ((...args: any[]) => any) | undefined;
    "onUpdate:top"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxToolbar: import("@vue/runtime-core").DefineComponent<{
    disabled: BooleanConstructor;
    items: PropType<(PredefinedToolbarItem | DxCardViewTypes.ToolbarItem)[]>;
    multiline: BooleanConstructor;
    visible: BooleanConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:disabled": null;
    "update:items": null;
    "update:multiline": null;
    "update:visible": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    disabled: BooleanConstructor;
    items: PropType<(PredefinedToolbarItem | DxCardViewTypes.ToolbarItem)[]>;
    multiline: BooleanConstructor;
    visible: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:items"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:multiline"?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    visible: boolean;
    multiline: boolean;
}>;
declare const DxToolbarItem: import("@vue/runtime-core").DefineComponent<{
    cssClass: StringConstructor;
    disabled: BooleanConstructor;
    html: StringConstructor;
    locateInMenu: PropType<LocateInMenuMode>;
    location: PropType<ToolbarItemLocation>;
    menuItemTemplate: {};
    name: PropType<string>;
    options: {};
    showText: PropType<ShowTextMode>;
    template: {};
    text: StringConstructor;
    visible: BooleanConstructor;
    widget: PropType<ToolbarItemComponent>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:cssClass": null;
    "update:disabled": null;
    "update:html": null;
    "update:locateInMenu": null;
    "update:location": null;
    "update:menuItemTemplate": null;
    "update:name": null;
    "update:options": null;
    "update:showText": null;
    "update:template": null;
    "update:text": null;
    "update:visible": null;
    "update:widget": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    cssClass: StringConstructor;
    disabled: BooleanConstructor;
    html: StringConstructor;
    locateInMenu: PropType<LocateInMenuMode>;
    location: PropType<ToolbarItemLocation>;
    menuItemTemplate: {};
    name: PropType<string>;
    options: {};
    showText: PropType<ShowTextMode>;
    template: {};
    text: StringConstructor;
    visible: BooleanConstructor;
    widget: PropType<ToolbarItemComponent>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:html"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:location"?: ((...args: any[]) => any) | undefined;
    "onUpdate:options"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cssClass"?: ((...args: any[]) => any) | undefined;
    "onUpdate:locateInMenu"?: ((...args: any[]) => any) | undefined;
    "onUpdate:menuItemTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:widget"?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    visible: boolean;
}>;
declare const DxValidationRule: import("@vue/runtime-core").DefineComponent<{
    comparisonTarget: PropType<() => any>;
    comparisonType: PropType<ComparisonOperator>;
    ignoreEmptyValue: BooleanConstructor;
    max: (DateConstructor | NumberConstructor | StringConstructor)[];
    message: StringConstructor;
    min: (DateConstructor | NumberConstructor | StringConstructor)[];
    pattern: (StringConstructor | RegExpConstructor)[];
    reevaluate: BooleanConstructor;
    trim: BooleanConstructor;
    type: PropType<ValidationRuleType>;
    validationCallback: PropType<(options: {
        column: Record<string, any>;
        data: Record<string, any>;
        formItem: Record<string, any>;
        rule: Record<string, any>;
        validator: Record<string, any>;
        value: string | number;
    }) => boolean>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:comparisonTarget": null;
    "update:comparisonType": null;
    "update:ignoreEmptyValue": null;
    "update:max": null;
    "update:message": null;
    "update:min": null;
    "update:pattern": null;
    "update:reevaluate": null;
    "update:trim": null;
    "update:type": null;
    "update:validationCallback": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    comparisonTarget: PropType<() => any>;
    comparisonType: PropType<ComparisonOperator>;
    ignoreEmptyValue: BooleanConstructor;
    max: (DateConstructor | NumberConstructor | StringConstructor)[];
    message: StringConstructor;
    min: (DateConstructor | NumberConstructor | StringConstructor)[];
    pattern: (StringConstructor | RegExpConstructor)[];
    reevaluate: BooleanConstructor;
    trim: BooleanConstructor;
    type: PropType<ValidationRuleType>;
    validationCallback: PropType<(options: {
        column: Record<string, any>;
        data: Record<string, any>;
        formItem: Record<string, any>;
        rule: Record<string, any>;
        validator: Record<string, any>;
        value: string | number;
    }) => boolean>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:max"?: ((...args: any[]) => any) | undefined;
    "onUpdate:min"?: ((...args: any[]) => any) | undefined;
    "onUpdate:ignoreEmptyValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:message"?: ((...args: any[]) => any) | undefined;
    "onUpdate:reevaluate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationCallback"?: ((...args: any[]) => any) | undefined;
    "onUpdate:comparisonTarget"?: ((...args: any[]) => any) | undefined;
    "onUpdate:comparisonType"?: ((...args: any[]) => any) | undefined;
    "onUpdate:pattern"?: ((...args: any[]) => any) | undefined;
    "onUpdate:trim"?: ((...args: any[]) => any) | undefined;
}, {
    trim: boolean;
    ignoreEmptyValue: boolean;
    reevaluate: boolean;
}>;
export default DxCardView;
export { DxCardView, DxAnimation, DxAsyncRule, DxAt, DxBoundaryOffset, DxButtonItem, DxButtonOptions, DxCardCover, DxCardHeader, DxCardHeaderItem, DxCardViewHeaderFilter, DxCardViewHeaderFilterSearch, DxCardViewHeaderFilterTexts, DxCardViewSelection, DxChange, DxColCountByScreen, DxCollision, DxColumn, DxColumnChooser, DxColumnChooserSearch, DxColumnChooserSelection, DxColumnHeaderFilter, DxColumnHeaderFilterSearch, DxCompareRule, DxCustomOperation, DxCustomRule, DxDragging, DxEditing, DxEditingTexts, DxEmailRule, DxEmptyItem, DxField, DxFilterBuilder, DxFilterOperationDescriptions, DxFilterPanel, DxFilterPanelTexts, DxForm, DxFormat, DxFormItem, DxFrom, DxGroupItem, DxGroupOperationDescriptions, DxHeaderFilter, DxHeaderPanel, DxHide, DxItem, DxLabel, DxLoadPanel, DxLookup, DxMy, DxNumericRule, DxOffset, DxPager, DxPaging, DxPatternRule, DxPosition, DxRangeRule, DxRemoteOperations, DxRequiredRule, DxScrolling, DxSearch, DxSearchPanel, DxSelection, DxShow, DxSimpleItem, DxSorting, DxStringLengthRule, DxTab, DxTabbedItem, DxTabPanelOptions, DxTabPanelOptionsItem, DxTexts, DxTo, DxToolbar, DxToolbarItem, DxValidationRule };
import type * as DxCardViewTypes from "devextreme/ui/card_view_types";
export { DxCardViewTypes };
