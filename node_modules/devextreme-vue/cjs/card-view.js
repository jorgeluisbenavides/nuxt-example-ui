/*!
 * devextreme-vue
 * Version: 25.1.3
 * Build date: Wed Jun 25 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DxMy = exports.DxLookup = exports.DxLoadPanel = exports.DxLabel = exports.DxItem = exports.DxHide = exports.DxHeaderPanel = exports.DxHeaderFilter = exports.DxGroupOperationDescriptions = exports.DxGroupItem = exports.DxFrom = exports.DxFormItem = exports.DxFormat = exports.DxForm = exports.DxFilterPanelTexts = exports.DxFilterPanel = exports.DxFilterOperationDescriptions = exports.DxFilterBuilder = exports.DxField = exports.DxEmptyItem = exports.DxEmailRule = exports.DxEditingTexts = exports.DxEditing = exports.DxDragging = exports.DxCustomRule = exports.DxCustomOperation = exports.DxCompareRule = exports.DxColumnHeaderFilterSearch = exports.DxColumnHeaderFilter = exports.DxColumnChooserSelection = exports.DxColumnChooserSearch = exports.DxColumnChooser = exports.DxColumn = exports.DxCollision = exports.DxColCountByScreen = exports.DxChange = exports.DxCardViewSelection = exports.DxCardViewHeaderFilterTexts = exports.DxCardViewHeaderFilterSearch = exports.DxCardViewHeaderFilter = exports.DxCardHeaderItem = exports.DxCardHeader = exports.DxCardCover = exports.DxButtonOptions = exports.DxButtonItem = exports.DxBoundaryOffset = exports.DxAt = exports.DxAsyncRule = exports.DxAnimation = exports.DxCardView = void 0;
exports.DxValidationRule = exports.DxToolbarItem = exports.DxToolbar = exports.DxTo = exports.DxTexts = exports.DxTabPanelOptionsItem = exports.DxTabPanelOptions = exports.DxTabbedItem = exports.DxTab = exports.DxStringLengthRule = exports.DxSorting = exports.DxSimpleItem = exports.DxShow = exports.DxSelection = exports.DxSearchPanel = exports.DxSearch = exports.DxScrolling = exports.DxRequiredRule = exports.DxRemoteOperations = exports.DxRangeRule = exports.DxPosition = exports.DxPatternRule = exports.DxPaging = exports.DxPager = exports.DxOffset = exports.DxNumericRule = void 0;
const vue_1 = require("vue");
const index_1 = require("./core/index");
const card_view_1 = __importDefault(require("devextreme/ui/card_view"));
const index_2 = require("./core/index");
const componentConfig = {
    props: {
        accessKey: String,
        activeStateEnabled: Boolean,
        allowColumnReordering: Boolean,
        cardContentTemplate: {},
        cardCover: Object,
        cardFooterTemplate: {},
        cardHeader: Object,
        cardMaxWidth: Number,
        cardMinWidth: Number,
        cardsPerRow: [String, Number],
        cardTemplate: {},
        columnChooser: Object,
        columns: Array,
        dataSource: [Array, Object, String],
        disabled: Boolean,
        editing: Object,
        elementAttr: Object,
        errorRowEnabled: Boolean,
        fieldHintEnabled: Boolean,
        filterBuilder: Object,
        filterBuilderPopup: Object,
        filterPanel: Object,
        filterValue: [Array, Function, String],
        focusStateEnabled: Boolean,
        headerFilter: Object,
        headerPanel: Object,
        height: [Number, String],
        hint: String,
        hoverStateEnabled: Boolean,
        keyExpr: [Array, String],
        loadPanel: Object,
        noDataTemplate: {},
        noDataText: String,
        onCardClick: Function,
        onCardDblClick: Function,
        onCardHoverChanged: Function,
        onCardInserted: Function,
        onCardInserting: Function,
        onCardPrepared: Function,
        onCardRemoved: Function,
        onCardRemoving: Function,
        onCardSaved: Function,
        onCardSaving: Function,
        onCardUpdated: Function,
        onCardUpdating: Function,
        onContentReady: Function,
        onContextMenuPreparing: Function,
        onDataErrorOccurred: Function,
        onDisposing: Function,
        onEditCanceled: Function,
        onEditCanceling: Function,
        onEditingStart: Function,
        onFieldCaptionClick: Function,
        onFieldCaptionDblClick: Function,
        onFieldCaptionPrepared: Function,
        onFieldValueClick: Function,
        onFieldValueDblClick: Function,
        onFieldValuePrepared: Function,
        onFocusedCardChanged: Function,
        onInitialized: Function,
        onInitNewCard: Function,
        onOptionChanged: Function,
        onSelectionChanged: Function,
        pager: Object,
        paging: Object,
        remoteOperations: [Boolean, String, Object],
        rtlEnabled: Boolean,
        scrolling: Object,
        searchPanel: Object,
        selectedCardKeys: Array,
        selection: Object,
        sorting: Object,
        tabIndex: Number,
        toolbar: Object,
        visible: Boolean,
        width: [Number, String],
        wordWrapEnabled: Boolean
    },
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:accessKey": null,
        "update:activeStateEnabled": null,
        "update:allowColumnReordering": null,
        "update:cardContentTemplate": null,
        "update:cardCover": null,
        "update:cardFooterTemplate": null,
        "update:cardHeader": null,
        "update:cardMaxWidth": null,
        "update:cardMinWidth": null,
        "update:cardsPerRow": null,
        "update:cardTemplate": null,
        "update:columnChooser": null,
        "update:columns": null,
        "update:dataSource": null,
        "update:disabled": null,
        "update:editing": null,
        "update:elementAttr": null,
        "update:errorRowEnabled": null,
        "update:fieldHintEnabled": null,
        "update:filterBuilder": null,
        "update:filterBuilderPopup": null,
        "update:filterPanel": null,
        "update:filterValue": null,
        "update:focusStateEnabled": null,
        "update:headerFilter": null,
        "update:headerPanel": null,
        "update:height": null,
        "update:hint": null,
        "update:hoverStateEnabled": null,
        "update:keyExpr": null,
        "update:loadPanel": null,
        "update:noDataTemplate": null,
        "update:noDataText": null,
        "update:onCardClick": null,
        "update:onCardDblClick": null,
        "update:onCardHoverChanged": null,
        "update:onCardInserted": null,
        "update:onCardInserting": null,
        "update:onCardPrepared": null,
        "update:onCardRemoved": null,
        "update:onCardRemoving": null,
        "update:onCardSaved": null,
        "update:onCardSaving": null,
        "update:onCardUpdated": null,
        "update:onCardUpdating": null,
        "update:onContentReady": null,
        "update:onContextMenuPreparing": null,
        "update:onDataErrorOccurred": null,
        "update:onDisposing": null,
        "update:onEditCanceled": null,
        "update:onEditCanceling": null,
        "update:onEditingStart": null,
        "update:onFieldCaptionClick": null,
        "update:onFieldCaptionDblClick": null,
        "update:onFieldCaptionPrepared": null,
        "update:onFieldValueClick": null,
        "update:onFieldValueDblClick": null,
        "update:onFieldValuePrepared": null,
        "update:onFocusedCardChanged": null,
        "update:onInitialized": null,
        "update:onInitNewCard": null,
        "update:onOptionChanged": null,
        "update:onSelectionChanged": null,
        "update:pager": null,
        "update:paging": null,
        "update:remoteOperations": null,
        "update:rtlEnabled": null,
        "update:scrolling": null,
        "update:searchPanel": null,
        "update:selectedCardKeys": null,
        "update:selection": null,
        "update:sorting": null,
        "update:tabIndex": null,
        "update:toolbar": null,
        "update:visible": null,
        "update:width": null,
        "update:wordWrapEnabled": null,
    },
    computed: {
        instance() {
            return this.$_instance;
        }
    },
    beforeCreate() {
        this.$_WidgetClass = card_view_1.default;
        this.$_hasAsyncTemplate = true;
        this.$_expectedChildren = {
            cardCover: { isCollectionItem: false, optionName: "cardCover" },
            cardHeader: { isCollectionItem: false, optionName: "cardHeader" },
            cardViewHeaderFilter: { isCollectionItem: false, optionName: "headerFilter" },
            cardViewSelection: { isCollectionItem: false, optionName: "selection" },
            column: { isCollectionItem: true, optionName: "columns" },
            columnChooser: { isCollectionItem: false, optionName: "columnChooser" },
            editing: { isCollectionItem: false, optionName: "editing" },
            filterBuilder: { isCollectionItem: false, optionName: "filterBuilder" },
            filterPanel: { isCollectionItem: false, optionName: "filterPanel" },
            headerFilter: { isCollectionItem: false, optionName: "headerFilter" },
            headerPanel: { isCollectionItem: false, optionName: "headerPanel" },
            loadPanel: { isCollectionItem: false, optionName: "loadPanel" },
            pager: { isCollectionItem: false, optionName: "pager" },
            paging: { isCollectionItem: false, optionName: "paging" },
            remoteOperations: { isCollectionItem: false, optionName: "remoteOperations" },
            scrolling: { isCollectionItem: false, optionName: "scrolling" },
            searchPanel: { isCollectionItem: false, optionName: "searchPanel" },
            selection: { isCollectionItem: false, optionName: "selection" },
            sorting: { isCollectionItem: false, optionName: "sorting" },
            toolbar: { isCollectionItem: false, optionName: "toolbar" }
        };
    }
};
(0, index_1.prepareComponentConfig)(componentConfig);
const DxCardView = (0, vue_1.defineComponent)(componentConfig);
exports.DxCardView = DxCardView;
const DxAnimationConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:hide": null,
        "update:show": null,
    },
    props: {
        hide: [Object, Number, String],
        show: [Object, Number, String]
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxAnimationConfig);
const DxAnimation = (0, vue_1.defineComponent)(DxAnimationConfig);
exports.DxAnimation = DxAnimation;
DxAnimation.$_optionName = "animation";
DxAnimation.$_expectedChildren = {
    hide: { isCollectionItem: false, optionName: "hide" },
    show: { isCollectionItem: false, optionName: "show" }
};
const DxAsyncRuleConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:ignoreEmptyValue": null,
        "update:message": null,
        "update:reevaluate": null,
        "update:type": null,
        "update:validationCallback": null,
    },
    props: {
        ignoreEmptyValue: Boolean,
        message: String,
        reevaluate: Boolean,
        type: String,
        validationCallback: Function
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxAsyncRuleConfig);
const DxAsyncRule = (0, vue_1.defineComponent)(DxAsyncRuleConfig);
exports.DxAsyncRule = DxAsyncRule;
DxAsyncRule.$_optionName = "validationRules";
DxAsyncRule.$_isCollectionItem = true;
DxAsyncRule.$_predefinedProps = {
    type: "async"
};
const DxAtConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null,
    },
    props: {
        x: String,
        y: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxAtConfig);
const DxAt = (0, vue_1.defineComponent)(DxAtConfig);
exports.DxAt = DxAt;
DxAt.$_optionName = "at";
const DxBoundaryOffsetConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null,
    },
    props: {
        x: Number,
        y: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxBoundaryOffsetConfig);
const DxBoundaryOffset = (0, vue_1.defineComponent)(DxBoundaryOffsetConfig);
exports.DxBoundaryOffset = DxBoundaryOffset;
DxBoundaryOffset.$_optionName = "boundaryOffset";
const DxButtonItemConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:buttonOptions": null,
        "update:colSpan": null,
        "update:cssClass": null,
        "update:horizontalAlignment": null,
        "update:itemType": null,
        "update:name": null,
        "update:verticalAlignment": null,
        "update:visible": null,
        "update:visibleIndex": null,
    },
    props: {
        buttonOptions: Object,
        colSpan: Number,
        cssClass: String,
        horizontalAlignment: String,
        itemType: String,
        name: String,
        verticalAlignment: String,
        visible: Boolean,
        visibleIndex: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxButtonItemConfig);
const DxButtonItem = (0, vue_1.defineComponent)(DxButtonItemConfig);
exports.DxButtonItem = DxButtonItem;
DxButtonItem.$_optionName = "items";
DxButtonItem.$_isCollectionItem = true;
DxButtonItem.$_predefinedProps = {
    itemType: "button"
};
DxButtonItem.$_expectedChildren = {
    buttonOptions: { isCollectionItem: false, optionName: "buttonOptions" }
};
const DxButtonOptionsConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:accessKey": null,
        "update:activeStateEnabled": null,
        "update:bindingOptions": null,
        "update:disabled": null,
        "update:elementAttr": null,
        "update:focusStateEnabled": null,
        "update:height": null,
        "update:hint": null,
        "update:hoverStateEnabled": null,
        "update:icon": null,
        "update:onClick": null,
        "update:onContentReady": null,
        "update:onDisposing": null,
        "update:onInitialized": null,
        "update:onOptionChanged": null,
        "update:rtlEnabled": null,
        "update:stylingMode": null,
        "update:tabIndex": null,
        "update:template": null,
        "update:text": null,
        "update:type": null,
        "update:useSubmitBehavior": null,
        "update:validationGroup": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        accessKey: String,
        activeStateEnabled: Boolean,
        bindingOptions: Object,
        disabled: Boolean,
        elementAttr: Object,
        focusStateEnabled: Boolean,
        height: [Number, String],
        hint: String,
        hoverStateEnabled: Boolean,
        icon: String,
        onClick: Function,
        onContentReady: Function,
        onDisposing: Function,
        onInitialized: Function,
        onOptionChanged: Function,
        rtlEnabled: Boolean,
        stylingMode: String,
        tabIndex: Number,
        template: {},
        text: String,
        type: String,
        useSubmitBehavior: Boolean,
        validationGroup: String,
        visible: Boolean,
        width: [Number, String]
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxButtonOptionsConfig);
const DxButtonOptions = (0, vue_1.defineComponent)(DxButtonOptionsConfig);
exports.DxButtonOptions = DxButtonOptions;
DxButtonOptions.$_optionName = "buttonOptions";
const DxCardCoverConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:altExpr": null,
        "update:aspectRatio": null,
        "update:imageExpr": null,
        "update:maxHeight": null,
        "update:template": null,
    },
    props: {
        altExpr: [Function, String],
        aspectRatio: String,
        imageExpr: [Function, String],
        maxHeight: Number,
        template: {}
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxCardCoverConfig);
const DxCardCover = (0, vue_1.defineComponent)(DxCardCoverConfig);
exports.DxCardCover = DxCardCover;
DxCardCover.$_optionName = "cardCover";
const DxCardHeaderConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:items": null,
        "update:template": null,
        "update:visible": null,
    },
    props: {
        items: Array,
        template: {},
        visible: Boolean
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxCardHeaderConfig);
const DxCardHeader = (0, vue_1.defineComponent)(DxCardHeaderConfig);
exports.DxCardHeader = DxCardHeader;
DxCardHeader.$_optionName = "cardHeader";
DxCardHeader.$_expectedChildren = {
    cardHeaderItem: { isCollectionItem: true, optionName: "items" },
    item: { isCollectionItem: true, optionName: "items" }
};
const DxCardHeaderItemConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:cssClass": null,
        "update:disabled": null,
        "update:html": null,
        "update:locateInMenu": null,
        "update:location": null,
        "update:menuItemTemplate": null,
        "update:name": null,
        "update:options": null,
        "update:showText": null,
        "update:template": null,
        "update:text": null,
        "update:visible": null,
        "update:widget": null,
    },
    props: {
        cssClass: String,
        disabled: Boolean,
        html: String,
        locateInMenu: String,
        location: String,
        menuItemTemplate: {},
        name: String,
        options: {},
        showText: String,
        template: {},
        text: String,
        visible: Boolean,
        widget: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxCardHeaderItemConfig);
const DxCardHeaderItem = (0, vue_1.defineComponent)(DxCardHeaderItemConfig);
exports.DxCardHeaderItem = DxCardHeaderItem;
DxCardHeaderItem.$_optionName = "items";
DxCardHeaderItem.$_isCollectionItem = true;
const DxCardViewHeaderFilterConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowSearch": null,
        "update:allowSelectAll": null,
        "update:height": null,
        "update:search": null,
        "update:searchTimeout": null,
        "update:texts": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        allowSearch: Boolean,
        allowSelectAll: Boolean,
        height: [Number, String],
        search: Object,
        searchTimeout: Number,
        texts: Object,
        visible: Boolean,
        width: [Number, String]
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxCardViewHeaderFilterConfig);
const DxCardViewHeaderFilter = (0, vue_1.defineComponent)(DxCardViewHeaderFilterConfig);
exports.DxCardViewHeaderFilter = DxCardViewHeaderFilter;
DxCardViewHeaderFilter.$_optionName = "headerFilter";
DxCardViewHeaderFilter.$_expectedChildren = {
    cardViewHeaderFilterSearch: { isCollectionItem: false, optionName: "search" },
    cardViewHeaderFilterTexts: { isCollectionItem: false, optionName: "texts" },
    search: { isCollectionItem: false, optionName: "search" },
    texts: { isCollectionItem: false, optionName: "texts" }
};
const DxCardViewHeaderFilterSearchConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:editorOptions": null,
        "update:enabled": null,
        "update:mode": null,
        "update:timeout": null,
    },
    props: {
        editorOptions: {},
        enabled: Boolean,
        mode: String,
        timeout: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxCardViewHeaderFilterSearchConfig);
const DxCardViewHeaderFilterSearch = (0, vue_1.defineComponent)(DxCardViewHeaderFilterSearchConfig);
exports.DxCardViewHeaderFilterSearch = DxCardViewHeaderFilterSearch;
DxCardViewHeaderFilterSearch.$_optionName = "search";
const DxCardViewHeaderFilterTextsConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:cancel": null,
        "update:emptyValue": null,
        "update:ok": null,
    },
    props: {
        cancel: String,
        emptyValue: String,
        ok: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxCardViewHeaderFilterTextsConfig);
const DxCardViewHeaderFilterTexts = (0, vue_1.defineComponent)(DxCardViewHeaderFilterTextsConfig);
exports.DxCardViewHeaderFilterTexts = DxCardViewHeaderFilterTexts;
DxCardViewHeaderFilterTexts.$_optionName = "texts";
const DxCardViewSelectionConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowSelectAll": null,
        "update:mode": null,
        "update:selectAllMode": null,
        "update:showCheckBoxesMode": null,
    },
    props: {
        allowSelectAll: Boolean,
        mode: String,
        selectAllMode: String,
        showCheckBoxesMode: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxCardViewSelectionConfig);
const DxCardViewSelection = (0, vue_1.defineComponent)(DxCardViewSelectionConfig);
exports.DxCardViewSelection = DxCardViewSelection;
DxCardViewSelection.$_optionName = "selection";
const DxChangeConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:data": null,
        "update:insertAfterKey": null,
        "update:insertBeforeKey": null,
        "update:type": null,
    },
    props: {
        data: {},
        insertAfterKey: {},
        insertBeforeKey: {},
        type: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxChangeConfig);
const DxChange = (0, vue_1.defineComponent)(DxChangeConfig);
exports.DxChange = DxChange;
DxChange.$_optionName = "changes";
DxChange.$_isCollectionItem = true;
const DxColCountByScreenConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:lg": null,
        "update:md": null,
        "update:sm": null,
        "update:xs": null,
    },
    props: {
        lg: Number,
        md: Number,
        sm: Number,
        xs: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxColCountByScreenConfig);
const DxColCountByScreen = (0, vue_1.defineComponent)(DxColCountByScreenConfig);
exports.DxColCountByScreen = DxColCountByScreen;
DxColCountByScreen.$_optionName = "colCountByScreen";
const DxCollisionConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null,
    },
    props: {
        x: String,
        y: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxCollisionConfig);
const DxCollision = (0, vue_1.defineComponent)(DxCollisionConfig);
exports.DxCollision = DxCollision;
DxCollision.$_optionName = "collision";
const DxColumnConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:alignment": null,
        "update:allowEditing": null,
        "update:allowFiltering": null,
        "update:allowHeaderFiltering": null,
        "update:allowHiding": null,
        "update:allowReordering": null,
        "update:allowSearch": null,
        "update:allowSorting": null,
        "update:calculateDisplayValue": null,
        "update:calculateFieldValue": null,
        "update:calculateFilterExpression": null,
        "update:calculateSortValue": null,
        "update:caption": null,
        "update:customizeText": null,
        "update:dataField": null,
        "update:dataType": null,
        "update:editorOptions": null,
        "update:falseText": null,
        "update:fieldCaptionTemplate": null,
        "update:fieldTemplate": null,
        "update:fieldValueTemplate": null,
        "update:filterType": null,
        "update:filterValue": null,
        "update:filterValues": null,
        "update:format": null,
        "update:formItem": null,
        "update:headerFilter": null,
        "update:headerItemCssClass": null,
        "update:headerItemTemplate": null,
        "update:name": null,
        "update:setFieldValue": null,
        "update:showInColumnChooser": null,
        "update:sortIndex": null,
        "update:sortingMethod": null,
        "update:sortOrder": null,
        "update:trueText": null,
        "update:validationRules": null,
        "update:visible": null,
        "update:visibleIndex": null,
    },
    props: {
        alignment: String,
        allowEditing: Boolean,
        allowFiltering: Boolean,
        allowHeaderFiltering: Boolean,
        allowHiding: Boolean,
        allowReordering: Boolean,
        allowSearch: Boolean,
        allowSorting: Boolean,
        calculateDisplayValue: Function,
        calculateFieldValue: Function,
        calculateFilterExpression: Function,
        calculateSortValue: [Function, String],
        caption: String,
        customizeText: Function,
        dataField: String,
        dataType: String,
        editorOptions: {},
        falseText: String,
        fieldCaptionTemplate: {},
        fieldTemplate: {},
        fieldValueTemplate: {},
        filterType: String,
        filterValue: {},
        filterValues: Array,
        format: [Object, String, Function],
        formItem: Object,
        headerFilter: Object,
        headerItemCssClass: String,
        headerItemTemplate: {},
        name: String,
        setFieldValue: Function,
        showInColumnChooser: Boolean,
        sortIndex: Number,
        sortingMethod: Function,
        sortOrder: String,
        trueText: String,
        validationRules: Array,
        visible: Boolean,
        visibleIndex: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxColumnConfig);
const DxColumn = (0, vue_1.defineComponent)(DxColumnConfig);
exports.DxColumn = DxColumn;
DxColumn.$_optionName = "columns";
DxColumn.$_isCollectionItem = true;
DxColumn.$_expectedChildren = {
    AsyncRule: { isCollectionItem: true, optionName: "validationRules" },
    columnHeaderFilter: { isCollectionItem: false, optionName: "headerFilter" },
    CompareRule: { isCollectionItem: true, optionName: "validationRules" },
    CustomRule: { isCollectionItem: true, optionName: "validationRules" },
    EmailRule: { isCollectionItem: true, optionName: "validationRules" },
    format: { isCollectionItem: false, optionName: "format" },
    formItem: { isCollectionItem: false, optionName: "formItem" },
    headerFilter: { isCollectionItem: false, optionName: "headerFilter" },
    NumericRule: { isCollectionItem: true, optionName: "validationRules" },
    PatternRule: { isCollectionItem: true, optionName: "validationRules" },
    RangeRule: { isCollectionItem: true, optionName: "validationRules" },
    RequiredRule: { isCollectionItem: true, optionName: "validationRules" },
    StringLengthRule: { isCollectionItem: true, optionName: "validationRules" },
    validationRule: { isCollectionItem: true, optionName: "validationRules" }
};
const DxColumnChooserConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowSearch": null,
        "update:container": null,
        "update:emptyPanelText": null,
        "update:enabled": null,
        "update:height": null,
        "update:mode": null,
        "update:position": null,
        "update:search": null,
        "update:searchTimeout": null,
        "update:selection": null,
        "update:sortOrder": null,
        "update:title": null,
        "update:width": null,
    },
    props: {
        allowSearch: Boolean,
        container: {},
        emptyPanelText: String,
        enabled: Boolean,
        height: [Number, String],
        mode: String,
        position: Object,
        search: Object,
        searchTimeout: Number,
        selection: Object,
        sortOrder: String,
        title: String,
        width: [Number, String]
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxColumnChooserConfig);
const DxColumnChooser = (0, vue_1.defineComponent)(DxColumnChooserConfig);
exports.DxColumnChooser = DxColumnChooser;
DxColumnChooser.$_optionName = "columnChooser";
DxColumnChooser.$_expectedChildren = {
    columnChooserSearch: { isCollectionItem: false, optionName: "search" },
    columnChooserSelection: { isCollectionItem: false, optionName: "selection" },
    position: { isCollectionItem: false, optionName: "position" },
    search: { isCollectionItem: false, optionName: "search" },
    selection: { isCollectionItem: false, optionName: "selection" }
};
const DxColumnChooserSearchConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:editorOptions": null,
        "update:enabled": null,
        "update:timeout": null,
    },
    props: {
        editorOptions: {},
        enabled: Boolean,
        timeout: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxColumnChooserSearchConfig);
const DxColumnChooserSearch = (0, vue_1.defineComponent)(DxColumnChooserSearchConfig);
exports.DxColumnChooserSearch = DxColumnChooserSearch;
DxColumnChooserSearch.$_optionName = "search";
const DxColumnChooserSelectionConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowSelectAll": null,
        "update:recursive": null,
        "update:selectByClick": null,
    },
    props: {
        allowSelectAll: Boolean,
        recursive: Boolean,
        selectByClick: Boolean
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxColumnChooserSelectionConfig);
const DxColumnChooserSelection = (0, vue_1.defineComponent)(DxColumnChooserSelectionConfig);
exports.DxColumnChooserSelection = DxColumnChooserSelection;
DxColumnChooserSelection.$_optionName = "selection";
const DxColumnHeaderFilterConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowSearch": null,
        "update:allowSelectAll": null,
        "update:dataSource": null,
        "update:groupInterval": null,
        "update:height": null,
        "update:search": null,
        "update:searchMode": null,
        "update:width": null,
    },
    props: {
        allowSearch: Boolean,
        allowSelectAll: Boolean,
        dataSource: [Array, Object, Function],
        groupInterval: [String, Number],
        height: [Number, String],
        search: Object,
        searchMode: String,
        width: [Number, String]
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxColumnHeaderFilterConfig);
const DxColumnHeaderFilter = (0, vue_1.defineComponent)(DxColumnHeaderFilterConfig);
exports.DxColumnHeaderFilter = DxColumnHeaderFilter;
DxColumnHeaderFilter.$_optionName = "headerFilter";
DxColumnHeaderFilter.$_expectedChildren = {
    columnHeaderFilterSearch: { isCollectionItem: false, optionName: "search" },
    search: { isCollectionItem: false, optionName: "search" }
};
const DxColumnHeaderFilterSearchConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:editorOptions": null,
        "update:enabled": null,
        "update:mode": null,
        "update:searchExpr": null,
        "update:timeout": null,
    },
    props: {
        editorOptions: {},
        enabled: Boolean,
        mode: String,
        searchExpr: [Array, Function, String],
        timeout: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxColumnHeaderFilterSearchConfig);
const DxColumnHeaderFilterSearch = (0, vue_1.defineComponent)(DxColumnHeaderFilterSearchConfig);
exports.DxColumnHeaderFilterSearch = DxColumnHeaderFilterSearch;
DxColumnHeaderFilterSearch.$_optionName = "search";
const DxCompareRuleConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:comparisonTarget": null,
        "update:comparisonType": null,
        "update:ignoreEmptyValue": null,
        "update:message": null,
        "update:type": null,
    },
    props: {
        comparisonTarget: Function,
        comparisonType: String,
        ignoreEmptyValue: Boolean,
        message: String,
        type: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxCompareRuleConfig);
const DxCompareRule = (0, vue_1.defineComponent)(DxCompareRuleConfig);
exports.DxCompareRule = DxCompareRule;
DxCompareRule.$_optionName = "validationRules";
DxCompareRule.$_isCollectionItem = true;
DxCompareRule.$_predefinedProps = {
    type: "compare"
};
const DxCustomOperationConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:calculateFilterExpression": null,
        "update:caption": null,
        "update:customizeText": null,
        "update:dataTypes": null,
        "update:editorTemplate": null,
        "update:hasValue": null,
        "update:icon": null,
        "update:name": null,
    },
    props: {
        calculateFilterExpression: Function,
        caption: String,
        customizeText: Function,
        dataTypes: Array,
        editorTemplate: {},
        hasValue: Boolean,
        icon: String,
        name: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxCustomOperationConfig);
const DxCustomOperation = (0, vue_1.defineComponent)(DxCustomOperationConfig);
exports.DxCustomOperation = DxCustomOperation;
DxCustomOperation.$_optionName = "customOperations";
DxCustomOperation.$_isCollectionItem = true;
const DxCustomRuleConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:ignoreEmptyValue": null,
        "update:message": null,
        "update:reevaluate": null,
        "update:type": null,
        "update:validationCallback": null,
    },
    props: {
        ignoreEmptyValue: Boolean,
        message: String,
        reevaluate: Boolean,
        type: String,
        validationCallback: Function
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxCustomRuleConfig);
const DxCustomRule = (0, vue_1.defineComponent)(DxCustomRuleConfig);
exports.DxCustomRule = DxCustomRule;
DxCustomRule.$_optionName = "validationRules";
DxCustomRule.$_isCollectionItem = true;
DxCustomRule.$_predefinedProps = {
    type: "custom"
};
const DxDraggingConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:dropFeedbackMode": null,
        "update:onDragChange": null,
        "update:onDragEnd": null,
        "update:onDragMove": null,
        "update:onDragStart": null,
        "update:onRemove": null,
        "update:onReorder": null,
        "update:scrollSensitivity": null,
        "update:scrollSpeed": null,
    },
    props: {
        dropFeedbackMode: String,
        onDragChange: Function,
        onDragEnd: Function,
        onDragMove: Function,
        onDragStart: Function,
        onRemove: Function,
        onReorder: Function,
        scrollSensitivity: Number,
        scrollSpeed: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxDraggingConfig);
const DxDragging = (0, vue_1.defineComponent)(DxDraggingConfig);
exports.DxDragging = DxDragging;
DxDragging.$_optionName = "dragging";
const DxEditingConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowAdding": null,
        "update:allowDeleting": null,
        "update:allowUpdating": null,
        "update:changes": null,
        "update:confirmDelete": null,
        "update:editCardKey": null,
        "update:form": null,
        "update:popup": null,
        "update:texts": null,
    },
    props: {
        allowAdding: Boolean,
        allowDeleting: Boolean,
        allowUpdating: Boolean,
        changes: Array,
        confirmDelete: Boolean,
        editCardKey: {},
        form: Object,
        popup: Object,
        texts: Object
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxEditingConfig);
const DxEditing = (0, vue_1.defineComponent)(DxEditingConfig);
exports.DxEditing = DxEditing;
DxEditing.$_optionName = "editing";
DxEditing.$_expectedChildren = {
    change: { isCollectionItem: true, optionName: "changes" },
    editingTexts: { isCollectionItem: false, optionName: "texts" },
    form: { isCollectionItem: false, optionName: "form" },
    texts: { isCollectionItem: false, optionName: "texts" }
};
const DxEditingTextsConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:addCard": null,
        "update:confirmDeleteMessage": null,
        "update:confirmDeleteTitle": null,
        "update:deleteCard": null,
        "update:editCard": null,
        "update:saveCard": null,
    },
    props: {
        addCard: String,
        confirmDeleteMessage: String,
        confirmDeleteTitle: String,
        deleteCard: String,
        editCard: String,
        saveCard: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxEditingTextsConfig);
const DxEditingTexts = (0, vue_1.defineComponent)(DxEditingTextsConfig);
exports.DxEditingTexts = DxEditingTexts;
DxEditingTexts.$_optionName = "texts";
const DxEmailRuleConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:ignoreEmptyValue": null,
        "update:message": null,
        "update:type": null,
    },
    props: {
        ignoreEmptyValue: Boolean,
        message: String,
        type: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxEmailRuleConfig);
const DxEmailRule = (0, vue_1.defineComponent)(DxEmailRuleConfig);
exports.DxEmailRule = DxEmailRule;
DxEmailRule.$_optionName = "validationRules";
DxEmailRule.$_isCollectionItem = true;
DxEmailRule.$_predefinedProps = {
    type: "email"
};
const DxEmptyItemConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:colSpan": null,
        "update:cssClass": null,
        "update:itemType": null,
        "update:name": null,
        "update:visible": null,
        "update:visibleIndex": null,
    },
    props: {
        colSpan: Number,
        cssClass: String,
        itemType: String,
        name: String,
        visible: Boolean,
        visibleIndex: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxEmptyItemConfig);
const DxEmptyItem = (0, vue_1.defineComponent)(DxEmptyItemConfig);
exports.DxEmptyItem = DxEmptyItem;
DxEmptyItem.$_optionName = "items";
DxEmptyItem.$_isCollectionItem = true;
DxEmptyItem.$_predefinedProps = {
    itemType: "empty"
};
const DxFieldConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:calculateFilterExpression": null,
        "update:caption": null,
        "update:customizeText": null,
        "update:dataField": null,
        "update:dataType": null,
        "update:editorOptions": null,
        "update:editorTemplate": null,
        "update:falseText": null,
        "update:filterOperations": null,
        "update:format": null,
        "update:lookup": null,
        "update:name": null,
        "update:trueText": null,
    },
    props: {
        calculateFilterExpression: Function,
        caption: String,
        customizeText: Function,
        dataField: String,
        dataType: String,
        editorOptions: {},
        editorTemplate: {},
        falseText: String,
        filterOperations: Array,
        format: [Object, String, Function],
        lookup: Object,
        name: String,
        trueText: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxFieldConfig);
const DxField = (0, vue_1.defineComponent)(DxFieldConfig);
exports.DxField = DxField;
DxField.$_optionName = "fields";
DxField.$_isCollectionItem = true;
DxField.$_expectedChildren = {
    format: { isCollectionItem: false, optionName: "format" },
    lookup: { isCollectionItem: false, optionName: "lookup" }
};
const DxFilterBuilderConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:accessKey": null,
        "update:activeStateEnabled": null,
        "update:allowHierarchicalFields": null,
        "update:bindingOptions": null,
        "update:customOperations": null,
        "update:disabled": null,
        "update:elementAttr": null,
        "update:fields": null,
        "update:filterOperationDescriptions": null,
        "update:focusStateEnabled": null,
        "update:groupOperationDescriptions": null,
        "update:groupOperations": null,
        "update:height": null,
        "update:hint": null,
        "update:hoverStateEnabled": null,
        "update:maxGroupLevel": null,
        "update:onContentReady": null,
        "update:onDisposing": null,
        "update:onEditorPrepared": null,
        "update:onEditorPreparing": null,
        "update:onInitialized": null,
        "update:onOptionChanged": null,
        "update:onValueChanged": null,
        "update:rtlEnabled": null,
        "update:tabIndex": null,
        "update:value": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        accessKey: String,
        activeStateEnabled: Boolean,
        allowHierarchicalFields: Boolean,
        bindingOptions: Object,
        customOperations: Array,
        disabled: Boolean,
        elementAttr: Object,
        fields: Array,
        filterOperationDescriptions: Object,
        focusStateEnabled: Boolean,
        groupOperationDescriptions: Object,
        groupOperations: Array,
        height: [Number, String],
        hint: String,
        hoverStateEnabled: Boolean,
        maxGroupLevel: Number,
        onContentReady: Function,
        onDisposing: Function,
        onEditorPrepared: Function,
        onEditorPreparing: Function,
        onInitialized: Function,
        onOptionChanged: Function,
        onValueChanged: Function,
        rtlEnabled: Boolean,
        tabIndex: Number,
        value: [Array, Function, String],
        visible: Boolean,
        width: [Number, String]
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxFilterBuilderConfig);
const DxFilterBuilder = (0, vue_1.defineComponent)(DxFilterBuilderConfig);
exports.DxFilterBuilder = DxFilterBuilder;
DxFilterBuilder.$_optionName = "filterBuilder";
DxFilterBuilder.$_expectedChildren = {
    customOperation: { isCollectionItem: true, optionName: "customOperations" },
    field: { isCollectionItem: true, optionName: "fields" },
    filterOperationDescriptions: { isCollectionItem: false, optionName: "filterOperationDescriptions" },
    groupOperationDescriptions: { isCollectionItem: false, optionName: "groupOperationDescriptions" }
};
const DxFilterOperationDescriptionsConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:between": null,
        "update:contains": null,
        "update:endsWith": null,
        "update:equal": null,
        "update:greaterThan": null,
        "update:greaterThanOrEqual": null,
        "update:isBlank": null,
        "update:isNotBlank": null,
        "update:lessThan": null,
        "update:lessThanOrEqual": null,
        "update:notContains": null,
        "update:notEqual": null,
        "update:startsWith": null,
    },
    props: {
        between: String,
        contains: String,
        endsWith: String,
        equal: String,
        greaterThan: String,
        greaterThanOrEqual: String,
        isBlank: String,
        isNotBlank: String,
        lessThan: String,
        lessThanOrEqual: String,
        notContains: String,
        notEqual: String,
        startsWith: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxFilterOperationDescriptionsConfig);
const DxFilterOperationDescriptions = (0, vue_1.defineComponent)(DxFilterOperationDescriptionsConfig);
exports.DxFilterOperationDescriptions = DxFilterOperationDescriptions;
DxFilterOperationDescriptions.$_optionName = "filterOperationDescriptions";
const DxFilterPanelConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:customizeText": null,
        "update:filterEnabled": null,
        "update:texts": null,
        "update:visible": null,
    },
    props: {
        customizeText: Function,
        filterEnabled: Boolean,
        texts: Object,
        visible: Boolean
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxFilterPanelConfig);
const DxFilterPanel = (0, vue_1.defineComponent)(DxFilterPanelConfig);
exports.DxFilterPanel = DxFilterPanel;
DxFilterPanel.$_optionName = "filterPanel";
DxFilterPanel.$_expectedChildren = {
    filterPanelTexts: { isCollectionItem: false, optionName: "texts" },
    texts: { isCollectionItem: false, optionName: "texts" }
};
const DxFilterPanelTextsConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:clearFilter": null,
        "update:createFilter": null,
        "update:filterEnabledHint": null,
    },
    props: {
        clearFilter: String,
        createFilter: String,
        filterEnabledHint: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxFilterPanelTextsConfig);
const DxFilterPanelTexts = (0, vue_1.defineComponent)(DxFilterPanelTextsConfig);
exports.DxFilterPanelTexts = DxFilterPanelTexts;
DxFilterPanelTexts.$_optionName = "texts";
const DxFormConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:accessKey": null,
        "update:activeStateEnabled": null,
        "update:alignItemLabels": null,
        "update:alignItemLabelsInAllGroups": null,
        "update:bindingOptions": null,
        "update:colCount": null,
        "update:colCountByScreen": null,
        "update:customizeItem": null,
        "update:disabled": null,
        "update:elementAttr": null,
        "update:focusStateEnabled": null,
        "update:formData": null,
        "update:height": null,
        "update:hint": null,
        "update:hoverStateEnabled": null,
        "update:isDirty": null,
        "update:items": null,
        "update:labelLocation": null,
        "update:labelMode": null,
        "update:minColWidth": null,
        "update:onContentReady": null,
        "update:onDisposing": null,
        "update:onEditorEnterKey": null,
        "update:onFieldDataChanged": null,
        "update:onInitialized": null,
        "update:onOptionChanged": null,
        "update:optionalMark": null,
        "update:readOnly": null,
        "update:requiredMark": null,
        "update:requiredMessage": null,
        "update:rtlEnabled": null,
        "update:screenByWidth": null,
        "update:scrollingEnabled": null,
        "update:showColonAfterLabel": null,
        "update:showOptionalMark": null,
        "update:showRequiredMark": null,
        "update:showValidationSummary": null,
        "update:tabIndex": null,
        "update:validationGroup": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        accessKey: String,
        activeStateEnabled: Boolean,
        alignItemLabels: Boolean,
        alignItemLabelsInAllGroups: Boolean,
        bindingOptions: Object,
        colCount: [String, Number],
        colCountByScreen: Object,
        customizeItem: Function,
        disabled: Boolean,
        elementAttr: Object,
        focusStateEnabled: Boolean,
        formData: {},
        height: [Number, String],
        hint: String,
        hoverStateEnabled: Boolean,
        isDirty: Boolean,
        items: Array,
        labelLocation: String,
        labelMode: String,
        minColWidth: Number,
        onContentReady: Function,
        onDisposing: Function,
        onEditorEnterKey: Function,
        onFieldDataChanged: Function,
        onInitialized: Function,
        onOptionChanged: Function,
        optionalMark: String,
        readOnly: Boolean,
        requiredMark: String,
        requiredMessage: String,
        rtlEnabled: Boolean,
        screenByWidth: Function,
        scrollingEnabled: Boolean,
        showColonAfterLabel: Boolean,
        showOptionalMark: Boolean,
        showRequiredMark: Boolean,
        showValidationSummary: Boolean,
        tabIndex: Number,
        validationGroup: String,
        visible: Boolean,
        width: [Number, String]
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxFormConfig);
const DxForm = (0, vue_1.defineComponent)(DxFormConfig);
exports.DxForm = DxForm;
DxForm.$_optionName = "form";
DxForm.$_expectedChildren = {
    ButtonItem: { isCollectionItem: true, optionName: "items" },
    colCountByScreen: { isCollectionItem: false, optionName: "colCountByScreen" },
    EmptyItem: { isCollectionItem: true, optionName: "items" },
    GroupItem: { isCollectionItem: true, optionName: "items" },
    item: { isCollectionItem: true, optionName: "items" },
    SimpleItem: { isCollectionItem: true, optionName: "items" },
    TabbedItem: { isCollectionItem: true, optionName: "items" }
};
const DxFormatConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:currency": null,
        "update:formatter": null,
        "update:parser": null,
        "update:precision": null,
        "update:type": null,
        "update:useCurrencyAccountingStyle": null,
    },
    props: {
        currency: String,
        formatter: Function,
        parser: Function,
        precision: Number,
        type: String,
        useCurrencyAccountingStyle: Boolean
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxFormatConfig);
const DxFormat = (0, vue_1.defineComponent)(DxFormatConfig);
exports.DxFormat = DxFormat;
DxFormat.$_optionName = "format";
const DxFormItemConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:colSpan": null,
        "update:cssClass": null,
        "update:dataField": null,
        "update:editorOptions": null,
        "update:editorType": null,
        "update:helpText": null,
        "update:isRequired": null,
        "update:itemType": null,
        "update:label": null,
        "update:name": null,
        "update:template": null,
        "update:validationRules": null,
        "update:visible": null,
        "update:visibleIndex": null,
    },
    props: {
        colSpan: Number,
        cssClass: String,
        dataField: String,
        editorOptions: {},
        editorType: String,
        helpText: String,
        isRequired: Boolean,
        itemType: String,
        label: Object,
        name: String,
        template: {},
        validationRules: Array,
        visible: Boolean,
        visibleIndex: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxFormItemConfig);
const DxFormItem = (0, vue_1.defineComponent)(DxFormItemConfig);
exports.DxFormItem = DxFormItem;
DxFormItem.$_optionName = "formItem";
DxFormItem.$_expectedChildren = {
    AsyncRule: { isCollectionItem: true, optionName: "validationRules" },
    CompareRule: { isCollectionItem: true, optionName: "validationRules" },
    CustomRule: { isCollectionItem: true, optionName: "validationRules" },
    EmailRule: { isCollectionItem: true, optionName: "validationRules" },
    label: { isCollectionItem: false, optionName: "label" },
    NumericRule: { isCollectionItem: true, optionName: "validationRules" },
    PatternRule: { isCollectionItem: true, optionName: "validationRules" },
    RangeRule: { isCollectionItem: true, optionName: "validationRules" },
    RequiredRule: { isCollectionItem: true, optionName: "validationRules" },
    StringLengthRule: { isCollectionItem: true, optionName: "validationRules" },
    validationRule: { isCollectionItem: true, optionName: "validationRules" }
};
const DxFromConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:left": null,
        "update:opacity": null,
        "update:position": null,
        "update:scale": null,
        "update:top": null,
    },
    props: {
        left: Number,
        opacity: Number,
        position: Object,
        scale: Number,
        top: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxFromConfig);
const DxFrom = (0, vue_1.defineComponent)(DxFromConfig);
exports.DxFrom = DxFrom;
DxFrom.$_optionName = "from";
DxFrom.$_expectedChildren = {
    position: { isCollectionItem: false, optionName: "position" }
};
const DxGroupItemConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:alignItemLabels": null,
        "update:caption": null,
        "update:captionTemplate": null,
        "update:colCount": null,
        "update:colCountByScreen": null,
        "update:colSpan": null,
        "update:cssClass": null,
        "update:items": null,
        "update:itemType": null,
        "update:name": null,
        "update:template": null,
        "update:visible": null,
        "update:visibleIndex": null,
    },
    props: {
        alignItemLabels: Boolean,
        caption: String,
        captionTemplate: {},
        colCount: Number,
        colCountByScreen: Object,
        colSpan: Number,
        cssClass: String,
        items: Array,
        itemType: String,
        name: String,
        template: {},
        visible: Boolean,
        visibleIndex: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxGroupItemConfig);
const DxGroupItem = (0, vue_1.defineComponent)(DxGroupItemConfig);
exports.DxGroupItem = DxGroupItem;
DxGroupItem.$_optionName = "items";
DxGroupItem.$_isCollectionItem = true;
DxGroupItem.$_predefinedProps = {
    itemType: "group"
};
DxGroupItem.$_expectedChildren = {
    colCountByScreen: { isCollectionItem: false, optionName: "colCountByScreen" }
};
const DxGroupOperationDescriptionsConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:and": null,
        "update:notAnd": null,
        "update:notOr": null,
        "update:or": null,
    },
    props: {
        and: String,
        notAnd: String,
        notOr: String,
        or: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxGroupOperationDescriptionsConfig);
const DxGroupOperationDescriptions = (0, vue_1.defineComponent)(DxGroupOperationDescriptionsConfig);
exports.DxGroupOperationDescriptions = DxGroupOperationDescriptions;
DxGroupOperationDescriptions.$_optionName = "groupOperationDescriptions";
const DxHeaderFilterConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowSearch": null,
        "update:allowSelectAll": null,
        "update:dataSource": null,
        "update:groupInterval": null,
        "update:height": null,
        "update:search": null,
        "update:searchMode": null,
        "update:searchTimeout": null,
        "update:texts": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        allowSearch: Boolean,
        allowSelectAll: Boolean,
        dataSource: [Array, Object, Function],
        groupInterval: [String, Number],
        height: [Number, String],
        search: Object,
        searchMode: String,
        searchTimeout: Number,
        texts: Object,
        visible: Boolean,
        width: [Number, String]
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxHeaderFilterConfig);
const DxHeaderFilter = (0, vue_1.defineComponent)(DxHeaderFilterConfig);
exports.DxHeaderFilter = DxHeaderFilter;
DxHeaderFilter.$_optionName = "headerFilter";
DxHeaderFilter.$_expectedChildren = {
    cardViewHeaderFilterSearch: { isCollectionItem: false, optionName: "search" },
    cardViewHeaderFilterTexts: { isCollectionItem: false, optionName: "texts" },
    columnHeaderFilterSearch: { isCollectionItem: false, optionName: "search" },
    search: { isCollectionItem: false, optionName: "search" }
};
const DxHeaderPanelConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:dragging": null,
        "update:itemCssClass": null,
        "update:itemTemplate": null,
        "update:visible": null,
    },
    props: {
        dragging: Object,
        itemCssClass: String,
        itemTemplate: {},
        visible: Boolean
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxHeaderPanelConfig);
const DxHeaderPanel = (0, vue_1.defineComponent)(DxHeaderPanelConfig);
exports.DxHeaderPanel = DxHeaderPanel;
DxHeaderPanel.$_optionName = "headerPanel";
DxHeaderPanel.$_expectedChildren = {
    dragging: { isCollectionItem: false, optionName: "dragging" }
};
const DxHideConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:complete": null,
        "update:delay": null,
        "update:direction": null,
        "update:duration": null,
        "update:easing": null,
        "update:from": null,
        "update:staggerDelay": null,
        "update:start": null,
        "update:to": null,
        "update:type": null,
    },
    props: {
        complete: Function,
        delay: Number,
        direction: String,
        duration: Number,
        easing: String,
        from: Object,
        staggerDelay: Number,
        start: Function,
        to: Object,
        type: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxHideConfig);
const DxHide = (0, vue_1.defineComponent)(DxHideConfig);
exports.DxHide = DxHide;
DxHide.$_optionName = "hide";
DxHide.$_expectedChildren = {
    from: { isCollectionItem: false, optionName: "from" },
    to: { isCollectionItem: false, optionName: "to" }
};
const DxItemConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:alignItemLabels": null,
        "update:badge": null,
        "update:buttonOptions": null,
        "update:caption": null,
        "update:captionTemplate": null,
        "update:colCount": null,
        "update:colCountByScreen": null,
        "update:colSpan": null,
        "update:cssClass": null,
        "update:dataField": null,
        "update:disabled": null,
        "update:editorOptions": null,
        "update:editorType": null,
        "update:helpText": null,
        "update:horizontalAlignment": null,
        "update:html": null,
        "update:icon": null,
        "update:isRequired": null,
        "update:items": null,
        "update:itemType": null,
        "update:label": null,
        "update:locateInMenu": null,
        "update:location": null,
        "update:menuItemTemplate": null,
        "update:name": null,
        "update:options": null,
        "update:showText": null,
        "update:tabPanelOptions": null,
        "update:tabs": null,
        "update:tabTemplate": null,
        "update:template": null,
        "update:text": null,
        "update:title": null,
        "update:validationRules": null,
        "update:verticalAlignment": null,
        "update:visible": null,
        "update:visibleIndex": null,
        "update:widget": null,
    },
    props: {
        alignItemLabels: Boolean,
        badge: String,
        buttonOptions: Object,
        caption: String,
        captionTemplate: {},
        colCount: Number,
        colCountByScreen: Object,
        colSpan: Number,
        cssClass: String,
        dataField: String,
        disabled: Boolean,
        editorOptions: {},
        editorType: String,
        helpText: String,
        horizontalAlignment: String,
        html: String,
        icon: String,
        isRequired: Boolean,
        items: Array,
        itemType: String,
        label: Object,
        locateInMenu: String,
        location: String,
        menuItemTemplate: {},
        name: String,
        options: {},
        showText: String,
        tabPanelOptions: Object,
        tabs: Array,
        tabTemplate: {},
        template: {},
        text: String,
        title: String,
        validationRules: Array,
        verticalAlignment: String,
        visible: Boolean,
        visibleIndex: Number,
        widget: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxItemConfig);
const DxItem = (0, vue_1.defineComponent)(DxItemConfig);
exports.DxItem = DxItem;
DxItem.$_optionName = "items";
DxItem.$_isCollectionItem = true;
DxItem.$_expectedChildren = {
    AsyncRule: { isCollectionItem: true, optionName: "validationRules" },
    buttonOptions: { isCollectionItem: false, optionName: "buttonOptions" },
    colCountByScreen: { isCollectionItem: false, optionName: "colCountByScreen" },
    CompareRule: { isCollectionItem: true, optionName: "validationRules" },
    CustomRule: { isCollectionItem: true, optionName: "validationRules" },
    EmailRule: { isCollectionItem: true, optionName: "validationRules" },
    label: { isCollectionItem: false, optionName: "label" },
    NumericRule: { isCollectionItem: true, optionName: "validationRules" },
    PatternRule: { isCollectionItem: true, optionName: "validationRules" },
    RangeRule: { isCollectionItem: true, optionName: "validationRules" },
    RequiredRule: { isCollectionItem: true, optionName: "validationRules" },
    StringLengthRule: { isCollectionItem: true, optionName: "validationRules" },
    tab: { isCollectionItem: true, optionName: "tabs" },
    tabPanelOptions: { isCollectionItem: false, optionName: "tabPanelOptions" },
    validationRule: { isCollectionItem: true, optionName: "validationRules" }
};
const DxLabelConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:alignment": null,
        "update:location": null,
        "update:showColon": null,
        "update:template": null,
        "update:text": null,
        "update:visible": null,
    },
    props: {
        alignment: String,
        location: String,
        showColon: Boolean,
        template: {},
        text: String,
        visible: Boolean
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxLabelConfig);
const DxLabel = (0, vue_1.defineComponent)(DxLabelConfig);
exports.DxLabel = DxLabel;
DxLabel.$_optionName = "label";
const DxLoadPanelConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:animation": null,
        "update:bindingOptions": null,
        "update:container": null,
        "update:deferRendering": null,
        "update:delay": null,
        "update:focusStateEnabled": null,
        "update:height": null,
        "update:hideOnOutsideClick": null,
        "update:hideOnParentScroll": null,
        "update:hint": null,
        "update:hoverStateEnabled": null,
        "update:indicatorSrc": null,
        "update:maxHeight": null,
        "update:maxWidth": null,
        "update:message": null,
        "update:minHeight": null,
        "update:minWidth": null,
        "update:onContentReady": null,
        "update:onDisposing": null,
        "update:onHidden": null,
        "update:onHiding": null,
        "update:onInitialized": null,
        "update:onOptionChanged": null,
        "update:onShowing": null,
        "update:onShown": null,
        "update:position": null,
        "update:rtlEnabled": null,
        "update:shading": null,
        "update:shadingColor": null,
        "update:showIndicator": null,
        "update:showPane": null,
        "update:visible": null,
        "update:width": null,
        "update:wrapperAttr": null,
    },
    props: {
        animation: Object,
        bindingOptions: Object,
        container: {},
        deferRendering: Boolean,
        delay: Number,
        focusStateEnabled: Boolean,
        height: [Number, String],
        hideOnOutsideClick: [Boolean, Function],
        hideOnParentScroll: Boolean,
        hint: String,
        hoverStateEnabled: Boolean,
        indicatorSrc: String,
        maxHeight: [Number, String],
        maxWidth: [Number, String],
        message: String,
        minHeight: [Number, String],
        minWidth: [Number, String],
        onContentReady: Function,
        onDisposing: Function,
        onHidden: Function,
        onHiding: Function,
        onInitialized: Function,
        onOptionChanged: Function,
        onShowing: Function,
        onShown: Function,
        position: [Function, String, Object],
        rtlEnabled: Boolean,
        shading: Boolean,
        shadingColor: String,
        showIndicator: Boolean,
        showPane: Boolean,
        visible: Boolean,
        width: [Number, String],
        wrapperAttr: {}
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxLoadPanelConfig);
const DxLoadPanel = (0, vue_1.defineComponent)(DxLoadPanelConfig);
exports.DxLoadPanel = DxLoadPanel;
DxLoadPanel.$_optionName = "loadPanel";
DxLoadPanel.$_expectedChildren = {
    animation: { isCollectionItem: false, optionName: "animation" },
    position: { isCollectionItem: false, optionName: "position" }
};
const DxLookupConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowClearing": null,
        "update:dataSource": null,
        "update:displayExpr": null,
        "update:valueExpr": null,
    },
    props: {
        allowClearing: Boolean,
        dataSource: [Array, Object],
        displayExpr: [Function, String],
        valueExpr: [Function, String]
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxLookupConfig);
const DxLookup = (0, vue_1.defineComponent)(DxLookupConfig);
exports.DxLookup = DxLookup;
DxLookup.$_optionName = "lookup";
const DxMyConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null,
    },
    props: {
        x: String,
        y: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxMyConfig);
const DxMy = (0, vue_1.defineComponent)(DxMyConfig);
exports.DxMy = DxMy;
DxMy.$_optionName = "my";
const DxNumericRuleConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:ignoreEmptyValue": null,
        "update:message": null,
        "update:type": null,
    },
    props: {
        ignoreEmptyValue: Boolean,
        message: String,
        type: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxNumericRuleConfig);
const DxNumericRule = (0, vue_1.defineComponent)(DxNumericRuleConfig);
exports.DxNumericRule = DxNumericRule;
DxNumericRule.$_optionName = "validationRules";
DxNumericRule.$_isCollectionItem = true;
DxNumericRule.$_predefinedProps = {
    type: "numeric"
};
const DxOffsetConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null,
    },
    props: {
        x: Number,
        y: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxOffsetConfig);
const DxOffset = (0, vue_1.defineComponent)(DxOffsetConfig);
exports.DxOffset = DxOffset;
DxOffset.$_optionName = "offset";
const DxPagerConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowedPageSizes": null,
        "update:displayMode": null,
        "update:infoText": null,
        "update:label": null,
        "update:showInfo": null,
        "update:showNavigationButtons": null,
        "update:showPageSizeSelector": null,
        "update:visible": null,
    },
    props: {
        allowedPageSizes: [Array, String],
        displayMode: String,
        infoText: String,
        label: String,
        showInfo: Boolean,
        showNavigationButtons: Boolean,
        showPageSizeSelector: Boolean,
        visible: [Boolean, String]
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxPagerConfig);
const DxPager = (0, vue_1.defineComponent)(DxPagerConfig);
exports.DxPager = DxPager;
DxPager.$_optionName = "pager";
const DxPagingConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:enabled": null,
        "update:pageIndex": null,
        "update:pageSize": null,
    },
    props: {
        enabled: Boolean,
        pageIndex: Number,
        pageSize: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxPagingConfig);
const DxPaging = (0, vue_1.defineComponent)(DxPagingConfig);
exports.DxPaging = DxPaging;
DxPaging.$_optionName = "paging";
const DxPatternRuleConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:ignoreEmptyValue": null,
        "update:message": null,
        "update:pattern": null,
        "update:type": null,
    },
    props: {
        ignoreEmptyValue: Boolean,
        message: String,
        pattern: [RegExp, String],
        type: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxPatternRuleConfig);
const DxPatternRule = (0, vue_1.defineComponent)(DxPatternRuleConfig);
exports.DxPatternRule = DxPatternRule;
DxPatternRule.$_optionName = "validationRules";
DxPatternRule.$_isCollectionItem = true;
DxPatternRule.$_predefinedProps = {
    type: "pattern"
};
const DxPositionConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:at": null,
        "update:boundary": null,
        "update:boundaryOffset": null,
        "update:collision": null,
        "update:my": null,
        "update:of": null,
        "update:offset": null,
    },
    props: {
        at: [Object, String],
        boundary: {},
        boundaryOffset: [Object, String],
        collision: [String, Object],
        my: [Object, String],
        of: {},
        offset: [Object, String]
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxPositionConfig);
const DxPosition = (0, vue_1.defineComponent)(DxPositionConfig);
exports.DxPosition = DxPosition;
DxPosition.$_optionName = "position";
DxPosition.$_expectedChildren = {
    at: { isCollectionItem: false, optionName: "at" },
    boundaryOffset: { isCollectionItem: false, optionName: "boundaryOffset" },
    collision: { isCollectionItem: false, optionName: "collision" },
    my: { isCollectionItem: false, optionName: "my" },
    offset: { isCollectionItem: false, optionName: "offset" }
};
const DxRangeRuleConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:ignoreEmptyValue": null,
        "update:max": null,
        "update:message": null,
        "update:min": null,
        "update:reevaluate": null,
        "update:type": null,
    },
    props: {
        ignoreEmptyValue: Boolean,
        max: [Date, Number, String],
        message: String,
        min: [Date, Number, String],
        reevaluate: Boolean,
        type: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxRangeRuleConfig);
const DxRangeRule = (0, vue_1.defineComponent)(DxRangeRuleConfig);
exports.DxRangeRule = DxRangeRule;
DxRangeRule.$_optionName = "validationRules";
DxRangeRule.$_isCollectionItem = true;
DxRangeRule.$_predefinedProps = {
    type: "range"
};
const DxRemoteOperationsConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:filtering": null,
        "update:grouping": null,
        "update:paging": null,
        "update:sorting": null,
    },
    props: {
        filtering: Boolean,
        grouping: Boolean,
        paging: Boolean,
        sorting: Boolean
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxRemoteOperationsConfig);
const DxRemoteOperations = (0, vue_1.defineComponent)(DxRemoteOperationsConfig);
exports.DxRemoteOperations = DxRemoteOperations;
DxRemoteOperations.$_optionName = "remoteOperations";
const DxRequiredRuleConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:message": null,
        "update:trim": null,
        "update:type": null,
    },
    props: {
        message: String,
        trim: Boolean,
        type: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxRequiredRuleConfig);
const DxRequiredRule = (0, vue_1.defineComponent)(DxRequiredRuleConfig);
exports.DxRequiredRule = DxRequiredRule;
DxRequiredRule.$_optionName = "validationRules";
DxRequiredRule.$_isCollectionItem = true;
DxRequiredRule.$_predefinedProps = {
    type: "required"
};
const DxScrollingConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:scrollByContent": null,
        "update:scrollByThumb": null,
        "update:showScrollbar": null,
        "update:useNative": null,
    },
    props: {
        scrollByContent: Boolean,
        scrollByThumb: Boolean,
        showScrollbar: String,
        useNative: [Boolean, String]
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxScrollingConfig);
const DxScrolling = (0, vue_1.defineComponent)(DxScrollingConfig);
exports.DxScrolling = DxScrolling;
DxScrolling.$_optionName = "scrolling";
const DxSearchConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:editorOptions": null,
        "update:enabled": null,
        "update:mode": null,
        "update:searchExpr": null,
        "update:timeout": null,
    },
    props: {
        editorOptions: {},
        enabled: Boolean,
        mode: String,
        searchExpr: [Array, Function, String],
        timeout: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxSearchConfig);
const DxSearch = (0, vue_1.defineComponent)(DxSearchConfig);
exports.DxSearch = DxSearch;
DxSearch.$_optionName = "search";
const DxSearchPanelConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:highlightCaseSensitive": null,
        "update:highlightSearchText": null,
        "update:placeholder": null,
        "update:searchVisibleColumnsOnly": null,
        "update:text": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        highlightCaseSensitive: Boolean,
        highlightSearchText: Boolean,
        placeholder: String,
        searchVisibleColumnsOnly: Boolean,
        text: String,
        visible: Boolean,
        width: [Number, String]
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxSearchPanelConfig);
const DxSearchPanel = (0, vue_1.defineComponent)(DxSearchPanelConfig);
exports.DxSearchPanel = DxSearchPanel;
DxSearchPanel.$_optionName = "searchPanel";
const DxSelectionConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowSelectAll": null,
        "update:mode": null,
        "update:recursive": null,
        "update:selectAllMode": null,
        "update:selectByClick": null,
        "update:showCheckBoxesMode": null,
    },
    props: {
        allowSelectAll: Boolean,
        mode: String,
        recursive: Boolean,
        selectAllMode: String,
        selectByClick: Boolean,
        showCheckBoxesMode: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxSelectionConfig);
const DxSelection = (0, vue_1.defineComponent)(DxSelectionConfig);
exports.DxSelection = DxSelection;
DxSelection.$_optionName = "selection";
const DxShowConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:complete": null,
        "update:delay": null,
        "update:direction": null,
        "update:duration": null,
        "update:easing": null,
        "update:from": null,
        "update:staggerDelay": null,
        "update:start": null,
        "update:to": null,
        "update:type": null,
    },
    props: {
        complete: Function,
        delay: Number,
        direction: String,
        duration: Number,
        easing: String,
        from: Object,
        staggerDelay: Number,
        start: Function,
        to: Object,
        type: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxShowConfig);
const DxShow = (0, vue_1.defineComponent)(DxShowConfig);
exports.DxShow = DxShow;
DxShow.$_optionName = "show";
DxShow.$_expectedChildren = {
    from: { isCollectionItem: false, optionName: "from" },
    to: { isCollectionItem: false, optionName: "to" }
};
const DxSimpleItemConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:colSpan": null,
        "update:cssClass": null,
        "update:dataField": null,
        "update:editorOptions": null,
        "update:editorType": null,
        "update:helpText": null,
        "update:isRequired": null,
        "update:itemType": null,
        "update:label": null,
        "update:name": null,
        "update:template": null,
        "update:validationRules": null,
        "update:visible": null,
        "update:visibleIndex": null,
    },
    props: {
        colSpan: Number,
        cssClass: String,
        dataField: String,
        editorOptions: {},
        editorType: String,
        helpText: String,
        isRequired: Boolean,
        itemType: String,
        label: Object,
        name: String,
        template: {},
        validationRules: Array,
        visible: Boolean,
        visibleIndex: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxSimpleItemConfig);
const DxSimpleItem = (0, vue_1.defineComponent)(DxSimpleItemConfig);
exports.DxSimpleItem = DxSimpleItem;
DxSimpleItem.$_optionName = "items";
DxSimpleItem.$_isCollectionItem = true;
DxSimpleItem.$_predefinedProps = {
    itemType: "simple"
};
DxSimpleItem.$_expectedChildren = {
    AsyncRule: { isCollectionItem: true, optionName: "validationRules" },
    CompareRule: { isCollectionItem: true, optionName: "validationRules" },
    CustomRule: { isCollectionItem: true, optionName: "validationRules" },
    EmailRule: { isCollectionItem: true, optionName: "validationRules" },
    label: { isCollectionItem: false, optionName: "label" },
    NumericRule: { isCollectionItem: true, optionName: "validationRules" },
    PatternRule: { isCollectionItem: true, optionName: "validationRules" },
    RangeRule: { isCollectionItem: true, optionName: "validationRules" },
    RequiredRule: { isCollectionItem: true, optionName: "validationRules" },
    StringLengthRule: { isCollectionItem: true, optionName: "validationRules" },
    validationRule: { isCollectionItem: true, optionName: "validationRules" }
};
const DxSortingConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:ascendingText": null,
        "update:clearText": null,
        "update:descendingText": null,
        "update:mode": null,
        "update:showSortIndexes": null,
    },
    props: {
        ascendingText: String,
        clearText: String,
        descendingText: String,
        mode: String,
        showSortIndexes: Boolean
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxSortingConfig);
const DxSorting = (0, vue_1.defineComponent)(DxSortingConfig);
exports.DxSorting = DxSorting;
DxSorting.$_optionName = "sorting";
const DxStringLengthRuleConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:ignoreEmptyValue": null,
        "update:max": null,
        "update:message": null,
        "update:min": null,
        "update:trim": null,
        "update:type": null,
    },
    props: {
        ignoreEmptyValue: Boolean,
        max: Number,
        message: String,
        min: Number,
        trim: Boolean,
        type: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxStringLengthRuleConfig);
const DxStringLengthRule = (0, vue_1.defineComponent)(DxStringLengthRuleConfig);
exports.DxStringLengthRule = DxStringLengthRule;
DxStringLengthRule.$_optionName = "validationRules";
DxStringLengthRule.$_isCollectionItem = true;
DxStringLengthRule.$_predefinedProps = {
    type: "stringLength"
};
const DxTabConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:alignItemLabels": null,
        "update:badge": null,
        "update:colCount": null,
        "update:colCountByScreen": null,
        "update:disabled": null,
        "update:icon": null,
        "update:items": null,
        "update:tabTemplate": null,
        "update:template": null,
        "update:title": null,
    },
    props: {
        alignItemLabels: Boolean,
        badge: String,
        colCount: Number,
        colCountByScreen: Object,
        disabled: Boolean,
        icon: String,
        items: Array,
        tabTemplate: {},
        template: {},
        title: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxTabConfig);
const DxTab = (0, vue_1.defineComponent)(DxTabConfig);
exports.DxTab = DxTab;
DxTab.$_optionName = "tabs";
DxTab.$_isCollectionItem = true;
DxTab.$_expectedChildren = {
    colCountByScreen: { isCollectionItem: false, optionName: "colCountByScreen" }
};
const DxTabbedItemConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:colSpan": null,
        "update:cssClass": null,
        "update:itemType": null,
        "update:name": null,
        "update:tabPanelOptions": null,
        "update:tabs": null,
        "update:visible": null,
        "update:visibleIndex": null,
    },
    props: {
        colSpan: Number,
        cssClass: String,
        itemType: String,
        name: String,
        tabPanelOptions: Object,
        tabs: Array,
        visible: Boolean,
        visibleIndex: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxTabbedItemConfig);
const DxTabbedItem = (0, vue_1.defineComponent)(DxTabbedItemConfig);
exports.DxTabbedItem = DxTabbedItem;
DxTabbedItem.$_optionName = "items";
DxTabbedItem.$_isCollectionItem = true;
DxTabbedItem.$_predefinedProps = {
    itemType: "tabbed"
};
DxTabbedItem.$_expectedChildren = {
    tab: { isCollectionItem: true, optionName: "tabs" },
    tabPanelOptions: { isCollectionItem: false, optionName: "tabPanelOptions" }
};
const DxTabPanelOptionsConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:accessKey": null,
        "update:activeStateEnabled": null,
        "update:animationEnabled": null,
        "update:bindingOptions": null,
        "update:dataSource": null,
        "update:deferRendering": null,
        "update:disabled": null,
        "update:elementAttr": null,
        "update:focusStateEnabled": null,
        "update:height": null,
        "update:hint": null,
        "update:hoverStateEnabled": null,
        "update:iconPosition": null,
        "update:itemHoldTimeout": null,
        "update:items": null,
        "update:itemTemplate": null,
        "update:itemTitleTemplate": null,
        "update:loop": null,
        "update:noDataText": null,
        "update:onContentReady": null,
        "update:onDisposing": null,
        "update:onInitialized": null,
        "update:onItemClick": null,
        "update:onItemContextMenu": null,
        "update:onItemHold": null,
        "update:onItemRendered": null,
        "update:onOptionChanged": null,
        "update:onSelectionChanged": null,
        "update:onSelectionChanging": null,
        "update:onTitleClick": null,
        "update:onTitleHold": null,
        "update:onTitleRendered": null,
        "update:repaintChangesOnly": null,
        "update:rtlEnabled": null,
        "update:scrollByContent": null,
        "update:scrollingEnabled": null,
        "update:selectedIndex": null,
        "update:selectedItem": null,
        "update:showNavButtons": null,
        "update:stylingMode": null,
        "update:swipeEnabled": null,
        "update:tabIndex": null,
        "update:tabsPosition": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        accessKey: String,
        activeStateEnabled: Boolean,
        animationEnabled: Boolean,
        bindingOptions: Object,
        dataSource: [Array, Object, String],
        deferRendering: Boolean,
        disabled: Boolean,
        elementAttr: Object,
        focusStateEnabled: Boolean,
        height: [Number, String],
        hint: String,
        hoverStateEnabled: Boolean,
        iconPosition: String,
        itemHoldTimeout: Number,
        items: Array,
        itemTemplate: {},
        itemTitleTemplate: {},
        loop: Boolean,
        noDataText: String,
        onContentReady: Function,
        onDisposing: Function,
        onInitialized: Function,
        onItemClick: Function,
        onItemContextMenu: Function,
        onItemHold: Function,
        onItemRendered: Function,
        onOptionChanged: Function,
        onSelectionChanged: Function,
        onSelectionChanging: Function,
        onTitleClick: Function,
        onTitleHold: Function,
        onTitleRendered: Function,
        repaintChangesOnly: Boolean,
        rtlEnabled: Boolean,
        scrollByContent: Boolean,
        scrollingEnabled: Boolean,
        selectedIndex: Number,
        selectedItem: {},
        showNavButtons: Boolean,
        stylingMode: String,
        swipeEnabled: Boolean,
        tabIndex: Number,
        tabsPosition: String,
        visible: Boolean,
        width: [Number, String]
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxTabPanelOptionsConfig);
const DxTabPanelOptions = (0, vue_1.defineComponent)(DxTabPanelOptionsConfig);
exports.DxTabPanelOptions = DxTabPanelOptions;
DxTabPanelOptions.$_optionName = "tabPanelOptions";
DxTabPanelOptions.$_expectedChildren = {
    item: { isCollectionItem: true, optionName: "items" },
    tabPanelOptionsItem: { isCollectionItem: true, optionName: "items" }
};
const DxTabPanelOptionsItemConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:badge": null,
        "update:disabled": null,
        "update:html": null,
        "update:icon": null,
        "update:tabTemplate": null,
        "update:template": null,
        "update:text": null,
        "update:title": null,
        "update:visible": null,
    },
    props: {
        badge: String,
        disabled: Boolean,
        html: String,
        icon: String,
        tabTemplate: {},
        template: {},
        text: String,
        title: String,
        visible: Boolean
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxTabPanelOptionsItemConfig);
const DxTabPanelOptionsItem = (0, vue_1.defineComponent)(DxTabPanelOptionsItemConfig);
exports.DxTabPanelOptionsItem = DxTabPanelOptionsItem;
DxTabPanelOptionsItem.$_optionName = "items";
DxTabPanelOptionsItem.$_isCollectionItem = true;
const DxTextsConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:addCard": null,
        "update:cancel": null,
        "update:clearFilter": null,
        "update:confirmDeleteMessage": null,
        "update:confirmDeleteTitle": null,
        "update:createFilter": null,
        "update:deleteCard": null,
        "update:editCard": null,
        "update:emptyValue": null,
        "update:filterEnabledHint": null,
        "update:ok": null,
        "update:saveCard": null,
    },
    props: {
        addCard: String,
        cancel: String,
        clearFilter: String,
        confirmDeleteMessage: String,
        confirmDeleteTitle: String,
        createFilter: String,
        deleteCard: String,
        editCard: String,
        emptyValue: String,
        filterEnabledHint: String,
        ok: String,
        saveCard: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxTextsConfig);
const DxTexts = (0, vue_1.defineComponent)(DxTextsConfig);
exports.DxTexts = DxTexts;
DxTexts.$_optionName = "texts";
const DxToConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:left": null,
        "update:opacity": null,
        "update:position": null,
        "update:scale": null,
        "update:top": null,
    },
    props: {
        left: Number,
        opacity: Number,
        position: Object,
        scale: Number,
        top: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxToConfig);
const DxTo = (0, vue_1.defineComponent)(DxToConfig);
exports.DxTo = DxTo;
DxTo.$_optionName = "to";
DxTo.$_expectedChildren = {
    position: { isCollectionItem: false, optionName: "position" }
};
const DxToolbarConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:disabled": null,
        "update:items": null,
        "update:multiline": null,
        "update:visible": null,
    },
    props: {
        disabled: Boolean,
        items: Array,
        multiline: Boolean,
        visible: Boolean
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxToolbarConfig);
const DxToolbar = (0, vue_1.defineComponent)(DxToolbarConfig);
exports.DxToolbar = DxToolbar;
DxToolbar.$_optionName = "toolbar";
DxToolbar.$_expectedChildren = {
    item: { isCollectionItem: true, optionName: "items" },
    toolbarItem: { isCollectionItem: true, optionName: "items" }
};
const DxToolbarItemConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:cssClass": null,
        "update:disabled": null,
        "update:html": null,
        "update:locateInMenu": null,
        "update:location": null,
        "update:menuItemTemplate": null,
        "update:name": null,
        "update:options": null,
        "update:showText": null,
        "update:template": null,
        "update:text": null,
        "update:visible": null,
        "update:widget": null,
    },
    props: {
        cssClass: String,
        disabled: Boolean,
        html: String,
        locateInMenu: String,
        location: String,
        menuItemTemplate: {},
        name: String,
        options: {},
        showText: String,
        template: {},
        text: String,
        visible: Boolean,
        widget: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxToolbarItemConfig);
const DxToolbarItem = (0, vue_1.defineComponent)(DxToolbarItemConfig);
exports.DxToolbarItem = DxToolbarItem;
DxToolbarItem.$_optionName = "items";
DxToolbarItem.$_isCollectionItem = true;
const DxValidationRuleConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:comparisonTarget": null,
        "update:comparisonType": null,
        "update:ignoreEmptyValue": null,
        "update:max": null,
        "update:message": null,
        "update:min": null,
        "update:pattern": null,
        "update:reevaluate": null,
        "update:trim": null,
        "update:type": null,
        "update:validationCallback": null,
    },
    props: {
        comparisonTarget: Function,
        comparisonType: String,
        ignoreEmptyValue: Boolean,
        max: [Date, Number, String],
        message: String,
        min: [Date, Number, String],
        pattern: [RegExp, String],
        reevaluate: Boolean,
        trim: Boolean,
        type: String,
        validationCallback: Function
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxValidationRuleConfig);
const DxValidationRule = (0, vue_1.defineComponent)(DxValidationRuleConfig);
exports.DxValidationRule = DxValidationRule;
DxValidationRule.$_optionName = "validationRules";
DxValidationRule.$_isCollectionItem = true;
DxValidationRule.$_predefinedProps = {
    type: "required"
};
exports.default = DxCardView;
