/*!
 * devextreme-vue
 * Version: 25.1.3
 * Build date: Wed Jun 25 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

import { PropType } from "vue";
import Scheduler, { Properties } from "devextreme/ui/scheduler";
import DataSource from "devextreme/data/data_source";
import dxScheduler from "devextreme/ui/scheduler";
import dxSortable from "devextreme/ui/sortable";
import dxDraggable from "devextreme/ui/draggable";
import { AllDayPanelMode, ViewType, dxSchedulerAppointment, CellAppointmentsLimit, AppointmentAddedEvent, AppointmentAddingEvent, AppointmentClickEvent, AppointmentContextMenuEvent, AppointmentDblClickEvent, AppointmentDeletedEvent, AppointmentDeletingEvent, AppointmentFormOpeningEvent, AppointmentRenderedEvent, AppointmentTooltipShowingEvent, AppointmentUpdatedEvent, AppointmentUpdatingEvent, CellClickEvent, CellContextMenuEvent, ContentReadyEvent, DisposingEvent, InitializedEvent, OptionChangedEvent, RecurrenceEditMode, dxSchedulerScrolling, SchedulerPredefinedToolbarItem, DateNavigatorItemProperties, SchedulerPredefinedDateNavigatorItem } from "devextreme/ui/scheduler";
import { DataSourceOptions } from "devextreme/common/data";
import { Store } from "devextreme/data/store";
import { FirstDayOfWeek, ToolbarItemLocation, ToolbarItemComponent, SingleMultipleOrNone, ButtonStyle, ScrollMode, Orientation } from "devextreme/common";
import { event } from "devextreme/events/events.types";
import { LocateInMenuMode, ShowTextMode } from "devextreme/ui/toolbar";
import { dxButtonGroupOptions, dxButtonGroupItem, ContentReadyEvent as ButtonGroupContentReadyEvent, DisposingEvent as ButtonGroupDisposingEvent, InitializedEvent as ButtonGroupInitializedEvent, ItemClickEvent, OptionChangedEvent as ButtonGroupOptionChangedEvent, SelectionChangedEvent } from "devextreme/ui/button_group";
type AccessibleOptions = Pick<Properties, "accessKey" | "adaptivityEnabled" | "allDayExpr" | "allDayPanelMode" | "appointmentCollectorTemplate" | "appointmentDragging" | "appointmentTemplate" | "appointmentTooltipTemplate" | "cellDuration" | "crossScrollingEnabled" | "currentDate" | "currentView" | "customizeDateNavigatorText" | "dataCellTemplate" | "dataSource" | "dateCellTemplate" | "dateSerializationFormat" | "descriptionExpr" | "disabled" | "dropDownAppointmentTemplate" | "editing" | "elementAttr" | "endDateExpr" | "endDateTimeZoneExpr" | "endDayHour" | "firstDayOfWeek" | "focusStateEnabled" | "groupByDate" | "groups" | "height" | "hint" | "indicatorUpdateInterval" | "max" | "maxAppointmentsPerCell" | "min" | "noDataText" | "offset" | "onAppointmentAdded" | "onAppointmentAdding" | "onAppointmentClick" | "onAppointmentContextMenu" | "onAppointmentDblClick" | "onAppointmentDeleted" | "onAppointmentDeleting" | "onAppointmentFormOpening" | "onAppointmentRendered" | "onAppointmentTooltipShowing" | "onAppointmentUpdated" | "onAppointmentUpdating" | "onCellClick" | "onCellContextMenu" | "onContentReady" | "onDisposing" | "onInitialized" | "onOptionChanged" | "recurrenceEditMode" | "recurrenceExceptionExpr" | "recurrenceRuleExpr" | "remoteFiltering" | "resourceCellTemplate" | "resources" | "rtlEnabled" | "scrolling" | "selectedCellData" | "shadeUntilCurrentTime" | "showAllDayPanel" | "showCurrentTimeIndicator" | "startDateExpr" | "startDateTimeZoneExpr" | "startDayHour" | "tabIndex" | "textExpr" | "timeCellTemplate" | "timeZone" | "toolbar" | "useDropDownViewSwitcher" | "views" | "visible" | "width">;
interface DxScheduler extends AccessibleOptions {
    readonly instance?: Scheduler;
}
declare const DxScheduler: import("@vue/runtime-core").DefineComponent<{
    accessKey: StringConstructor;
    adaptivityEnabled: BooleanConstructor;
    allDayExpr: StringConstructor;
    allDayPanelMode: PropType<AllDayPanelMode>;
    appointmentCollectorTemplate: {};
    appointmentDragging: PropType<Record<string, any>>;
    appointmentTemplate: {};
    appointmentTooltipTemplate: {};
    cellDuration: NumberConstructor;
    crossScrollingEnabled: BooleanConstructor;
    currentDate: (DateConstructor | NumberConstructor | StringConstructor)[];
    currentView: PropType<string>;
    customizeDateNavigatorText: PropType<(info: {
        endDate: Date;
        startDate: Date;
        text: string;
    }) => string>;
    dataCellTemplate: {};
    dataSource: PropType<string | Record<string, any> | DataSource<any, any> | DataSourceOptions<any, any, any, any> | Store<any, any> | dxSchedulerAppointment[] | null>;
    dateCellTemplate: {};
    dateSerializationFormat: StringConstructor;
    descriptionExpr: StringConstructor;
    disabled: BooleanConstructor;
    dropDownAppointmentTemplate: {};
    editing: PropType<boolean | Record<string, any>>;
    elementAttr: PropType<Record<string, any>>;
    endDateExpr: StringConstructor;
    endDateTimeZoneExpr: StringConstructor;
    endDayHour: NumberConstructor;
    firstDayOfWeek: PropType<FirstDayOfWeek>;
    focusStateEnabled: BooleanConstructor;
    groupByDate: BooleanConstructor;
    groups: PropType<string[]>;
    height: (NumberConstructor | StringConstructor)[];
    hint: StringConstructor;
    indicatorUpdateInterval: NumberConstructor;
    max: (DateConstructor | NumberConstructor | StringConstructor)[];
    maxAppointmentsPerCell: PropType<number | CellAppointmentsLimit>;
    min: (DateConstructor | NumberConstructor | StringConstructor)[];
    noDataText: StringConstructor;
    offset: NumberConstructor;
    onAppointmentAdded: PropType<(e: AppointmentAddedEvent) => void>;
    onAppointmentAdding: PropType<(e: AppointmentAddingEvent) => void>;
    onAppointmentClick: PropType<(e: AppointmentClickEvent) => void>;
    onAppointmentContextMenu: PropType<(e: AppointmentContextMenuEvent) => void>;
    onAppointmentDblClick: PropType<(e: AppointmentDblClickEvent) => void>;
    onAppointmentDeleted: PropType<(e: AppointmentDeletedEvent) => void>;
    onAppointmentDeleting: PropType<(e: AppointmentDeletingEvent) => void>;
    onAppointmentFormOpening: PropType<(e: AppointmentFormOpeningEvent) => void>;
    onAppointmentRendered: PropType<(e: AppointmentRenderedEvent) => void>;
    onAppointmentTooltipShowing: PropType<(e: AppointmentTooltipShowingEvent) => void>;
    onAppointmentUpdated: PropType<(e: AppointmentUpdatedEvent) => void>;
    onAppointmentUpdating: PropType<(e: AppointmentUpdatingEvent) => void>;
    onCellClick: PropType<(e: CellClickEvent) => void>;
    onCellContextMenu: PropType<(e: CellContextMenuEvent) => void>;
    onContentReady: PropType<(e: ContentReadyEvent) => void>;
    onDisposing: PropType<(e: DisposingEvent) => void>;
    onInitialized: PropType<(e: InitializedEvent) => void>;
    onOptionChanged: PropType<(e: OptionChangedEvent) => void>;
    recurrenceEditMode: PropType<RecurrenceEditMode>;
    recurrenceExceptionExpr: StringConstructor;
    recurrenceRuleExpr: StringConstructor;
    remoteFiltering: BooleanConstructor;
    resourceCellTemplate: {};
    resources: PropType<Record<string, any>[]>;
    rtlEnabled: BooleanConstructor;
    scrolling: PropType<dxSchedulerScrolling>;
    selectedCellData: PropType<any[]>;
    shadeUntilCurrentTime: BooleanConstructor;
    showAllDayPanel: BooleanConstructor;
    showCurrentTimeIndicator: BooleanConstructor;
    startDateExpr: StringConstructor;
    startDateTimeZoneExpr: StringConstructor;
    startDayHour: NumberConstructor;
    tabIndex: NumberConstructor;
    textExpr: StringConstructor;
    timeCellTemplate: {};
    timeZone: StringConstructor;
    toolbar: PropType<Record<string, any> | DxSchedulerTypes.Toolbar>;
    useDropDownViewSwitcher: BooleanConstructor;
    views: PropType<(string | Record<string, any>)[]>;
    visible: BooleanConstructor;
    width: (NumberConstructor | StringConstructor)[];
}, unknown, unknown, {
    instance(): Scheduler;
}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:accessKey": null;
    "update:adaptivityEnabled": null;
    "update:allDayExpr": null;
    "update:allDayPanelMode": null;
    "update:appointmentCollectorTemplate": null;
    "update:appointmentDragging": null;
    "update:appointmentTemplate": null;
    "update:appointmentTooltipTemplate": null;
    "update:cellDuration": null;
    "update:crossScrollingEnabled": null;
    "update:currentDate": null;
    "update:currentView": null;
    "update:customizeDateNavigatorText": null;
    "update:dataCellTemplate": null;
    "update:dataSource": null;
    "update:dateCellTemplate": null;
    "update:dateSerializationFormat": null;
    "update:descriptionExpr": null;
    "update:disabled": null;
    "update:dropDownAppointmentTemplate": null;
    "update:editing": null;
    "update:elementAttr": null;
    "update:endDateExpr": null;
    "update:endDateTimeZoneExpr": null;
    "update:endDayHour": null;
    "update:firstDayOfWeek": null;
    "update:focusStateEnabled": null;
    "update:groupByDate": null;
    "update:groups": null;
    "update:height": null;
    "update:hint": null;
    "update:indicatorUpdateInterval": null;
    "update:max": null;
    "update:maxAppointmentsPerCell": null;
    "update:min": null;
    "update:noDataText": null;
    "update:offset": null;
    "update:onAppointmentAdded": null;
    "update:onAppointmentAdding": null;
    "update:onAppointmentClick": null;
    "update:onAppointmentContextMenu": null;
    "update:onAppointmentDblClick": null;
    "update:onAppointmentDeleted": null;
    "update:onAppointmentDeleting": null;
    "update:onAppointmentFormOpening": null;
    "update:onAppointmentRendered": null;
    "update:onAppointmentTooltipShowing": null;
    "update:onAppointmentUpdated": null;
    "update:onAppointmentUpdating": null;
    "update:onCellClick": null;
    "update:onCellContextMenu": null;
    "update:onContentReady": null;
    "update:onDisposing": null;
    "update:onInitialized": null;
    "update:onOptionChanged": null;
    "update:recurrenceEditMode": null;
    "update:recurrenceExceptionExpr": null;
    "update:recurrenceRuleExpr": null;
    "update:remoteFiltering": null;
    "update:resourceCellTemplate": null;
    "update:resources": null;
    "update:rtlEnabled": null;
    "update:scrolling": null;
    "update:selectedCellData": null;
    "update:shadeUntilCurrentTime": null;
    "update:showAllDayPanel": null;
    "update:showCurrentTimeIndicator": null;
    "update:startDateExpr": null;
    "update:startDateTimeZoneExpr": null;
    "update:startDayHour": null;
    "update:tabIndex": null;
    "update:textExpr": null;
    "update:timeCellTemplate": null;
    "update:timeZone": null;
    "update:toolbar": null;
    "update:useDropDownViewSwitcher": null;
    "update:views": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    accessKey: StringConstructor;
    adaptivityEnabled: BooleanConstructor;
    allDayExpr: StringConstructor;
    allDayPanelMode: PropType<AllDayPanelMode>;
    appointmentCollectorTemplate: {};
    appointmentDragging: PropType<Record<string, any>>;
    appointmentTemplate: {};
    appointmentTooltipTemplate: {};
    cellDuration: NumberConstructor;
    crossScrollingEnabled: BooleanConstructor;
    currentDate: (DateConstructor | NumberConstructor | StringConstructor)[];
    currentView: PropType<string>;
    customizeDateNavigatorText: PropType<(info: {
        endDate: Date;
        startDate: Date;
        text: string;
    }) => string>;
    dataCellTemplate: {};
    dataSource: PropType<string | Record<string, any> | DataSource<any, any> | DataSourceOptions<any, any, any, any> | Store<any, any> | dxSchedulerAppointment[] | null>;
    dateCellTemplate: {};
    dateSerializationFormat: StringConstructor;
    descriptionExpr: StringConstructor;
    disabled: BooleanConstructor;
    dropDownAppointmentTemplate: {};
    editing: PropType<boolean | Record<string, any>>;
    elementAttr: PropType<Record<string, any>>;
    endDateExpr: StringConstructor;
    endDateTimeZoneExpr: StringConstructor;
    endDayHour: NumberConstructor;
    firstDayOfWeek: PropType<FirstDayOfWeek>;
    focusStateEnabled: BooleanConstructor;
    groupByDate: BooleanConstructor;
    groups: PropType<string[]>;
    height: (NumberConstructor | StringConstructor)[];
    hint: StringConstructor;
    indicatorUpdateInterval: NumberConstructor;
    max: (DateConstructor | NumberConstructor | StringConstructor)[];
    maxAppointmentsPerCell: PropType<number | CellAppointmentsLimit>;
    min: (DateConstructor | NumberConstructor | StringConstructor)[];
    noDataText: StringConstructor;
    offset: NumberConstructor;
    onAppointmentAdded: PropType<(e: AppointmentAddedEvent) => void>;
    onAppointmentAdding: PropType<(e: AppointmentAddingEvent) => void>;
    onAppointmentClick: PropType<(e: AppointmentClickEvent) => void>;
    onAppointmentContextMenu: PropType<(e: AppointmentContextMenuEvent) => void>;
    onAppointmentDblClick: PropType<(e: AppointmentDblClickEvent) => void>;
    onAppointmentDeleted: PropType<(e: AppointmentDeletedEvent) => void>;
    onAppointmentDeleting: PropType<(e: AppointmentDeletingEvent) => void>;
    onAppointmentFormOpening: PropType<(e: AppointmentFormOpeningEvent) => void>;
    onAppointmentRendered: PropType<(e: AppointmentRenderedEvent) => void>;
    onAppointmentTooltipShowing: PropType<(e: AppointmentTooltipShowingEvent) => void>;
    onAppointmentUpdated: PropType<(e: AppointmentUpdatedEvent) => void>;
    onAppointmentUpdating: PropType<(e: AppointmentUpdatingEvent) => void>;
    onCellClick: PropType<(e: CellClickEvent) => void>;
    onCellContextMenu: PropType<(e: CellContextMenuEvent) => void>;
    onContentReady: PropType<(e: ContentReadyEvent) => void>;
    onDisposing: PropType<(e: DisposingEvent) => void>;
    onInitialized: PropType<(e: InitializedEvent) => void>;
    onOptionChanged: PropType<(e: OptionChangedEvent) => void>;
    recurrenceEditMode: PropType<RecurrenceEditMode>;
    recurrenceExceptionExpr: StringConstructor;
    recurrenceRuleExpr: StringConstructor;
    remoteFiltering: BooleanConstructor;
    resourceCellTemplate: {};
    resources: PropType<Record<string, any>[]>;
    rtlEnabled: BooleanConstructor;
    scrolling: PropType<dxSchedulerScrolling>;
    selectedCellData: PropType<any[]>;
    shadeUntilCurrentTime: BooleanConstructor;
    showAllDayPanel: BooleanConstructor;
    showCurrentTimeIndicator: BooleanConstructor;
    startDateExpr: StringConstructor;
    startDateTimeZoneExpr: StringConstructor;
    startDayHour: NumberConstructor;
    tabIndex: NumberConstructor;
    textExpr: StringConstructor;
    timeCellTemplate: {};
    timeZone: StringConstructor;
    toolbar: PropType<Record<string, any> | DxSchedulerTypes.Toolbar>;
    useDropDownViewSwitcher: BooleanConstructor;
    views: PropType<(string | Record<string, any>)[]>;
    visible: BooleanConstructor;
    width: (NumberConstructor | StringConstructor)[];
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:accessKey"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dataSource"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:elementAttr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:focusStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hint"?: ((...args: any[]) => any) | undefined;
    "onUpdate:noDataText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onContentReady"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDisposing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onInitialized"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onOptionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rtlEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:offset"?: ((...args: any[]) => any) | undefined;
    "onUpdate:toolbar"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dateSerializationFormat"?: ((...args: any[]) => any) | undefined;
    "onUpdate:firstDayOfWeek"?: ((...args: any[]) => any) | undefined;
    "onUpdate:max"?: ((...args: any[]) => any) | undefined;
    "onUpdate:min"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:scrolling"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onCellClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:adaptivityEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:textExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:groups"?: ((...args: any[]) => any) | undefined;
    "onUpdate:resources"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allDayExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allDayPanelMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:appointmentCollectorTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:appointmentDragging"?: ((...args: any[]) => any) | undefined;
    "onUpdate:appointmentTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:appointmentTooltipTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cellDuration"?: ((...args: any[]) => any) | undefined;
    "onUpdate:crossScrollingEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:currentDate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:currentView"?: ((...args: any[]) => any) | undefined;
    "onUpdate:customizeDateNavigatorText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dataCellTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dateCellTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:descriptionExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dropDownAppointmentTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:endDateExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:endDateTimeZoneExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:endDayHour"?: ((...args: any[]) => any) | undefined;
    "onUpdate:groupByDate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:indicatorUpdateInterval"?: ((...args: any[]) => any) | undefined;
    "onUpdate:maxAppointmentsPerCell"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onAppointmentAdded"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onAppointmentAdding"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onAppointmentClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onAppointmentContextMenu"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onAppointmentDblClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onAppointmentDeleted"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onAppointmentDeleting"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onAppointmentFormOpening"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onAppointmentRendered"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onAppointmentTooltipShowing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onAppointmentUpdated"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onAppointmentUpdating"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onCellContextMenu"?: ((...args: any[]) => any) | undefined;
    "onUpdate:recurrenceEditMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:recurrenceExceptionExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:recurrenceRuleExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:remoteFiltering"?: ((...args: any[]) => any) | undefined;
    "onUpdate:resourceCellTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectedCellData"?: ((...args: any[]) => any) | undefined;
    "onUpdate:shadeUntilCurrentTime"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showAllDayPanel"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showCurrentTimeIndicator"?: ((...args: any[]) => any) | undefined;
    "onUpdate:startDateExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:startDateTimeZoneExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:startDayHour"?: ((...args: any[]) => any) | undefined;
    "onUpdate:timeCellTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:timeZone"?: ((...args: any[]) => any) | undefined;
    "onUpdate:useDropDownViewSwitcher"?: ((...args: any[]) => any) | undefined;
    "onUpdate:views"?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    focusStateEnabled: boolean;
    rtlEnabled: boolean;
    visible: boolean;
    adaptivityEnabled: boolean;
    crossScrollingEnabled: boolean;
    groupByDate: boolean;
    remoteFiltering: boolean;
    shadeUntilCurrentTime: boolean;
    showAllDayPanel: boolean;
    showCurrentTimeIndicator: boolean;
    useDropDownViewSwitcher: boolean;
}>;
declare const DxAppointmentDragging: import("@vue/runtime-core").DefineComponent<{
    autoScroll: BooleanConstructor;
    data: {};
    group: StringConstructor;
    onAdd: PropType<(e: {
        component: dxScheduler;
        event: event;
        fromComponent: dxSortable | dxDraggable;
        fromData: any;
        itemData: any;
        itemElement: any;
        toComponent: dxSortable | dxDraggable;
        toData: any;
    }) => void>;
    onDragEnd: PropType<(e: {
        cancel: boolean;
        component: dxScheduler;
        event: event;
        fromComponent: dxSortable | dxDraggable;
        fromData: any;
        itemData: any;
        itemElement: any;
        toComponent: dxSortable | dxDraggable;
        toData: any;
        toItemData: any;
    }) => void>;
    onDragMove: PropType<(e: {
        cancel: boolean;
        component: dxScheduler;
        event: event;
        fromComponent: dxSortable | dxDraggable;
        fromData: any;
        itemData: any;
        itemElement: any;
        toComponent: dxSortable | dxDraggable;
        toData: any;
    }) => void>;
    onDragStart: PropType<(e: {
        cancel: boolean;
        component: dxScheduler;
        event: event;
        fromData: any;
        itemData: any;
        itemElement: any;
    }) => void>;
    onRemove: PropType<(e: {
        component: dxScheduler;
        event: event;
        fromComponent: dxSortable | dxDraggable;
        fromData: any;
        itemData: any;
        itemElement: any;
        toComponent: dxSortable | dxDraggable;
    }) => void>;
    scrollSensitivity: NumberConstructor;
    scrollSpeed: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:autoScroll": null;
    "update:data": null;
    "update:group": null;
    "update:onAdd": null;
    "update:onDragEnd": null;
    "update:onDragMove": null;
    "update:onDragStart": null;
    "update:onRemove": null;
    "update:scrollSensitivity": null;
    "update:scrollSpeed": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    autoScroll: BooleanConstructor;
    data: {};
    group: StringConstructor;
    onAdd: PropType<(e: {
        component: dxScheduler;
        event: event;
        fromComponent: dxSortable | dxDraggable;
        fromData: any;
        itemData: any;
        itemElement: any;
        toComponent: dxSortable | dxDraggable;
        toData: any;
    }) => void>;
    onDragEnd: PropType<(e: {
        cancel: boolean;
        component: dxScheduler;
        event: event;
        fromComponent: dxSortable | dxDraggable;
        fromData: any;
        itemData: any;
        itemElement: any;
        toComponent: dxSortable | dxDraggable;
        toData: any;
        toItemData: any;
    }) => void>;
    onDragMove: PropType<(e: {
        cancel: boolean;
        component: dxScheduler;
        event: event;
        fromComponent: dxSortable | dxDraggable;
        fromData: any;
        itemData: any;
        itemElement: any;
        toComponent: dxSortable | dxDraggable;
        toData: any;
    }) => void>;
    onDragStart: PropType<(e: {
        cancel: boolean;
        component: dxScheduler;
        event: event;
        fromData: any;
        itemData: any;
        itemElement: any;
    }) => void>;
    onRemove: PropType<(e: {
        component: dxScheduler;
        event: event;
        fromComponent: dxSortable | dxDraggable;
        fromData: any;
        itemData: any;
        itemElement: any;
        toComponent: dxSortable | dxDraggable;
    }) => void>;
    scrollSensitivity: NumberConstructor;
    scrollSpeed: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:data"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDragEnd"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDragMove"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDragStart"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onRemove"?: ((...args: any[]) => any) | undefined;
    "onUpdate:scrollSensitivity"?: ((...args: any[]) => any) | undefined;
    "onUpdate:scrollSpeed"?: ((...args: any[]) => any) | undefined;
    "onUpdate:autoScroll"?: ((...args: any[]) => any) | undefined;
    "onUpdate:group"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onAdd"?: ((...args: any[]) => any) | undefined;
}, {
    autoScroll: boolean;
}>;
declare const DxEditing: import("@vue/runtime-core").DefineComponent<{
    allowAdding: BooleanConstructor;
    allowDeleting: BooleanConstructor;
    allowDragging: BooleanConstructor;
    allowResizing: BooleanConstructor;
    allowTimeZoneEditing: BooleanConstructor;
    allowUpdating: BooleanConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:allowAdding": null;
    "update:allowDeleting": null;
    "update:allowDragging": null;
    "update:allowResizing": null;
    "update:allowTimeZoneEditing": null;
    "update:allowUpdating": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    allowAdding: BooleanConstructor;
    allowDeleting: BooleanConstructor;
    allowDragging: BooleanConstructor;
    allowResizing: BooleanConstructor;
    allowTimeZoneEditing: BooleanConstructor;
    allowUpdating: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowAdding"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowDeleting"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowUpdating"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowDragging"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowResizing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowTimeZoneEditing"?: ((...args: any[]) => any) | undefined;
}, {
    allowAdding: boolean;
    allowDeleting: boolean;
    allowUpdating: boolean;
    allowDragging: boolean;
    allowResizing: boolean;
    allowTimeZoneEditing: boolean;
}>;
declare const DxItem: import("@vue/runtime-core").DefineComponent<{
    cssClass: StringConstructor;
    disabled: BooleanConstructor;
    elementAttr: PropType<Record<string, any>>;
    hint: StringConstructor;
    html: StringConstructor;
    icon: StringConstructor;
    locateInMenu: PropType<LocateInMenuMode>;
    location: PropType<ToolbarItemLocation>;
    menuItemTemplate: {};
    name: PropType<SchedulerPredefinedToolbarItem>;
    options: PropType<Record<string, any> | dxButtonGroupOptions | DateNavigatorItemProperties>;
    showText: PropType<ShowTextMode>;
    template: {};
    text: StringConstructor;
    type: PropType<string>;
    visible: BooleanConstructor;
    widget: PropType<ToolbarItemComponent>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:cssClass": null;
    "update:disabled": null;
    "update:elementAttr": null;
    "update:hint": null;
    "update:html": null;
    "update:icon": null;
    "update:locateInMenu": null;
    "update:location": null;
    "update:menuItemTemplate": null;
    "update:name": null;
    "update:options": null;
    "update:showText": null;
    "update:template": null;
    "update:text": null;
    "update:type": null;
    "update:visible": null;
    "update:widget": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    cssClass: StringConstructor;
    disabled: BooleanConstructor;
    elementAttr: PropType<Record<string, any>>;
    hint: StringConstructor;
    html: StringConstructor;
    icon: StringConstructor;
    locateInMenu: PropType<LocateInMenuMode>;
    location: PropType<ToolbarItemLocation>;
    menuItemTemplate: {};
    name: PropType<SchedulerPredefinedToolbarItem>;
    options: PropType<Record<string, any> | dxButtonGroupOptions | DateNavigatorItemProperties>;
    showText: PropType<ShowTextMode>;
    template: {};
    text: StringConstructor;
    type: PropType<string>;
    visible: BooleanConstructor;
    widget: PropType<ToolbarItemComponent>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:elementAttr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hint"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:html"?: ((...args: any[]) => any) | undefined;
    "onUpdate:icon"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:location"?: ((...args: any[]) => any) | undefined;
    "onUpdate:options"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cssClass"?: ((...args: any[]) => any) | undefined;
    "onUpdate:locateInMenu"?: ((...args: any[]) => any) | undefined;
    "onUpdate:menuItemTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:widget"?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    visible: boolean;
}>;
declare const DxOptions: import("@vue/runtime-core").DefineComponent<{
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    bindingOptions: PropType<Record<string, any>>;
    buttonTemplate: {};
    disabled: BooleanConstructor;
    elementAttr: PropType<Record<string, any>>;
    focusStateEnabled: BooleanConstructor;
    height: (NumberConstructor | StringConstructor)[];
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    items: PropType<(dxButtonGroupItem | SchedulerPredefinedDateNavigatorItem)[]>;
    keyExpr: PropType<string | (() => void)>;
    onContentReady: PropType<(e: ButtonGroupContentReadyEvent) => void>;
    onDisposing: PropType<(e: ButtonGroupDisposingEvent) => void>;
    onInitialized: PropType<(e: ButtonGroupInitializedEvent) => void>;
    onItemClick: PropType<(e: ItemClickEvent) => void>;
    onOptionChanged: PropType<(e: ButtonGroupOptionChangedEvent) => void>;
    onSelectionChanged: PropType<(e: SelectionChangedEvent) => void>;
    rtlEnabled: BooleanConstructor;
    selectedItemKeys: PropType<any[]>;
    selectedItems: PropType<any[]>;
    selectionMode: PropType<SingleMultipleOrNone>;
    stylingMode: PropType<ButtonStyle>;
    tabIndex: NumberConstructor;
    visible: BooleanConstructor;
    width: (NumberConstructor | StringConstructor)[];
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:accessKey": null;
    "update:activeStateEnabled": null;
    "update:bindingOptions": null;
    "update:buttonTemplate": null;
    "update:disabled": null;
    "update:elementAttr": null;
    "update:focusStateEnabled": null;
    "update:height": null;
    "update:hint": null;
    "update:hoverStateEnabled": null;
    "update:items": null;
    "update:keyExpr": null;
    "update:onContentReady": null;
    "update:onDisposing": null;
    "update:onInitialized": null;
    "update:onItemClick": null;
    "update:onOptionChanged": null;
    "update:onSelectionChanged": null;
    "update:rtlEnabled": null;
    "update:selectedItemKeys": null;
    "update:selectedItems": null;
    "update:selectionMode": null;
    "update:stylingMode": null;
    "update:tabIndex": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    bindingOptions: PropType<Record<string, any>>;
    buttonTemplate: {};
    disabled: BooleanConstructor;
    elementAttr: PropType<Record<string, any>>;
    focusStateEnabled: BooleanConstructor;
    height: (NumberConstructor | StringConstructor)[];
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    items: PropType<(dxButtonGroupItem | SchedulerPredefinedDateNavigatorItem)[]>;
    keyExpr: PropType<string | (() => void)>;
    onContentReady: PropType<(e: ButtonGroupContentReadyEvent) => void>;
    onDisposing: PropType<(e: ButtonGroupDisposingEvent) => void>;
    onInitialized: PropType<(e: ButtonGroupInitializedEvent) => void>;
    onItemClick: PropType<(e: ItemClickEvent) => void>;
    onOptionChanged: PropType<(e: ButtonGroupOptionChangedEvent) => void>;
    onSelectionChanged: PropType<(e: SelectionChangedEvent) => void>;
    rtlEnabled: BooleanConstructor;
    selectedItemKeys: PropType<any[]>;
    selectedItems: PropType<any[]>;
    selectionMode: PropType<SingleMultipleOrNone>;
    stylingMode: PropType<ButtonStyle>;
    tabIndex: NumberConstructor;
    visible: BooleanConstructor;
    width: (NumberConstructor | StringConstructor)[];
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:accessKey"?: ((...args: any[]) => any) | undefined;
    "onUpdate:activeStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:elementAttr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:focusStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hint"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoverStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:items"?: ((...args: any[]) => any) | undefined;
    "onUpdate:keyExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onContentReady"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDisposing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onInitialized"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onItemClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onOptionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onSelectionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rtlEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectedItemKeys"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectedItems"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:stylingMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:bindingOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:buttonTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectionMode"?: ((...args: any[]) => any) | undefined;
}, {
    activeStateEnabled: boolean;
    disabled: boolean;
    focusStateEnabled: boolean;
    hoverStateEnabled: boolean;
    rtlEnabled: boolean;
    visible: boolean;
}>;
declare const DxOptionsItem: import("@vue/runtime-core").DefineComponent<{
    disabled: BooleanConstructor;
    elementAttr: PropType<Record<string, any>>;
    hint: StringConstructor;
    icon: StringConstructor;
    template: {};
    text: StringConstructor;
    type: PropType<string>;
    visible: BooleanConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:disabled": null;
    "update:elementAttr": null;
    "update:hint": null;
    "update:icon": null;
    "update:template": null;
    "update:text": null;
    "update:type": null;
    "update:visible": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    disabled: BooleanConstructor;
    elementAttr: PropType<Record<string, any>>;
    hint: StringConstructor;
    icon: StringConstructor;
    template: {};
    text: StringConstructor;
    type: PropType<string>;
    visible: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:elementAttr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hint"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:icon"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    visible: boolean;
}>;
declare const DxResource: import("@vue/runtime-core").DefineComponent<{
    allowMultiple: BooleanConstructor;
    colorExpr: StringConstructor;
    dataSource: PropType<string | any[] | Record<string, any> | DataSource<any, any> | DataSourceOptions<any, any, any, any> | Store<any, any> | null>;
    displayExpr: PropType<string | ((resource: any) => string)>;
    fieldExpr: StringConstructor;
    label: StringConstructor;
    useColorAsDefault: BooleanConstructor;
    valueExpr: PropType<string | (() => void)>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:allowMultiple": null;
    "update:colorExpr": null;
    "update:dataSource": null;
    "update:displayExpr": null;
    "update:fieldExpr": null;
    "update:label": null;
    "update:useColorAsDefault": null;
    "update:valueExpr": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    allowMultiple: BooleanConstructor;
    colorExpr: StringConstructor;
    dataSource: PropType<string | any[] | Record<string, any> | DataSource<any, any> | DataSourceOptions<any, any, any, any> | Store<any, any> | null>;
    displayExpr: PropType<string | ((resource: any) => string)>;
    fieldExpr: StringConstructor;
    label: StringConstructor;
    useColorAsDefault: BooleanConstructor;
    valueExpr: PropType<string | (() => void)>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dataSource"?: ((...args: any[]) => any) | undefined;
    "onUpdate:label"?: ((...args: any[]) => any) | undefined;
    "onUpdate:valueExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:displayExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:colorExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowMultiple"?: ((...args: any[]) => any) | undefined;
    "onUpdate:fieldExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:useColorAsDefault"?: ((...args: any[]) => any) | undefined;
}, {
    allowMultiple: boolean;
    useColorAsDefault: boolean;
}>;
declare const DxScrolling: import("@vue/runtime-core").DefineComponent<{
    mode: PropType<ScrollMode>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:mode": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    mode: PropType<ScrollMode>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:mode"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxToolbar: import("@vue/runtime-core").DefineComponent<{
    disabled: BooleanConstructor;
    items: PropType<(SchedulerPredefinedToolbarItem | DxSchedulerTypes.ToolbarItem)[]>;
    multiline: BooleanConstructor;
    visible: BooleanConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:disabled": null;
    "update:items": null;
    "update:multiline": null;
    "update:visible": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    disabled: BooleanConstructor;
    items: PropType<(SchedulerPredefinedToolbarItem | DxSchedulerTypes.ToolbarItem)[]>;
    multiline: BooleanConstructor;
    visible: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:items"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:multiline"?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    visible: boolean;
    multiline: boolean;
}>;
declare const DxToolbarItem: import("@vue/runtime-core").DefineComponent<{
    cssClass: StringConstructor;
    disabled: BooleanConstructor;
    html: StringConstructor;
    locateInMenu: PropType<LocateInMenuMode>;
    location: PropType<ToolbarItemLocation>;
    menuItemTemplate: {};
    name: PropType<SchedulerPredefinedToolbarItem>;
    options: PropType<Record<string, any> | dxButtonGroupOptions | DateNavigatorItemProperties>;
    showText: PropType<ShowTextMode>;
    template: {};
    text: StringConstructor;
    visible: BooleanConstructor;
    widget: PropType<ToolbarItemComponent>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:cssClass": null;
    "update:disabled": null;
    "update:html": null;
    "update:locateInMenu": null;
    "update:location": null;
    "update:menuItemTemplate": null;
    "update:name": null;
    "update:options": null;
    "update:showText": null;
    "update:template": null;
    "update:text": null;
    "update:visible": null;
    "update:widget": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    cssClass: StringConstructor;
    disabled: BooleanConstructor;
    html: StringConstructor;
    locateInMenu: PropType<LocateInMenuMode>;
    location: PropType<ToolbarItemLocation>;
    menuItemTemplate: {};
    name: PropType<SchedulerPredefinedToolbarItem>;
    options: PropType<Record<string, any> | dxButtonGroupOptions | DateNavigatorItemProperties>;
    showText: PropType<ShowTextMode>;
    template: {};
    text: StringConstructor;
    visible: BooleanConstructor;
    widget: PropType<ToolbarItemComponent>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:html"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:location"?: ((...args: any[]) => any) | undefined;
    "onUpdate:options"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cssClass"?: ((...args: any[]) => any) | undefined;
    "onUpdate:locateInMenu"?: ((...args: any[]) => any) | undefined;
    "onUpdate:menuItemTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:widget"?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    visible: boolean;
}>;
declare const DxView: import("@vue/runtime-core").DefineComponent<{
    agendaDuration: NumberConstructor;
    allDayPanelMode: PropType<AllDayPanelMode>;
    appointmentCollectorTemplate: {};
    appointmentTemplate: {};
    appointmentTooltipTemplate: {};
    cellDuration: NumberConstructor;
    dataCellTemplate: {};
    dateCellTemplate: {};
    dropDownAppointmentTemplate: {};
    endDayHour: NumberConstructor;
    firstDayOfWeek: PropType<FirstDayOfWeek>;
    groupByDate: BooleanConstructor;
    groupOrientation: PropType<Orientation>;
    groups: PropType<string[]>;
    intervalCount: NumberConstructor;
    maxAppointmentsPerCell: PropType<number | CellAppointmentsLimit>;
    name: StringConstructor;
    offset: NumberConstructor;
    resourceCellTemplate: {};
    scrolling: PropType<dxSchedulerScrolling>;
    startDate: (DateConstructor | NumberConstructor | StringConstructor)[];
    startDayHour: NumberConstructor;
    timeCellTemplate: {};
    type: PropType<ViewType>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:agendaDuration": null;
    "update:allDayPanelMode": null;
    "update:appointmentCollectorTemplate": null;
    "update:appointmentTemplate": null;
    "update:appointmentTooltipTemplate": null;
    "update:cellDuration": null;
    "update:dataCellTemplate": null;
    "update:dateCellTemplate": null;
    "update:dropDownAppointmentTemplate": null;
    "update:endDayHour": null;
    "update:firstDayOfWeek": null;
    "update:groupByDate": null;
    "update:groupOrientation": null;
    "update:groups": null;
    "update:intervalCount": null;
    "update:maxAppointmentsPerCell": null;
    "update:name": null;
    "update:offset": null;
    "update:resourceCellTemplate": null;
    "update:scrolling": null;
    "update:startDate": null;
    "update:startDayHour": null;
    "update:timeCellTemplate": null;
    "update:type": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    agendaDuration: NumberConstructor;
    allDayPanelMode: PropType<AllDayPanelMode>;
    appointmentCollectorTemplate: {};
    appointmentTemplate: {};
    appointmentTooltipTemplate: {};
    cellDuration: NumberConstructor;
    dataCellTemplate: {};
    dateCellTemplate: {};
    dropDownAppointmentTemplate: {};
    endDayHour: NumberConstructor;
    firstDayOfWeek: PropType<FirstDayOfWeek>;
    groupByDate: BooleanConstructor;
    groupOrientation: PropType<Orientation>;
    groups: PropType<string[]>;
    intervalCount: NumberConstructor;
    maxAppointmentsPerCell: PropType<number | CellAppointmentsLimit>;
    name: StringConstructor;
    offset: NumberConstructor;
    resourceCellTemplate: {};
    scrolling: PropType<dxSchedulerScrolling>;
    startDate: (DateConstructor | NumberConstructor | StringConstructor)[];
    startDayHour: NumberConstructor;
    timeCellTemplate: {};
    type: PropType<ViewType>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:offset"?: ((...args: any[]) => any) | undefined;
    "onUpdate:firstDayOfWeek"?: ((...args: any[]) => any) | undefined;
    "onUpdate:scrolling"?: ((...args: any[]) => any) | undefined;
    "onUpdate:startDate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:groups"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allDayPanelMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:appointmentCollectorTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:appointmentTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:appointmentTooltipTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cellDuration"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dataCellTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dateCellTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dropDownAppointmentTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:endDayHour"?: ((...args: any[]) => any) | undefined;
    "onUpdate:groupByDate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:maxAppointmentsPerCell"?: ((...args: any[]) => any) | undefined;
    "onUpdate:resourceCellTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:startDayHour"?: ((...args: any[]) => any) | undefined;
    "onUpdate:timeCellTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:agendaDuration"?: ((...args: any[]) => any) | undefined;
    "onUpdate:groupOrientation"?: ((...args: any[]) => any) | undefined;
    "onUpdate:intervalCount"?: ((...args: any[]) => any) | undefined;
}, {
    groupByDate: boolean;
}>;
export default DxScheduler;
export { DxScheduler, DxAppointmentDragging, DxEditing, DxItem, DxOptions, DxOptionsItem, DxResource, DxScrolling, DxToolbar, DxToolbarItem, DxView };
import type * as DxSchedulerTypes from "devextreme/ui/scheduler_types";
export { DxSchedulerTypes };
